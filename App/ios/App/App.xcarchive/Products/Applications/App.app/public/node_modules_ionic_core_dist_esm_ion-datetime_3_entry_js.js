"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js"],{

/***/ 9689:
/*!*******************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-datetime_3.entry.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_datetime": () => (/* binding */ Datetime),
/* harmony export */   "ion_picker": () => (/* binding */ Picker),
/* harmony export */   "ion_picker_column": () => (/* binding */ PickerColumnCmp)
/* harmony export */ });
/* harmony import */ var _Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-8e692445.js */ 1559);
/* harmony import */ var _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-40bb69ee.js */ 2002);
/* harmony import */ var _ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ionic-global-c95cf239.js */ 8607);
/* harmony import */ var _focus_visible_096cf6fd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./focus-visible-096cf6fd.js */ 5777);
/* harmony import */ var _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers-3b390e48.js */ 9234);
/* harmony import */ var _index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-c4b11676.js */ 9273);
/* harmony import */ var _dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dir-e8b767a8.js */ 7481);
/* harmony import */ var _theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./theme-7670341c.js */ 320);
/* harmony import */ var _parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parse-71f28cd7.js */ 1474);
/* harmony import */ var _overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./overlays-87c7c7cb.js */ 2752);
/* harmony import */ var _animation_2c50d24d_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./animation-2c50d24d.js */ 631);
/* harmony import */ var _haptic_683b3b3c_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./haptic-683b3b3c.js */ 634);
/* harmony import */ var _hardware_back_button_490df115_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./hardware-back-button-490df115.js */ 159);
/* harmony import */ var _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./index-33ffec25.js */ 2286);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */















const isYearDisabled = (refYear, minParts, maxParts) => {
  if (minParts && minParts.year > refYear) {
    return true;
  }

  if (maxParts && maxParts.year < refYear) {
    return true;
  }

  return false;
};
/**
 * Returns true if a given day should
 * not be interactive according to its value,
 * or the max/min dates.
 */


const isDayDisabled = (refParts, minParts, maxParts, dayValues) => {
  /**
   * If this is a filler date (i.e. padding)
   * then the date is disabled.
   */
  if (refParts.day === null) {
    return true;
  }
  /**
   * If user passed in a list of acceptable day values
   * check to make sure that the date we are looking
   * at is in this array.
   */


  if (dayValues !== undefined && !dayValues.includes(refParts.day)) {
    return true;
  }
  /**
   * Given a min date, perform the following
   * checks. If any of them are true, then the
   * day should be disabled:
   * 1. Is the current year < the min allowed year?
   * 2. Is the current year === min allowed year,
   * but the current month < the min allowed month?
   * 3. Is the current year === min allowed year, the
   * current month === min allow month, but the current
   * day < the min allowed day?
   */


  if (minParts && (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.i)(refParts, minParts)) {
    return true;
  }
  /**
   * Given a max date, perform the following
   * checks. If any of them are true, then the
   * day should be disabled:
   * 1. Is the current year > the max allowed year?
   * 2. Is the current year === max allowed year,
   * but the current month > the max allowed month?
   * 3. Is the current year === max allowed year, the
   * current month === max allow month, but the current
   * day > the max allowed day?
   */


  if (maxParts && (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.b)(refParts, maxParts)) {
    return true;
  }
  /**
   * If none of these checks
   * passed then the date should
   * be interactive.
   */


  return false;
};
/**
 * Given a locale, a date, the selected date(s), and today's date,
 * generate the state for a given calendar day button.
 */


const getCalendarDayState = (locale, refParts, activeParts, todayParts, minParts, maxParts, dayValues) => {
  /**
   * activeParts signals what day(s) are currently selected in the datetime.
   * If multiple="true", this will be an array, but the logic in this util
   * is the same whether we have one selected day or many because we're only
   * calculating the state for one button. So, we treat a single activeParts value
   * the same as an array of length one.
   */
  const activePartsArray = Array.isArray(activeParts) ? activeParts : [activeParts];
  /**
   * The day button is active if it is selected, or in other words, if refParts
   * matches at least one selected date.
   */

  const isActive = activePartsArray.find(parts => (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.c)(refParts, parts)) !== undefined;
  const isToday = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.c)(refParts, todayParts);
  const disabled = isDayDisabled(refParts, minParts, maxParts, dayValues);
  /**
   * Note that we always return one object regardless of whether activeParts
   * was an array, since we pare down to one value for isActive.
   */

  return {
    disabled,
    isActive,
    isToday,
    ariaSelected: isActive ? 'true' : null,
    ariaLabel: (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.g)(locale, isToday, refParts),
    text: refParts.day != null ? (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.a)(locale, refParts) : null
  };
};
/**
 * Returns `true` if the month is disabled given the
 * current date value and min/max date constraints.
 */


const isMonthDisabled = (refParts, {
  minParts,
  maxParts
}) => {
  // If the year is disabled then the month is disabled.
  if (isYearDisabled(refParts.year, minParts, maxParts)) {
    return true;
  } // If the date value is before the min date, then the month is disabled.
  // If the date value is after the max date, then the month is disabled.


  if (minParts && (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.i)(refParts, minParts) || maxParts && (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.b)(refParts, maxParts)) {
    return true;
  }

  return false;
};
/**
 * Given a working date, an optional minimum date range,
 * and an optional maximum date range; determine if the
 * previous navigation button is disabled.
 */


const isPrevMonthDisabled = (refParts, minParts, maxParts) => {
  const prevMonth = Object.assign(Object.assign({}, (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.d)(refParts)), {
    day: null
  });
  return isMonthDisabled(prevMonth, {
    minParts,
    maxParts
  });
};
/**
 * Given a working date and a maximum date range,
 * determine if the next navigation button is disabled.
 */


const isNextMonthDisabled = (refParts, maxParts) => {
  const nextMonth = Object.assign(Object.assign({}, (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.e)(refParts)), {
    day: null
  });
  return isMonthDisabled(nextMonth, {
    maxParts
  });
};

const datetimeIosCss = ":host{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;background:var(--background);overflow:hidden}ion-picker-column-internal{min-width:26px}:host(.datetime-size-fixed){width:auto;height:auto}:host(.datetime-size-fixed:not(.datetime-prefer-wheel)){max-width:350px}:host(.datetime-size-fixed.datetime-prefer-wheel){min-width:350px;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}:host(.datetime-size-cover){width:100%}:host .calendar-body,:host .datetime-year{opacity:0}:host(:not(.datetime-ready)) .datetime-year{position:absolute;pointer-events:none}:host(.datetime-ready) .calendar-body{opacity:1}:host(.datetime-ready) .datetime-year{display:none;opacity:1}:host .wheel-order-year-first .day-column{-ms-flex-order:3;order:3;text-align:end}:host .wheel-order-year-first .month-column{-ms-flex-order:2;order:2;text-align:end}:host .wheel-order-year-first .year-column{-ms-flex-order:1;order:1;text-align:start}:host .datetime-calendar,:host .datetime-year{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-flow:column;flex-flow:column}:host(.show-month-and-year) .datetime-year{display:-ms-flexbox;display:flex}@supports (background: -webkit-named-image(apple-pay-logo-black)) and (not (aspect-ratio: 1/1)){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{left:-99999px;position:absolute;visibility:hidden;pointer-events:none}:host-context([dir=rtl]):host(.show-month-and-year) .calendar-next-prev,:host-context([dir=rtl]).show-month-and-year .calendar-next-prev,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-days-of-week,:host-context([dir=rtl]).show-month-and-year .calendar-days-of-week,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-body,:host-context([dir=rtl]).show-month-and-year .calendar-body,:host-context([dir=rtl]):host(.show-month-and-year) .datetime-time,:host-context([dir=rtl]).show-month-and-year .datetime-time{left:unset;right:unset;right:-99999px}}@supports (not (background: -webkit-named-image(apple-pay-logo-black))) or ((background: -webkit-named-image(apple-pay-logo-black)) and (aspect-ratio: 1/1)){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{display:none}}:host(.month-year-picker-open) .datetime-footer{display:none}:host(.datetime-readonly),:host(.datetime-disabled){pointer-events:none}:host(.datetime-disabled){opacity:0.4}:host .datetime-header .datetime-title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .datetime-action-buttons.has-clear-button{width:100%}:host .datetime-action-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{--background:translucent}:host .calendar-action-buttons ion-item ion-label{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .calendar-action-buttons ion-item ion-icon{padding-left:4px;padding-right:0;padding-top:0;padding-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-action-buttons ion-item ion-icon{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:0;padding-inline-end:0}}:host .calendar-days-of-week{display:grid;grid-template-columns:repeat(7, 1fr);text-align:center}:host .calendar-body{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;outline:none}:host .calendar-body .calendar-month{scroll-snap-align:start;scroll-snap-stop:always;-ms-flex-negative:0;flex-shrink:0;width:100%}:host .calendar-body .calendar-month-disabled{scroll-snap-align:none}:host .calendar-body::-webkit-scrollbar{display:none}:host .calendar-body .calendar-month-grid{display:grid;grid-template-columns:repeat(7, 1fr);height:100%}:host .calendar-day{padding-left:0px;padding-right:0px;padding-top:0px;padding-bottom:0px;margin-left:0px;margin-right:0px;margin-top:0px;margin-bottom:0px;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;border:none;outline:none;background:none;color:currentColor;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;z-index:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{padding-left:unset;padding-right:unset;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0px;padding-inline-end:0px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{margin-left:unset;margin-right:unset;-webkit-margin-start:0px;margin-inline-start:0px;-webkit-margin-end:0px;margin-inline-end:0px}}:host .calendar-day[disabled]{pointer-events:none;opacity:0.4}:host .calendar-day:after{border-radius:32px;padding-left:4px;padding-right:4px;padding-top:4px;padding-bottom:4px;position:absolute;top:50%;left:50%;width:32px;height:32px;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);content:\" \";z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day:after{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px}}:host .datetime-time{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host(.datetime-presentation-time) .datetime-time{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0}:host ion-popover{--height:200px}:host .time-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .time-body{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;display:-ms-flexbox;display:flex;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .time-body{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}:host .time-body-active{color:var(--ion-color-base)}:host(.in-item){position:static}:host(.show-month-and-year) .calendar-action-buttons ion-item{--color:var(--ion-color-base)}:host{--background:var(--ion-color-light, #ffffff);--background-rgb:var(--ion-color-light-rgb);--title-color:var(--ion-color-step-600, #666666)}:host(.datetime-presentation-date-time:not(.datetime-prefer-wheel)),:host(.datetime-presentation-time-date:not(.datetime-prefer-wheel)),:host(.datetime-presentation-date:not(.datetime-prefer-wheel)){min-height:350px}:host .datetime-header{padding-left:16px;padding-right:16px;padding-top:16px;padding-bottom:16px;border-bottom:0.55px solid var(--ion-color-step-200, #cccccc);font-size:14px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-header{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host .datetime-header .datetime-title{color:var(--title-color)}:host .datetime-header .datetime-selected-date{margin-top:10px}:host .calendar-action-buttons ion-item{--padding-start:16px;--background-hover:transparent;--background-activated:transparent;font-size:16px;font-weight:600}:host .calendar-action-buttons ion-item ion-icon,:host .calendar-action-buttons ion-buttons ion-button{color:var(--ion-color-base)}:host .calendar-action-buttons ion-buttons{padding-left:0;padding-right:0;padding-top:8px;padding-bottom:0}:host .calendar-action-buttons ion-buttons ion-button{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}:host .calendar-days-of-week{padding-left:8px;padding-right:8px;padding-top:0;padding-bottom:0;color:var(--ion-color-step-300, #b3b3b3);font-size:12px;font-weight:600;line-height:24px;text-transform:uppercase}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-days-of-week{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}:host .calendar-body .calendar-month .calendar-month-grid{padding-left:8px;padding-right:8px;padding-top:8px;padding-bottom:8px;height:calc(100% - 16px)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-body .calendar-month .calendar-month-grid{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}:host .calendar-day{font-size:20px}:host .calendar-day:after{opacity:0.2}:host .calendar-day:focus:after{background:var(--ion-color-base)}:host .calendar-day.calendar-day-today{color:var(--ion-color-base)}:host .calendar-day.calendar-day-active{color:var(--ion-color-base);font-weight:600}:host .calendar-day.calendar-day-active:after{background:var(--ion-color-base)}:host .calendar-day.calendar-day-today.calendar-day-active{color:var(--ion-color-contrast)}:host .calendar-day.calendar-day-today.calendar-day-active:after{background:var(--ion-color-base);opacity:1}:host .datetime-time{padding-left:16px;padding-right:16px;padding-top:8px;padding-bottom:16px;font-size:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-time{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host .datetime-time .time-header{font-weight:600}:host .datetime-buttons{padding-left:8px;padding-right:8px;padding-top:8px;padding-bottom:8px;border-top:0.55px solid var(--ion-color-step-200, #cccccc)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-buttons{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}:host .datetime-buttons ::slotted(ion-buttons),:host .datetime-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}:host .datetime-action-buttons{width:100%}";
const datetimeMdCss = ":host{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;background:var(--background);overflow:hidden}ion-picker-column-internal{min-width:26px}:host(.datetime-size-fixed){width:auto;height:auto}:host(.datetime-size-fixed:not(.datetime-prefer-wheel)){max-width:350px}:host(.datetime-size-fixed.datetime-prefer-wheel){min-width:350px;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}:host(.datetime-size-cover){width:100%}:host .calendar-body,:host .datetime-year{opacity:0}:host(:not(.datetime-ready)) .datetime-year{position:absolute;pointer-events:none}:host(.datetime-ready) .calendar-body{opacity:1}:host(.datetime-ready) .datetime-year{display:none;opacity:1}:host .wheel-order-year-first .day-column{-ms-flex-order:3;order:3;text-align:end}:host .wheel-order-year-first .month-column{-ms-flex-order:2;order:2;text-align:end}:host .wheel-order-year-first .year-column{-ms-flex-order:1;order:1;text-align:start}:host .datetime-calendar,:host .datetime-year{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-flow:column;flex-flow:column}:host(.show-month-and-year) .datetime-year{display:-ms-flexbox;display:flex}@supports (background: -webkit-named-image(apple-pay-logo-black)) and (not (aspect-ratio: 1/1)){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{left:-99999px;position:absolute;visibility:hidden;pointer-events:none}:host-context([dir=rtl]):host(.show-month-and-year) .calendar-next-prev,:host-context([dir=rtl]).show-month-and-year .calendar-next-prev,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-days-of-week,:host-context([dir=rtl]).show-month-and-year .calendar-days-of-week,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-body,:host-context([dir=rtl]).show-month-and-year .calendar-body,:host-context([dir=rtl]):host(.show-month-and-year) .datetime-time,:host-context([dir=rtl]).show-month-and-year .datetime-time{left:unset;right:unset;right:-99999px}}@supports (not (background: -webkit-named-image(apple-pay-logo-black))) or ((background: -webkit-named-image(apple-pay-logo-black)) and (aspect-ratio: 1/1)){:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{display:none}}:host(.month-year-picker-open) .datetime-footer{display:none}:host(.datetime-readonly),:host(.datetime-disabled){pointer-events:none}:host(.datetime-disabled){opacity:0.4}:host .datetime-header .datetime-title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .datetime-action-buttons.has-clear-button{width:100%}:host .datetime-action-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{--background:translucent}:host .calendar-action-buttons ion-item ion-label{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .calendar-action-buttons ion-item ion-icon{padding-left:4px;padding-right:0;padding-top:0;padding-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-action-buttons ion-item ion-icon{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:0;padding-inline-end:0}}:host .calendar-days-of-week{display:grid;grid-template-columns:repeat(7, 1fr);text-align:center}:host .calendar-body{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;outline:none}:host .calendar-body .calendar-month{scroll-snap-align:start;scroll-snap-stop:always;-ms-flex-negative:0;flex-shrink:0;width:100%}:host .calendar-body .calendar-month-disabled{scroll-snap-align:none}:host .calendar-body::-webkit-scrollbar{display:none}:host .calendar-body .calendar-month-grid{display:grid;grid-template-columns:repeat(7, 1fr);height:100%}:host .calendar-day{padding-left:0px;padding-right:0px;padding-top:0px;padding-bottom:0px;margin-left:0px;margin-right:0px;margin-top:0px;margin-bottom:0px;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;border:none;outline:none;background:none;color:currentColor;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;z-index:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{padding-left:unset;padding-right:unset;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0px;padding-inline-end:0px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{margin-left:unset;margin-right:unset;-webkit-margin-start:0px;margin-inline-start:0px;-webkit-margin-end:0px;margin-inline-end:0px}}:host .calendar-day[disabled]{pointer-events:none;opacity:0.4}:host .calendar-day:after{border-radius:32px;padding-left:4px;padding-right:4px;padding-top:4px;padding-bottom:4px;position:absolute;top:50%;left:50%;width:32px;height:32px;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);content:\" \";z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day:after{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px}}:host .datetime-time{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host(.datetime-presentation-time) .datetime-time{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0}:host ion-popover{--height:200px}:host .time-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .time-body{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;display:-ms-flexbox;display:flex;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .time-body{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}:host .time-body-active{color:var(--ion-color-base)}:host(.in-item){position:static}:host(.show-month-and-year) .calendar-action-buttons ion-item{--color:var(--ion-color-base)}:host{--background:var(--ion-color-step-100, #ffffff);--title-color:var(--ion-color-contrast)}:host .datetime-header{padding-left:20px;padding-right:20px;padding-top:20px;padding-bottom:20px;background:var(--ion-color-base);color:var(--title-color)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-header{padding-left:unset;padding-right:unset;-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px}}:host .datetime-header .datetime-title{font-size:12px;text-transform:uppercase}:host .datetime-header .datetime-selected-date{margin-top:30px;font-size:34px}:host .datetime-calendar .calendar-action-buttons ion-item{--padding-start:20px}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{color:var(--ion-color-step-650, #595959)}:host .calendar-days-of-week{padding-left:10px;padding-right:10px;padding-top:0px;padding-bottom:0px;color:var(--ion-color-step-500, gray);font-size:14px;line-height:36px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-days-of-week{padding-left:unset;padding-right:unset;-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px}}:host .calendar-body .calendar-month .calendar-month-grid{padding-left:10px;padding-right:10px;padding-top:3px;padding-bottom:0px;grid-template-rows:repeat(6, 1fr)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-body .calendar-month .calendar-month-grid{padding-left:unset;padding-right:unset;-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px}}:host .calendar-day{padding-left:0px;padding-right:0;padding-top:13px;padding-bottom:13px;font-size:14px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{padding-left:unset;padding-right:unset;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0;padding-inline-end:0}}:host .calendar-day:focus:after{background:rgba(var(--ion-color-base-rgb), 0.2);-webkit-box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2);box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2)}:host .calendar-day.calendar-day-today{color:var(--ion-color-base)}:host .calendar-day.calendar-day-today:after{border:1px solid var(--ion-color-base)}:host .calendar-day.calendar-day-active{color:var(--ion-color-contrast)}:host .calendar-day.calendar-day-active:after{border:1px solid var(--ion-color-base);background:var(--ion-color-base)}:host .datetime-time{padding-left:16px;padding-right:16px;padding-top:8px;padding-bottom:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-time{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host .time-header{color:var(--ion-color-step-650, #595959)}:host(.datetime-presentation-month) .datetime-year,:host(.datetime-presentation-year) .datetime-year,:host(.datetime-presentation-month-year) .datetime-year{margin-top:20px;margin-bottom:20px}:host .datetime-buttons{padding-left:10px;padding-right:10px;padding-top:10px;padding-bottom:10px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:end;justify-content:flex-end}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-buttons{padding-left:unset;padding-right:unset;-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px}}:host .datetime-view-buttons ion-button{color:var(--ion-color-step-800, #333333)}";
const Datetime = class {
  constructor(hostRef) {
    (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionCancel = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionCancel", 7);
    this.ionChange = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionChange", 7);
    this.ionFocus = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionFocus", 7);
    this.ionBlur = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionBlur", 7);
    this.ionStyle = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionStyle", 7);
    this.ionRender = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionRender", 7);
    this.inputId = `ion-dt-${datetimeIds++}`;
    this.todayParts = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.p)((0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.f)());
    this.prevPresentation = null;
    /**
     * Duplicate reference to `activeParts` that does not trigger a re-render of the component.
     * Allows caching an instance of the `activeParts` in between render cycles.
     */

    this.activePartsClone = [];
    this.showMonthAndYear = false;
    this.activeParts = [];
    this.workingParts = {
      month: 5,
      day: 28,
      year: 2021,
      hour: 13,
      minute: 52,
      ampm: 'pm'
    };
    this.isPresented = false;
    this.isTimePopoverOpen = false;
    /**
     * The color to use from your application's color palette.
     * Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
     * For more information on colors, see [theming](/docs/theming/basics).
     */

    this.color = 'primary';
    /**
     * The name of the control, which is submitted with the form data.
     */

    this.name = this.inputId;
    /**
     * If `true`, the user cannot interact with the datetime.
     */

    this.disabled = false;
    /**
     * If `true`, the datetime appears normal but is not interactive.
     */

    this.readonly = false;
    /**
     * Which values you want to select. `'date'` will show
     * a calendar picker to select the month, day, and year. `'time'`
     * will show a time picker to select the hour, minute, and (optionally)
     * AM/PM. `'date-time'` will show the date picker first and time picker second.
     * `'time-date'` will show the time picker first and date picker second.
     */

    this.presentation = 'date-time';
    /**
     * The text to display on the picker's cancel button.
     */

    this.cancelText = 'Cancel';
    /**
     * The text to display on the picker's "Done" button.
     */

    this.doneText = 'Done';
    /**
     * The text to display on the picker's "Clear" button.
     */

    this.clearText = 'Clear';
    /**
     * The locale to use for `ion-datetime`. This
     * impacts month and day name formatting.
     * The `'default'` value refers to the default
     * locale set by your device.
     */

    this.locale = 'default';
    /**
     * The first day of the week to use for `ion-datetime`. The
     * default value is `0` and represents Sunday.
     */

    this.firstDayOfWeek = 0;
    /**
     * If `true`, multiple dates can be selected at once. Only
     * applies to `presentation="date"` and `preferWheel="false"`.
     */

    this.multiple = false;
    /**
     * If `true`, a header will be shown above the calendar
     * picker. This will include both the slotted title, and
     * the selected date.
     */

    this.showDefaultTitle = false;
    /**
     * If `true`, the default "Cancel" and "OK" buttons
     * will be rendered at the bottom of the `ion-datetime`
     * component. Developers can also use the `button` slot
     * if they want to customize these buttons. If custom
     * buttons are set in the `button` slot then the
     * default buttons will not be rendered.
     */

    this.showDefaultButtons = false;
    /**
     * If `true`, a "Clear" button will be rendered alongside
     * the default "Cancel" and "OK" buttons at the bottom of the `ion-datetime`
     * component. Developers can also use the `button` slot
     * if they want to customize these buttons. If custom
     * buttons are set in the `button` slot then the
     * default buttons will not be rendered.
     */

    this.showClearButton = false;
    /**
     * If `true`, the default "Time" label will be rendered
     * for the time selector of the `ion-datetime` component.
     * Developers can also use the `time-label` slot
     * if they want to customize this label. If a custom
     * label is set in the `time-label` slot then the
     * default label will not be rendered.
     */

    this.showDefaultTimeLabel = true;
    /**
     * If `cover`, the `ion-datetime` will expand to cover the full width of its container.
     * If `fixed`, the `ion-datetime` will have a fixed width.
     */

    this.size = 'fixed';
    /**
     * If `true`, a wheel picker will be rendered instead of a calendar grid
     * where possible. If `false`, a calendar grid will be rendered instead of
     * a wheel picker where possible.
     *
     * A wheel picker can be rendered instead of a grid when `presentation` is
     * one of the following values: `'date'`, `'date-time'`, or `'time-date'`.
     *
     * A wheel picker will always be rendered regardless of
     * the `preferWheel` value when `presentation` is one of the following values:
     * `'time'`, `'month'`, `'month-year'`, or `'year'`.
     */

    this.preferWheel = false;
    /**
     * Returns the DatetimePart interface
     * to use when rendering an initial set of
     * data. This should be used when rendering an
     * interface in an environment where the `value`
     * may not be set. This function works
     * by returning the first selected date in
     * "activePartsClone" and then falling back to
     * today's DatetimeParts if no active date is selected.
     */

    this.getDefaultPart = () => {
      const {
        activePartsClone,
        todayParts
      } = this;
      const firstPart = Array.isArray(activePartsClone) ? activePartsClone[0] : activePartsClone;
      return firstPart !== null && firstPart !== void 0 ? firstPart : todayParts;
    };

    this.closeParentOverlay = () => {
      const popoverOrModal = this.el.closest('ion-modal, ion-popover');

      if (popoverOrModal) {
        popoverOrModal.dismiss();
      }
    };

    this.setWorkingParts = parts => {
      this.workingParts = Object.assign({}, parts);
    };

    this.setActiveParts = (parts, removeDate = false) => {
      const {
        multiple,
        activePartsClone
      } = this;
      /**
       * When setting the active parts, it is possible
       * to set invalid data. For example,
       * when updating January 31 to February,
       * February 31 does not exist. As a result
       * we need to validate the active parts and
       * ensure that we are only setting valid dates.
       * Additionally, we need to update the working parts
       * too in the event that the validated parts are different.
       */

      const validatedParts = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.v)(parts);
      this.setWorkingParts(validatedParts);

      if (multiple) {
        /**
         * We read from activePartsClone here because valueChanged() only updates that,
         * so it's the more reliable source of truth. If we read from activeParts, then
         * if you click July 1, manually set the value to July 2, and then click July 3,
         * the new value would be [July 1, July 3], ignoring the value set.
         *
         * We can then pass the new value to activeParts (rather than activePartsClone)
         * since the clone will be updated automatically by activePartsChanged().
         */
        const activePartsArray = Array.isArray(activePartsClone) ? activePartsClone : [activePartsClone];

        if (removeDate) {
          this.activeParts = activePartsArray.filter(p => !(0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.c)(p, validatedParts));
        } else {
          this.activeParts = [...activePartsArray, validatedParts];
        }
      } else {
        this.activeParts = Object.assign({}, validatedParts);
      }

      const hasSlottedButtons = this.el.querySelector('[slot="buttons"]') !== null;

      if (hasSlottedButtons || this.showDefaultButtons) {
        return;
      }

      this.confirm();
    };

    this.initializeKeyboardListeners = () => {
      const calendarBodyRef = this.calendarBodyRef;

      if (!calendarBodyRef) {
        return;
      }

      const root = this.el.shadowRoot;
      /**
       * Get a reference to the month
       * element we are currently viewing.
       */

      const currentMonth = calendarBodyRef.querySelector('.calendar-month:nth-of-type(2)');
      /**
       * When focusing the calendar body, we want to pass focus
       * to the working day, but other days should
       * only be accessible using the arrow keys. Pressing
       * Tab should jump between bodies of selectable content.
       */

      const checkCalendarBodyFocus = ev => {
        var _a;

        const record = ev[0];
        /**
         * If calendar body was already focused
         * when this fired or if the calendar body
         * if not currently focused, we should not re-focus
         * the inner day.
         */

        if (((_a = record.oldValue) === null || _a === void 0 ? void 0 : _a.includes('ion-focused')) || !calendarBodyRef.classList.contains('ion-focused')) {
          return;
        }

        this.focusWorkingDay(currentMonth);
      };

      const mo = new MutationObserver(checkCalendarBodyFocus);
      mo.observe(calendarBodyRef, {
        attributeFilter: ['class'],
        attributeOldValue: true
      });

      this.destroyKeyboardMO = () => {
        mo === null || mo === void 0 ? void 0 : mo.disconnect();
      };
      /**
       * We must use keydown not keyup as we want
       * to prevent scrolling when using the arrow keys.
       */


      calendarBodyRef.addEventListener('keydown', ev => {
        const activeElement = root.activeElement;

        if (!activeElement || !activeElement.classList.contains('calendar-day')) {
          return;
        }

        const parts = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.h)(activeElement);
        let partsToFocus;

        switch (ev.key) {
          case 'ArrowDown':
            ev.preventDefault();
            partsToFocus = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.o)(parts);
            break;

          case 'ArrowUp':
            ev.preventDefault();
            partsToFocus = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.n)(parts);
            break;

          case 'ArrowRight':
            ev.preventDefault();
            partsToFocus = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.m)(parts);
            break;

          case 'ArrowLeft':
            ev.preventDefault();
            partsToFocus = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.l)(parts);
            break;

          case 'Home':
            ev.preventDefault();
            partsToFocus = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.k)(parts);
            break;

          case 'End':
            ev.preventDefault();
            partsToFocus = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.j)(parts);
            break;

          case 'PageUp':
            ev.preventDefault();
            partsToFocus = ev.shiftKey ? (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.N)(parts) : (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.d)(parts);
            break;

          case 'PageDown':
            ev.preventDefault();
            partsToFocus = ev.shiftKey ? (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.M)(parts) : (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.e)(parts);
            break;

          /**
           * Do not preventDefault here
           * as we do not want to override other
           * browser defaults such as pressing Enter/Space
           * to select a day.
           */

          default:
            return;
        }
        /**
         * If the day we want to move focus to is
         * disabled, do not do anything.
         */


        if (isDayDisabled(partsToFocus, this.minParts, this.maxParts)) {
          return;
        }

        this.setWorkingParts(Object.assign(Object.assign({}, this.workingParts), partsToFocus));
        /**
         * Give view a chance to re-render
         * then move focus to the new working day
         */

        requestAnimationFrame(() => this.focusWorkingDay(currentMonth));
      });
    };

    this.focusWorkingDay = currentMonth => {
      /**
       * Get the number of padding days so
       * we know how much to offset our next selector by
       * to grab the correct calenday-day element.
       */
      const padding = currentMonth.querySelectorAll('.calendar-day-padding');
      const {
        day
      } = this.workingParts;

      if (day === null) {
        return;
      }
      /**
       * Get the calendar day element
       * and focus it.
       */


      const dayEl = currentMonth.querySelector(`.calendar-day:nth-of-type(${padding.length + day})`);

      if (dayEl) {
        dayEl.focus();
      }
    };

    this.processMinParts = () => {
      const {
        min,
        todayParts
      } = this;

      if (min === undefined) {
        this.minParts = undefined;
        return;
      }

      this.minParts = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.q)(min, todayParts);
    };

    this.processMaxParts = () => {
      const {
        max,
        todayParts
      } = this;

      if (max === undefined) {
        this.maxParts = undefined;
        return;
      }

      this.maxParts = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.r)(max, todayParts);
    };

    this.initializeCalendarListener = () => {
      const calendarBodyRef = this.calendarBodyRef;

      if (!calendarBodyRef) {
        return;
      }
      /**
       * For performance reasons, we only render 3
       * months at a time: The current month, the previous
       * month, and the next month. We have a scroll listener
       * on the calendar body to append/prepend new months.
       *
       * We can do this because Stencil is smart enough to not
       * re-create the .calendar-month containers, but rather
       * update the content within those containers.
       *
       * As an added bonus, WebKit has some troubles with
       * scroll-snap-stop: always, so not rendering all of
       * the months in a row allows us to mostly sidestep
       * that issue.
       */


      const months = calendarBodyRef.querySelectorAll('.calendar-month');
      const startMonth = months[0];
      const workingMonth = months[1];
      const endMonth = months[2];
      const mode = (0,_ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_3__.b)(this);
      const needsiOSRubberBandFix = mode === 'ios' && typeof navigator !== 'undefined' && navigator.maxTouchPoints > 1;
      /**
       * Before setting up the scroll listener,
       * scroll the middle month into view.
       * scrollIntoView() will scroll entire page
       * if element is not in viewport. Use scrollLeft instead.
       */

      (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.c)(() => {
        calendarBodyRef.scrollLeft = startMonth.clientWidth * ((0,_dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_7__.i)(this.el) ? -1 : 1);

        const getChangedMonth = parts => {
          const box = calendarBodyRef.getBoundingClientRect();
          const root = this.el.shadowRoot;
          /**
           * Get the element that is in the center of the calendar body.
           * This will be an element inside of the active month.
           */

          const elementAtCenter = root.elementFromPoint(box.x + box.width / 2, box.y + box.height / 2);
          /**
           * If there is no element then the
           * component may be re-rendering on a slow device.
           */

          if (!elementAtCenter) return;
          const month = elementAtCenter.closest('.calendar-month');
          if (!month) return;
          /**
           * The edge of the month must be lined up with
           * the edge of the calendar body in order for
           * the component to update. Otherwise, it
           * may be the case that the user has paused their
           * swipe or the browser has not finished snapping yet.
           * Rather than check if the x values are equal,
           * we give it a tolerance of 2px to account for
           * sub pixel rendering.
           */

          const monthBox = month.getBoundingClientRect();
          if (Math.abs(monthBox.x - box.x) > 2) return;
          /**
           * From here, we can determine if the start
           * month or the end month was scrolled into view.
           * If no month was changed, then we can return from
           * the scroll callback early.
           */

          if (month === startMonth) {
            return (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.d)(parts);
          } else if (month === endMonth) {
            return (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.e)(parts);
          } else {
            return;
          }
        };

        const updateActiveMonth = () => {
          if (needsiOSRubberBandFix) {
            calendarBodyRef.style.removeProperty('pointer-events');
            appliediOSRubberBandFix = false;
          }
          /**
           * If the month did not change
           * then we can return early.
           */


          const newDate = getChangedMonth(this.workingParts);
          if (!newDate) return;
          const {
            month,
            day,
            year
          } = newDate;

          if (isMonthDisabled({
            month,
            year,
            day: null
          }, {
            minParts: Object.assign(Object.assign({}, this.minParts), {
              day: null
            }),
            maxParts: Object.assign(Object.assign({}, this.maxParts), {
              day: null
            })
          })) {
            return;
          }
          /**
           * Prevent scrolling for other browsers
           * to give the DOM time to update and the container
           * time to properly snap.
           */


          calendarBodyRef.style.setProperty('overflow', 'hidden');
          /**
           * Use a writeTask here to ensure
           * that the state is updated and the
           * correct month is scrolled into view
           * in the same frame. This is not
           * typically a problem on newer devices
           * but older/slower device may have a flicker
           * if we did not do this.
           */

          (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.c)(() => {
            this.setWorkingParts(Object.assign(Object.assign({}, this.workingParts), {
              month,
              day: day,
              year
            }));
            calendarBodyRef.scrollLeft = workingMonth.clientWidth * ((0,_dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_7__.i)(this.el) ? -1 : 1);
            calendarBodyRef.style.removeProperty('overflow');
          });
        };
        /**
         * When the container finishes scrolling we
         * need to update the DOM with the selected month.
         */


        let scrollTimeout;
        /**
         * We do not want to attempt to set pointer-events
         * multiple times within a single swipe gesture as
         * that adds unnecessary work to the main thread.
         */

        let appliediOSRubberBandFix = false;

        const scrollCallback = () => {
          if (scrollTimeout) {
            clearTimeout(scrollTimeout);
          }
          /**
           * On iOS it is possible to quickly rubber band
           * the scroll area before the scroll timeout has fired.
           * This results in users reaching the end of the scrollable
           * container before the DOM has updated.
           * By setting `pointer-events: none` we can ensure that
           * subsequent swipes do not happen while the container
           * is snapping.
           */


          if (!appliediOSRubberBandFix && needsiOSRubberBandFix) {
            calendarBodyRef.style.setProperty('pointer-events', 'none');
            appliediOSRubberBandFix = true;
          } // Wait ~3 frames


          scrollTimeout = setTimeout(updateActiveMonth, 50);
        };

        calendarBodyRef.addEventListener('scroll', scrollCallback);

        this.destroyCalendarListener = () => {
          calendarBodyRef.removeEventListener('scroll', scrollCallback);
        };
      });
    };
    /**
     * Clean up all listeners except for the overlay
     * listener. This is so that we can re-create the listeners
     * if the datetime has been hidden/presented by a modal or popover.
     */


    this.destroyInteractionListeners = () => {
      const {
        destroyCalendarListener,
        destroyKeyboardMO
      } = this;

      if (destroyCalendarListener !== undefined) {
        destroyCalendarListener();
      }

      if (destroyKeyboardMO !== undefined) {
        destroyKeyboardMO();
      }
    };

    this.processValue = value => {
      const hasValue = value !== null && value !== undefined;
      let valueToProcess = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.p)(value !== null && value !== void 0 ? value : (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.f)());
      const {
        minParts,
        maxParts,
        multiple
      } = this;

      if (!multiple && Array.isArray(value)) {
        this.value = value[0];
        valueToProcess = valueToProcess[0];
      }
      /**
       * Datetime should only warn of out of bounds values
       * if set by the user. If the `value` is undefined,
       * we will default to today's date which may be out
       * of bounds. In this case, the warning makes it look
       * like the developer did something wrong which is
       * not true.
       */


      if (hasValue) {
        (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.w)(valueToProcess, minParts, maxParts);
      }
      /**
       * If there are multiple values, pick an arbitrary one to clamp to. This way,
       * if the values are across months, we always show at least one of them. Note
       * that the values don't necessarily have to be in order.
       */


      const singleValue = Array.isArray(valueToProcess) ? valueToProcess[0] : valueToProcess;
      const {
        month,
        day,
        year,
        hour,
        minute,
        tzOffset
      } = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.O)(singleValue, minParts, maxParts);
      const ampm = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.P)(hour);
      this.setWorkingParts({
        month,
        day,
        year,
        hour,
        minute,
        tzOffset,
        ampm
      });
      /**
       * Since `activeParts` indicates a value that
       * been explicitly selected either by the
       * user or the app, only update `activeParts`
       * if the `value` property is set.
       */

      if (hasValue) {
        if (Array.isArray(valueToProcess)) {
          this.activeParts = [...valueToProcess];
        } else {
          this.activeParts = {
            month,
            day,
            year,
            hour,
            minute,
            tzOffset,
            ampm
          };
        }
      }
    };

    this.onFocus = () => {
      this.ionFocus.emit();
    };

    this.onBlur = () => {
      this.ionBlur.emit();
    };

    this.hasValue = () => {
      return this.value != null && this.value !== '';
    };

    this.nextMonth = () => {
      const calendarBodyRef = this.calendarBodyRef;

      if (!calendarBodyRef) {
        return;
      }

      const nextMonth = calendarBodyRef.querySelector('.calendar-month:last-of-type');

      if (!nextMonth) {
        return;
      }

      const left = nextMonth.offsetWidth * 2;
      calendarBodyRef.scrollTo({
        top: 0,
        left: left * ((0,_dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_7__.i)(this.el) ? -1 : 1),
        behavior: 'smooth'
      });
    };

    this.prevMonth = () => {
      const calendarBodyRef = this.calendarBodyRef;

      if (!calendarBodyRef) {
        return;
      }

      const prevMonth = calendarBodyRef.querySelector('.calendar-month:first-of-type');

      if (!prevMonth) {
        return;
      }

      calendarBodyRef.scrollTo({
        top: 0,
        left: 0,
        behavior: 'smooth'
      });
    };

    this.toggleMonthAndYearView = () => {
      this.showMonthAndYear = !this.showMonthAndYear;
    };
  }

  disabledChanged() {
    this.emitStyle();
  }

  minChanged() {
    this.processMinParts();
  }

  maxChanged() {
    this.processMaxParts();
  }

  yearValuesChanged() {
    this.parsedYearValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.yearValues);
  }

  monthValuesChanged() {
    this.parsedMonthValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.monthValues);
  }

  dayValuesChanged() {
    this.parsedDayValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.dayValues);
  }

  hourValuesChanged() {
    this.parsedHourValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.hourValues);
  }

  minuteValuesChanged() {
    this.parsedMinuteValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.minuteValues);
  }

  activePartsChanged() {
    this.activePartsClone = this.activeParts;
  }
  /**
   * Update the datetime value when the value changes
   */


  valueChanged() {
    const {
      value,
      minParts,
      maxParts,
      workingParts,
      multiple
    } = this;

    if (this.hasValue()) {
      if (!multiple && Array.isArray(value)) {
        this.value = value[0];
        return; // setting this.value will trigger re-run of this function
      }
      /**
       * Clones the value of the `activeParts` to the private clone, to update
       * the date display on the current render cycle without causing another render.
       *
       * This allows us to update the current value's date/time display without
       * refocusing or shifting the user's display (leaves the user in place).
       */


      const valueDateParts = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.p)(value);

      if (valueDateParts) {
        (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.w)(valueDateParts, minParts, maxParts);

        if (Array.isArray(valueDateParts)) {
          this.activePartsClone = [...valueDateParts];
        } else {
          const {
            month,
            day,
            year,
            hour,
            minute
          } = valueDateParts;
          const ampm = hour != null ? hour >= 12 ? 'pm' : 'am' : undefined;
          this.activePartsClone = Object.assign(Object.assign({}, this.activeParts), {
            month,
            day,
            year,
            hour,
            minute,
            ampm
          });
          /**
           * The working parts am/pm value must be updated when the value changes, to
           * ensure the time picker hour column values are generated correctly.
           *
           * Note that we don't need to do this if valueDateParts is an array, since
           * multiple="true" does not apply to time pickers.
           */

          this.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
            ampm
          }));
        }
      } else {
        (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__.p)(`Unable to parse date string: ${value}. Please provide a valid ISO 8601 datetime string.`);
      }
    }

    this.emitStyle();
    this.ionChange.emit({
      value
    });
  }
  /**
   * Confirms the selected datetime value, updates the
   * `value` property, and optionally closes the popover
   * or modal that the datetime was presented in.
   */


  confirm(closeOverlay = false) {
    var _this = this;

    return (0,_Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        isCalendarPicker,
        activeParts
      } = _this;
      /**
       * We only update the value if the presentation is not a calendar picker.
       */

      if (activeParts !== undefined || !isCalendarPicker) {
        const activePartsIsArray = Array.isArray(activeParts);

        if (activePartsIsArray && activeParts.length === 0) {
          _this.value = undefined;
        } else {
          /**
           * Prevent convertDataToISO from doing any
           * kind of transformation based on timezone
           * This cancels out any change it attempts to make
           *
           * Important: Take the timezone offset based on
           * the date that is currently selected, otherwise
           * there can be 1 hr difference when dealing w/ DST
           */
          if (activePartsIsArray) {
            const dates = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.t)(activeParts).map(str => new Date(str));

            for (let i = 0; i < dates.length; i++) {
              activeParts[i].tzOffset = dates[i].getTimezoneOffset() * -1;
            }
          } else {
            const date = new Date((0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.t)(activeParts));
            activeParts.tzOffset = date.getTimezoneOffset() * -1;
          }

          _this.value = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.t)(activeParts);
        }
      }

      if (closeOverlay) {
        _this.closeParentOverlay();
      }
    })();
  }
  /**
   * Resets the internal state of the datetime but does not update the value.
   * Passing a valid ISO-8601 string will reset the state of the component to the provided date.
   * If no value is provided, the internal state will be reset to the clamped value of the min, max and today.
   */


  reset(startDate) {
    var _this2 = this;

    return (0,_Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.processValue(startDate);
    })();
  }
  /**
   * Emits the ionCancel event and
   * optionally closes the popover
   * or modal that the datetime was
   * presented in.
   */


  cancel(closeOverlay = false) {
    var _this3 = this;

    return (0,_Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this3.ionCancel.emit();

      if (closeOverlay) {
        _this3.closeParentOverlay();
      }
    })();
  }

  get isCalendarPicker() {
    const {
      presentation
    } = this;
    return presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';
  }

  connectedCallback() {
    this.clearFocusVisible = (0,_focus_visible_096cf6fd_js__WEBPACK_IMPORTED_MODULE_4__.startFocusVisible)(this.el).destroy;
  }

  disconnectedCallback() {
    if (this.clearFocusVisible) {
      this.clearFocusVisible();
      this.clearFocusVisible = undefined;
    }
  }

  initializeListeners() {
    this.initializeCalendarListener();
    this.initializeKeyboardListeners();
  }

  componentDidLoad() {
    /**
     * If a scrollable element is hidden using `display: none`,
     * it will not have a scroll height meaning we cannot scroll elements
     * into view. As a result, we will need to wait for the datetime to become
     * visible if used inside of a modal or a popover otherwise the scrollable
     * areas will not have the correct values snapped into place.
     */
    const visibleCallback = entries => {
      const ev = entries[0];

      if (!ev.isIntersecting) {
        return;
      }

      this.initializeListeners();
      /**
       * TODO: Datetime needs a frame to ensure that it
       * can properly scroll contents into view. As a result
       * we hide the scrollable content until after that frame
       * so users do not see the content quickly shifting. The downside
       * is that the content will pop into view a frame after. Maybe there
       * is a better way to handle this?
       */

      (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.c)(() => {
        this.el.classList.add('datetime-ready');
      });
    };

    const visibleIO = new IntersectionObserver(visibleCallback, {
      threshold: 0.01
    });
    /**
     * Use raf to avoid a race condition between the component loading and
     * its display animation starting (such as when shown in a modal). This
     * could cause the datetime to start at a visibility of 0, erroneously
     * triggering the `hiddenIO` observer below.
     */

    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__.r)(() => visibleIO === null || visibleIO === void 0 ? void 0 : visibleIO.observe(this.el));
    /**
     * We need to clean up listeners when the datetime is hidden
     * in a popover/modal so that we can properly scroll containers
     * back into view if they are re-presented. When the datetime is hidden
     * the scroll areas have scroll widths/heights of 0px, so any snapping
     * we did originally has been lost.
     */

    const hiddenCallback = entries => {
      const ev = entries[0];

      if (ev.isIntersecting) {
        return;
      }

      this.destroyInteractionListeners();
      /**
       * When datetime is hidden, we need to make sure that
       * the month/year picker is closed. Otherwise,
       * it will be open when the datetime re-appears
       * and the scroll area of the calendar grid will be 0.
       * As a result, the wrong month will be shown.
       */

      this.showMonthAndYear = false;
      (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.c)(() => {
        this.el.classList.remove('datetime-ready');
      });
    };

    const hiddenIO = new IntersectionObserver(hiddenCallback, {
      threshold: 0
    });
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__.r)(() => hiddenIO === null || hiddenIO === void 0 ? void 0 : hiddenIO.observe(this.el));
    /**
     * Datetime uses Ionic components that emit
     * ionFocus and ionBlur. These events are
     * composed meaning they will cross
     * the shadow dom boundary. We need to
     * stop propagation on these events otherwise
     * developers will see 2 ionFocus or 2 ionBlur
     * events at a time.
     */

    const root = (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.el);
    root.addEventListener('ionFocus', ev => ev.stopPropagation());
    root.addEventListener('ionBlur', ev => ev.stopPropagation());
  }
  /**
   * When the presentation is changed, all calendar content is recreated,
   * so we need to re-init behavior with the new elements.
   */


  componentDidRender() {
    const {
      presentation,
      prevPresentation,
      calendarBodyRef,
      minParts,
      preferWheel
    } = this;
    /**
     * TODO(FW-2165)
     * Remove this when https://bugs.webkit.org/show_bug.cgi?id=235960 is fixed.
     * When using `min`, we add `scroll-snap-align: none`
     * to the disabled month so that users cannot scroll to it.
     * This triggers a bug in WebKit where the scroll position is reset.
     * Since the month change logic is handled by a scroll listener,
     * this causes the month to change leading to `scroll-snap-align`
     * changing again, thus changing the scroll position again and causing
     * an infinite loop.
     * This issue only applies to the calendar grid, so we can disable
     * it if the calendar grid is not being used.
     */

    const hasCalendarGrid = !preferWheel && ['date-time', 'time-date', 'date'].includes(presentation);

    if (minParts !== undefined && hasCalendarGrid && calendarBodyRef) {
      const workingMonth = calendarBodyRef.querySelector('.calendar-month:nth-of-type(1)');

      if (workingMonth) {
        calendarBodyRef.scrollLeft = workingMonth.clientWidth * ((0,_dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_7__.i)(this.el) ? -1 : 1);
      }
    }

    if (prevPresentation === null) {
      this.prevPresentation = presentation;
      return;
    }

    if (presentation === prevPresentation) {
      return;
    }

    this.prevPresentation = presentation;
    this.destroyInteractionListeners();
    this.initializeListeners();
    /**
     * The month/year picker from the date interface
     * should be closed as it is not available in non-date
     * interfaces.
     */

    this.showMonthAndYear = false;
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__.r)(() => {
      this.ionRender.emit();
    });
  }

  componentWillLoad() {
    const {
      el,
      multiple,
      presentation,
      preferWheel
    } = this;

    if (multiple) {
      if (presentation !== 'date') {
        (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__.p)('Multiple date selection is only supported for presentation="date".', el);
      }

      if (preferWheel) {
        (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__.p)('Multiple date selection is not supported with preferWheel="true".', el);
      }
    }

    this.processMinParts();
    this.processMaxParts();
    this.processValue(this.value);
    this.parsedHourValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.hourValues);
    this.parsedMinuteValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.minuteValues);
    this.parsedMonthValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.monthValues);
    this.parsedYearValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.yearValues);
    this.parsedDayValues = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.s)(this.dayValues);
    this.emitStyle();
  }

  emitStyle() {
    this.ionStyle.emit({
      interactive: true,
      datetime: true,
      'interactive-disabled': this.disabled
    });
  }
  /**
   * Universal render methods
   * These are pieces of datetime that
   * are rendered independently of presentation.
   */


  renderFooter() {
    const {
      showDefaultButtons,
      showClearButton
    } = this;
    const hasSlottedButtons = this.el.querySelector('[slot="buttons"]') !== null;

    if (!hasSlottedButtons && !showDefaultButtons && !showClearButton) {
      return;
    }

    const clearButtonClick = () => {
      this.reset();
      this.value = undefined;
    };
    /**
     * By default we render two buttons:
     * Cancel - Dismisses the datetime and
     * does not update the `value` prop.
     * OK - Dismisses the datetime and
     * updates the `value` prop.
     */


    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "datetime-footer"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "datetime-buttons"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: {
        ['datetime-action-buttons']: true,
        ['has-clear-button']: this.showClearButton
      }
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "buttons"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-buttons", null, showDefaultButtons && (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-button", {
      id: "cancel-button",
      color: this.color,
      onClick: () => this.cancel(true)
    }, this.cancelText), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", null, showClearButton && (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-button", {
      id: "clear-button",
      color: this.color,
      onClick: () => clearButtonClick()
    }, this.clearText), showDefaultButtons && (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-button", {
      id: "confirm-button",
      color: this.color,
      onClick: () => this.confirm(true)
    }, this.doneText)))))));
  }
  /**
   * Wheel picker render methods
   */


  renderWheelPicker(forcePresentation = this.presentation) {
    /**
     * If presentation="time-date" we switch the
     * order of the render array here instead of
     * manually reordering each date/time picker
     * column with CSS. This allows for additional
     * flexibility if we need to render subsets
     * of the date/time data or do additional ordering
     * within the child render functions.
     */
    const renderArray = forcePresentation === 'time-date' ? [this.renderTimePickerColumns(forcePresentation), this.renderDatePickerColumns(forcePresentation)] : [this.renderDatePickerColumns(forcePresentation), this.renderTimePickerColumns(forcePresentation)];
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-internal", null, renderArray);
  }

  renderDatePickerColumns(forcePresentation) {
    return forcePresentation === 'date-time' || forcePresentation === 'time-date' ? this.renderCombinedDatePickerColumn() : this.renderIndividualDatePickerColumns(forcePresentation);
  }

  renderCombinedDatePickerColumn() {
    const {
      workingParts,
      locale,
      minParts,
      maxParts,
      todayParts,
      isDateEnabled
    } = this;
    const activePart = this.getDefaultPart();
    /**
     * By default, generate a range of 3 months:
     * Previous month, current month, and next month
     */

    const monthsToRender = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.H)(workingParts);
    const lastMonth = monthsToRender[monthsToRender.length - 1];
    /**
     * Ensure that users can select the entire window of dates.
     */

    monthsToRender[0].day = 1;
    lastMonth.day = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.u)(lastMonth.month, lastMonth.year);
    /**
     * Narrow the dates rendered based on min/max dates (if any).
     * The `min` date is used if the min is after the generated min month.
     * The `max` date is used if the max is before the generated max month.
     * This ensures that the sliding window always stays at 3 months
     * but still allows future dates to be lazily rendered based on any min/max
     * constraints.
     */

    const min = minParts !== undefined && (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.b)(minParts, monthsToRender[0]) ? minParts : monthsToRender[0];
    const max = maxParts !== undefined && (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.i)(maxParts, lastMonth) ? maxParts : lastMonth;
    const result = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.x)(locale, todayParts, min, max, this.parsedDayValues, this.parsedMonthValues);
    let items = result.items;
    const parts = result.parts;

    if (isDateEnabled) {
      items = items.map((itemObject, index) => {
        const referenceParts = parts[index];
        let disabled;

        try {
          /**
           * The `isDateEnabled` implementation is try-catch wrapped
           * to prevent exceptions in the user's function from
           * interrupting the calendar rendering.
           */
          disabled = !isDateEnabled((0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.t)(referenceParts));
        } catch (e) {
          (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__.b)('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', e);
        }

        return Object.assign(Object.assign({}, itemObject), {
          disabled
        });
      });
    }
    /**
     * If we have selected a day already, then default the column
     * to that value. Otherwise, default it to today.
     */


    const todayString = workingParts.day !== null ? `${workingParts.year}-${workingParts.month}-${workingParts.day}` : `${todayParts.year}-${todayParts.month}-${todayParts.day}`;
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-column-internal", {
      class: "date-column",
      color: this.color,
      items: items,
      value: todayString,
      onIonChange: ev => {
        // TODO(FW-1823) Remove this when iOS 14 support is dropped.
        // Due to a Safari 14 issue we need to destroy
        // the scroll listener before we update state
        // and trigger a re-render.
        if (this.destroyCalendarListener) {
          this.destroyCalendarListener();
        }

        const {
          value
        } = ev.detail;
        const findPart = parts.find(({
          month,
          day,
          year
        }) => value === `${year}-${month}-${day}`);
        this.setWorkingParts(Object.assign(Object.assign({}, workingParts), findPart));
        this.setActiveParts(Object.assign(Object.assign({}, activePart), findPart)); // We can re-attach the scroll listener after
        // the working parts have been updated.

        this.initializeCalendarListener();
        ev.stopPropagation();
      }
    });
  }

  renderIndividualDatePickerColumns(forcePresentation) {
    const {
      workingParts,
      isDateEnabled
    } = this;
    const shouldRenderMonths = forcePresentation !== 'year' && forcePresentation !== 'time';
    const months = shouldRenderMonths ? (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.y)(this.locale, workingParts, this.minParts, this.maxParts, this.parsedMonthValues) : [];
    const shouldRenderDays = forcePresentation === 'date';
    let days = shouldRenderDays ? (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.z)(this.locale, workingParts, this.minParts, this.maxParts, this.parsedDayValues) : [];

    if (isDateEnabled) {
      days = days.map(dayObject => {
        const {
          value
        } = dayObject;
        const valueNum = typeof value === 'string' ? parseInt(value) : value;
        const referenceParts = {
          month: workingParts.month,
          day: valueNum,
          year: workingParts.year
        };
        let disabled;

        try {
          /**
           * The `isDateEnabled` implementation is try-catch wrapped
           * to prevent exceptions in the user's function from
           * interrupting the calendar rendering.
           */
          disabled = !isDateEnabled((0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.t)(referenceParts));
        } catch (e) {
          (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__.b)('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', e);
        }

        return Object.assign(Object.assign({}, dayObject), {
          disabled
        });
      });
    }

    const shouldRenderYears = forcePresentation !== 'month' && forcePresentation !== 'time';
    const years = shouldRenderYears ? (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.A)(this.locale, this.todayParts, this.minParts, this.maxParts, this.parsedYearValues) : [];
    /**
     * Certain locales show the day before the month.
     */

    const showMonthFirst = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.B)(this.locale, {
      month: 'numeric',
      day: 'numeric'
    });
    let renderArray = [];

    if (showMonthFirst) {
      renderArray = [this.renderMonthPickerColumn(months), this.renderDayPickerColumn(days), this.renderYearPickerColumn(years)];
    } else {
      renderArray = [this.renderDayPickerColumn(days), this.renderMonthPickerColumn(months), this.renderYearPickerColumn(years)];
    }

    return renderArray;
  }

  renderDayPickerColumn(days) {
    var _a;

    if (days.length === 0) {
      return [];
    }

    const {
      workingParts
    } = this;
    const activePart = this.getDefaultPart();
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-column-internal", {
      class: "day-column",
      color: this.color,
      items: days,
      value: (_a = workingParts.day !== null ? workingParts.day : this.todayParts.day) !== null && _a !== void 0 ? _a : undefined,
      onIonChange: ev => {
        // TODO(FW-1823) Remove this when iOS 14 support is dropped.
        // Due to a Safari 14 issue we need to destroy
        // the scroll listener before we update state
        // and trigger a re-render.
        if (this.destroyCalendarListener) {
          this.destroyCalendarListener();
        }

        this.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
          day: ev.detail.value
        }));
        this.setActiveParts(Object.assign(Object.assign({}, activePart), {
          day: ev.detail.value
        })); // We can re-attach the scroll listener after
        // the working parts have been updated.

        this.initializeCalendarListener();
        ev.stopPropagation();
      }
    });
  }

  renderMonthPickerColumn(months) {
    if (months.length === 0) {
      return [];
    }

    const {
      workingParts
    } = this;
    const activePart = this.getDefaultPart();
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-column-internal", {
      class: "month-column",
      color: this.color,
      items: months,
      value: workingParts.month,
      onIonChange: ev => {
        // TODO(FW-1823) Remove this when iOS 14 support is dropped.
        // Due to a Safari 14 issue we need to destroy
        // the scroll listener before we update state
        // and trigger a re-render.
        if (this.destroyCalendarListener) {
          this.destroyCalendarListener();
        }

        this.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
          month: ev.detail.value
        }));
        this.setActiveParts(Object.assign(Object.assign({}, activePart), {
          month: ev.detail.value
        })); // We can re-attach the scroll listener after
        // the working parts have been updated.

        this.initializeCalendarListener();
        ev.stopPropagation();
      }
    });
  }

  renderYearPickerColumn(years) {
    if (years.length === 0) {
      return [];
    }

    const {
      workingParts
    } = this;
    const activePart = this.getDefaultPart();
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-column-internal", {
      class: "year-column",
      color: this.color,
      items: years,
      value: workingParts.year,
      onIonChange: ev => {
        // TODO(FW-1823) Remove this when iOS 14 support is dropped.
        // Due to a Safari 14 issue we need to destroy
        // the scroll listener before we update state
        // and trigger a re-render.
        if (this.destroyCalendarListener) {
          this.destroyCalendarListener();
        }

        this.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
          year: ev.detail.value
        }));
        this.setActiveParts(Object.assign(Object.assign({}, activePart), {
          year: ev.detail.value
        })); // We can re-attach the scroll listener after
        // the working parts have been updated.

        this.initializeCalendarListener();
        ev.stopPropagation();
      }
    });
  }

  renderTimePickerColumns(forcePresentation) {
    if (['date', 'month', 'month-year', 'year'].includes(forcePresentation)) {
      return [];
    }

    const valueIsDefined = this.value !== null && this.value !== undefined;
    const {
      hoursData,
      minutesData,
      dayPeriodData
    } = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.C)(this.locale, this.workingParts, this.hourCycle, valueIsDefined ? this.minParts : undefined, valueIsDefined ? this.maxParts : undefined, this.parsedHourValues, this.parsedMinuteValues);
    return [this.renderHourPickerColumn(hoursData), this.renderMinutePickerColumn(minutesData), this.renderDayPeriodPickerColumn(dayPeriodData)];
  }

  renderHourPickerColumn(hoursData) {
    const {
      workingParts
    } = this;
    if (hoursData.length === 0) return [];
    const activePart = this.getDefaultPart();
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-column-internal", {
      color: this.color,
      value: activePart.hour,
      items: hoursData,
      numericInput: true,
      onIonChange: ev => {
        this.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
          hour: ev.detail.value
        }));
        this.setActiveParts(Object.assign(Object.assign({}, activePart), {
          hour: ev.detail.value
        }));
        ev.stopPropagation();
      }
    });
  }

  renderMinutePickerColumn(minutesData) {
    const {
      workingParts
    } = this;
    if (minutesData.length === 0) return [];
    const activePart = this.getDefaultPart();
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-column-internal", {
      color: this.color,
      value: activePart.minute,
      items: minutesData,
      numericInput: true,
      onIonChange: ev => {
        this.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
          minute: ev.detail.value
        }));
        this.setActiveParts(Object.assign(Object.assign({}, activePart), {
          minute: ev.detail.value
        }));
        ev.stopPropagation();
      }
    });
  }

  renderDayPeriodPickerColumn(dayPeriodData) {
    const {
      workingParts
    } = this;

    if (dayPeriodData.length === 0) {
      return [];
    }

    const activePart = this.getDefaultPart();
    const isDayPeriodRTL = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.D)(this.locale);
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-column-internal", {
      style: isDayPeriodRTL ? {
        order: '-1'
      } : {},
      color: this.color,
      value: activePart.ampm,
      items: dayPeriodData,
      onIonChange: ev => {
        const hour = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.Q)(workingParts, ev.detail.value);
        this.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
          ampm: ev.detail.value,
          hour
        }));
        this.setActiveParts(Object.assign(Object.assign({}, activePart), {
          ampm: ev.detail.value,
          hour
        }));
        ev.stopPropagation();
      }
    });
  }

  renderWheelView(forcePresentation) {
    const {
      locale
    } = this;
    const showMonthFirst = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.B)(locale);
    const columnOrder = showMonthFirst ? 'month-first' : 'year-first';
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: {
        [`wheel-order-${columnOrder}`]: true
      }
    }, this.renderWheelPicker(forcePresentation));
  }
  /**
   * Grid Render Methods
   */


  renderCalendarHeader(mode) {
    const expandedIcon = mode === 'ios' ? _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_2__.l : _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_2__.p;
    const collapsedIcon = mode === 'ios' ? _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_2__.o : _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_2__.q;
    const prevMonthDisabled = isPrevMonthDisabled(this.workingParts, this.minParts, this.maxParts);
    const nextMonthDisabled = isNextMonthDisabled(this.workingParts, this.maxParts);
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "calendar-header"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "calendar-action-buttons"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "calendar-month-year"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-item", {
      button: true,
      detail: false,
      lines: "none",
      onClick: () => this.toggleMonthAndYearView()
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-label", null, (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.F)(this.locale, this.workingParts), ' ', (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-icon", {
      "aria-hidden": "true",
      icon: this.showMonthAndYear ? expandedIcon : collapsedIcon,
      lazy: false
    })))), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "calendar-next-prev"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-buttons", null, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-button", {
      "aria-label": "previous month",
      disabled: prevMonthDisabled,
      onClick: () => this.prevMonth()
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-icon", {
      "aria-hidden": "true",
      slot: "icon-only",
      icon: _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_2__.c,
      lazy: false,
      flipRtl: true
    })), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-button", {
      "aria-label": "next month",
      disabled: nextMonthDisabled,
      onClick: () => this.nextMonth()
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-icon", {
      "aria-hidden": "true",
      slot: "icon-only",
      icon: _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_2__.o,
      lazy: false,
      flipRtl: true
    }))))), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "calendar-days-of-week"
    }, (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.E)(this.locale, mode, this.firstDayOfWeek % 7).map(d => {
      return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: "day-of-week"
      }, d);
    })));
  }

  renderMonth(month, year) {
    const yearAllowed = this.parsedYearValues === undefined || this.parsedYearValues.includes(year);
    const monthAllowed = this.parsedMonthValues === undefined || this.parsedMonthValues.includes(month);
    const isCalMonthDisabled = !yearAllowed || !monthAllowed;
    const swipeDisabled = isMonthDisabled({
      month,
      year,
      day: null
    }, {
      // The day is not used when checking if a month is disabled.
      // Users should be able to access the min or max month, even if the
      // min/max date is out of bounds (e.g. min is set to Feb 15, Feb should not be disabled).
      minParts: Object.assign(Object.assign({}, this.minParts), {
        day: null
      }),
      maxParts: Object.assign(Object.assign({}, this.maxParts), {
        day: null
      })
    }); // The working month should never have swipe disabled.
    // Otherwise the CSS scroll snap will not work and the user
    // can free-scroll the calendar.

    const isWorkingMonth = this.workingParts.month === month && this.workingParts.year === year;
    const activePart = this.getDefaultPart();
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      "aria-hidden": !isWorkingMonth ? 'true' : null,
      class: {
        'calendar-month': true,
        // Prevents scroll snap swipe gestures for months outside of the min/max bounds
        'calendar-month-disabled': !isWorkingMonth && swipeDisabled
      }
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "calendar-month-grid"
    }, (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.G)(month, year, this.firstDayOfWeek % 7).map((dateObject, index) => {
      const {
        day,
        dayOfWeek
      } = dateObject;
      const {
        isDateEnabled,
        multiple
      } = this;
      const referenceParts = {
        month,
        day,
        year
      };
      const {
        isActive,
        isToday,
        ariaLabel,
        ariaSelected,
        disabled,
        text
      } = getCalendarDayState(this.locale, referenceParts, this.activePartsClone, this.todayParts, this.minParts, this.maxParts, this.parsedDayValues);
      let isCalDayDisabled = isCalMonthDisabled || disabled;

      if (!isCalDayDisabled && isDateEnabled !== undefined) {
        try {
          /**
           * The `isDateEnabled` implementation is try-catch wrapped
           * to prevent exceptions in the user's function from
           * interrupting the calendar rendering.
           */
          isCalDayDisabled = !isDateEnabled((0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.t)(referenceParts));
        } catch (e) {
          (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__.b)('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', e);
        }
      }

      return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
        tabindex: "-1",
        "data-day": day,
        "data-month": month,
        "data-year": year,
        "data-index": index,
        "data-day-of-week": dayOfWeek,
        disabled: isCalDayDisabled,
        class: {
          'calendar-day-padding': day === null,
          'calendar-day': true,
          'calendar-day-active': isActive,
          'calendar-day-today': isToday
        },
        "aria-selected": ariaSelected,
        "aria-label": ariaLabel,
        onClick: () => {
          if (day === null) {
            return;
          }

          this.setWorkingParts(Object.assign(Object.assign({}, this.workingParts), {
            month,
            day,
            year
          })); // multiple only needs date info, so we can wipe out other fields like time

          if (multiple) {
            this.setActiveParts({
              month,
              day,
              year
            }, isActive);
          } else {
            this.setActiveParts(Object.assign(Object.assign({}, activePart), {
              month,
              day,
              year
            }));
          }
        }
      }, text);
    })));
  }

  renderCalendarBody() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "calendar-body ion-focusable",
      ref: el => this.calendarBodyRef = el,
      tabindex: "0"
    }, (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.H)(this.workingParts).map(({
      month,
      year
    }) => {
      return this.renderMonth(month, year);
    }));
  }

  renderCalendar(mode) {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "datetime-calendar",
      key: "datetime-calendar"
    }, this.renderCalendarHeader(mode), this.renderCalendarBody());
  }

  renderTimeLabel() {
    const hasSlottedTimeLabel = this.el.querySelector('[slot="time-label"]') !== null;

    if (!hasSlottedTimeLabel && !this.showDefaultTimeLabel) {
      return;
    }

    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "time-label"
    }, "Time");
  }

  renderTimeOverlay() {
    var _this4 = this;

    const use24Hour = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.I)(this.locale, this.hourCycle);
    const activePart = this.getDefaultPart();
    return [(0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "time-header"
    }, this.renderTimeLabel()), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
      class: {
        'time-body': true,
        'time-body-active': this.isTimePopoverOpen
      },
      "aria-expanded": "false",
      "aria-haspopup": "true",
      onClick: function () {
        var _ref = (0,_Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (ev) {
          const {
            popoverRef
          } = _this4;

          if (popoverRef) {
            _this4.isTimePopoverOpen = true;
            popoverRef.present(new CustomEvent('ionShadowTarget', {
              detail: {
                ionShadowTarget: ev.target
              }
            }));
            yield popoverRef.onWillDismiss();
            _this4.isTimePopoverOpen = false;
          }
        });

        return function onClick(_x) {
          return _ref.apply(this, arguments);
        };
      }()
    }, (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.J)(this.locale, activePart, use24Hour)), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-popover", {
      alignment: "center",
      translucent: true,
      overlayIndex: 1,
      arrow: false,
      onWillPresent: ev => {
        /**
         * Intersection Observers do not consistently fire between Blink and Webkit
         * when toggling the visibility of the popover and trying to scroll the picker
         * column to the correct time value.
         *
         * This will correctly scroll the element position to the correct time value,
         * before the popover is fully presented.
         */
        const cols = ev.target.querySelectorAll('ion-picker-column-internal'); // TODO (FW-615): Potentially remove this when intersection observers are fixed in picker column

        cols.forEach(col => col.scrollActiveItemIntoView());
      },
      style: {
        '--offset-y': '-10px',
        '--min-width': 'fit-content'
      },
      // Allow native browser keyboard events to support up/down/home/end key
      // navigation within the time picker.
      keyboardEvents: true,
      ref: el => this.popoverRef = el
    }, this.renderWheelPicker('time'))];
  }

  renderCalendarViewHeader() {
    const hasSlottedTitle = this.el.querySelector('[slot="title"]') !== null;

    if (!hasSlottedTitle && !this.showDefaultTitle) {
      return;
    }

    const {
      activeParts,
      multiple,
      titleSelectedDatesFormatter
    } = this;
    const isArray = Array.isArray(activeParts);
    let headerText;

    if (multiple && isArray && activeParts.length !== 1) {
      headerText = `${activeParts.length} days`; // default/fallback for multiple selection

      if (titleSelectedDatesFormatter !== undefined) {
        try {
          headerText = titleSelectedDatesFormatter((0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.t)(activeParts));
        } catch (e) {
          (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__.b)('Exception in provided `titleSelectedDatesFormatter`: ', e);
        }
      }
    } else {
      // for exactly 1 day selected (multiple set or not), show a formatted version of that
      headerText = (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.K)(this.locale, this.getDefaultPart());
    }

    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "datetime-header"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "datetime-title"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "title"
    }, "Select Date")), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "datetime-selected-date"
    }, headerText));
  }
  /**
   * Render time picker inside of datetime.
   * Do not pass color prop to segment on
   * iOS mode. MD segment has been customized and
   * should take on the color prop, but iOS
   * should just be the default segment.
   */


  renderTime() {
    const {
      presentation
    } = this;
    const timeOnlyPresentation = presentation === 'time';
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "datetime-time"
    }, timeOnlyPresentation ? this.renderWheelPicker() : this.renderTimeOverlay());
  }
  /**
   * Renders the month/year picker that is
   * displayed on the calendar grid.
   * The .datetime-year class has additional
   * styles that let us show/hide the
   * picker when the user clicks on the
   * toggle in the calendar header.
   */


  renderCalendarViewMonthYearPicker() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "datetime-year"
    }, this.renderWheelView('month-year'));
  }
  /**
   * Render entry point
   * All presentation types are rendered from here.
   */


  renderDatetime(mode) {
    const {
      presentation,
      preferWheel
    } = this;
    /**
     * Certain presentation types have separate grid and wheel displays.
     * If preferWheel is true then we should show a wheel picker instead.
     */

    const hasWheelVariant = presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';

    if (preferWheel && hasWheelVariant) {
      return [this.renderWheelView(), this.renderFooter()];
    }

    switch (presentation) {
      case 'date-time':
        return [this.renderCalendarViewHeader(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderTime(), this.renderFooter()];

      case 'time-date':
        return [this.renderCalendarViewHeader(), this.renderTime(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderFooter()];

      case 'time':
        return [this.renderTime(), this.renderFooter()];

      case 'month':
      case 'month-year':
      case 'year':
        return [this.renderWheelView(), this.renderFooter()];

      default:
        return [this.renderCalendarViewHeader(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderFooter()];
    }
  }

  render() {
    const {
      name,
      value,
      disabled,
      el,
      color,
      isPresented,
      readonly,
      showMonthAndYear,
      preferWheel,
      presentation,
      size
    } = this;
    const mode = (0,_ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_3__.b)(this);
    const isMonthAndYearPresentation = presentation === 'year' || presentation === 'month' || presentation === 'month-year';
    const shouldShowMonthAndYear = showMonthAndYear || isMonthAndYearPresentation;
    const monthYearPickerOpen = showMonthAndYear && !isMonthAndYearPresentation;
    const hasDatePresentation = presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';
    const hasWheelVariant = hasDatePresentation && preferWheel;
    const hasGrid = hasDatePresentation && !preferWheel;
    (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__.e)(true, el, name, (0,_parse_71f28cd7_js__WEBPACK_IMPORTED_MODULE_9__.L)(value), disabled);
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      "aria-disabled": disabled ? 'true' : null,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      class: Object.assign({}, (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.c)(color, {
        [mode]: true,
        ['datetime-presented']: isPresented,
        ['datetime-readonly']: readonly,
        ['datetime-disabled']: disabled,
        'show-month-and-year': shouldShowMonthAndYear,
        'month-year-picker-open': monthYearPickerOpen,
        [`datetime-presentation-${presentation}`]: true,
        [`datetime-size-${size}`]: true,
        [`datetime-prefer-wheel`]: hasWheelVariant,
        [`datetime-grid`]: hasGrid
      }))
    }, this.renderDatetime(mode));
  }

  get el() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

  static get watchers() {
    return {
      "disabled": ["disabledChanged"],
      "min": ["minChanged"],
      "max": ["maxChanged"],
      "yearValues": ["yearValuesChanged"],
      "monthValues": ["monthValuesChanged"],
      "dayValues": ["dayValuesChanged"],
      "hourValues": ["hourValuesChanged"],
      "minuteValues": ["minuteValuesChanged"],
      "activeParts": ["activePartsChanged"],
      "value": ["valueChanged"]
    };
  }

};
let datetimeIds = 0;
Datetime.style = {
  ios: datetimeIosCss,
  md: datetimeMdCss
};
/**
 * iOS Picker Enter Animation
 */

const iosEnterAnimation = baseEl => {
  const baseAnimation = (0,_animation_2c50d24d_js__WEBPACK_IMPORTED_MODULE_11__.c)();
  const backdropAnimation = (0,_animation_2c50d24d_js__WEBPACK_IMPORTED_MODULE_11__.c)();
  const wrapperAnimation = (0,_animation_2c50d24d_js__WEBPACK_IMPORTED_MODULE_11__.c)();
  backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({
    'pointer-events': 'none'
  }).afterClearStyles(['pointer-events']);
  wrapperAnimation.addElement(baseEl.querySelector('.picker-wrapper')).fromTo('transform', 'translateY(100%)', 'translateY(0%)');
  return baseAnimation.addElement(baseEl).easing('cubic-bezier(.36,.66,.04,1)').duration(400).addAnimation([backdropAnimation, wrapperAnimation]);
};
/**
 * iOS Picker Leave Animation
 */


const iosLeaveAnimation = baseEl => {
  const baseAnimation = (0,_animation_2c50d24d_js__WEBPACK_IMPORTED_MODULE_11__.c)();
  const backdropAnimation = (0,_animation_2c50d24d_js__WEBPACK_IMPORTED_MODULE_11__.c)();
  const wrapperAnimation = (0,_animation_2c50d24d_js__WEBPACK_IMPORTED_MODULE_11__.c)();
  backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 'var(--backdrop-opacity)', 0.01);
  wrapperAnimation.addElement(baseEl.querySelector('.picker-wrapper')).fromTo('transform', 'translateY(0%)', 'translateY(100%)');
  return baseAnimation.addElement(baseEl).easing('cubic-bezier(.36,.66,.04,1)').duration(400).addAnimation([backdropAnimation, wrapperAnimation]);
};

const pickerIosCss = ".sc-ion-picker-ios-h{--border-radius:0;--border-style:solid;--min-width:auto;--width:100%;--max-width:500px;--min-height:auto;--max-height:auto;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;left:0;top:0;display:block;position:absolute;width:100%;height:100%;outline:none;font-family:var(--ion-font-family, inherit);contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:1001}[dir=rtl].sc-ion-picker-ios-h,[dir=rtl] .sc-ion-picker-ios-h{left:unset;right:unset;right:0}.overlay-hidden.sc-ion-picker-ios-h{display:none}.picker-wrapper.sc-ion-picker-ios{border-radius:var(--border-radius);left:0;right:0;bottom:0;margin-left:auto;margin-right:auto;margin-top:auto;margin-bottom:auto;-webkit-transform:translate3d(0,  100%,  0);transform:translate3d(0,  100%,  0);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);contain:strict;overflow:hidden;z-index:10}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.picker-wrapper.sc-ion-picker-ios{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}.picker-toolbar.sc-ion-picker-ios{width:100%;background:transparent;contain:strict;z-index:1}.picker-button.sc-ion-picker-ios{border:0;font-family:inherit}.picker-button.sc-ion-picker-ios:active,.picker-button.sc-ion-picker-ios:focus{outline:none}.picker-columns.sc-ion-picker-ios{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;margin-bottom:var(--ion-safe-area-bottom, 0);contain:strict;direction:ltr;overflow:hidden}.picker-above-highlight.sc-ion-picker-ios,.picker-below-highlight.sc-ion-picker-ios{display:none;pointer-events:none}.sc-ion-picker-ios-h{--background:var(--ion-background-color, #fff);--border-width:1px 0 0;--border-color:var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));--height:260px;--backdrop-opacity:var(--ion-backdrop-opacity, 0.26);color:var(--ion-item-color, var(--ion-text-color, #000))}.picker-toolbar.sc-ion-picker-ios{display:-ms-flexbox;display:flex;height:44px;border-bottom:0.55px solid var(--border-color)}.picker-toolbar-button.sc-ion-picker-ios{-ms-flex:1;flex:1;text-align:end}.picker-toolbar-button.sc-ion-picker-ios:last-child .picker-button.sc-ion-picker-ios{font-weight:600}.picker-toolbar-button.sc-ion-picker-ios:first-child{font-weight:normal;text-align:start}.picker-button.sc-ion-picker-ios,.picker-button.ion-activated.sc-ion-picker-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:1em;padding-right:1em;padding-top:0;padding-bottom:0;height:44px;background:transparent;color:var(--ion-color-primary, #3880ff);font-size:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.picker-button.sc-ion-picker-ios,.picker-button.ion-activated.sc-ion-picker-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:1em;padding-inline-start:1em;-webkit-padding-end:1em;padding-inline-end:1em}}.picker-columns.sc-ion-picker-ios{height:215px;-webkit-perspective:1000px;perspective:1000px}.picker-above-highlight.sc-ion-picker-ios{left:0;top:0;-webkit-transform:translate3d(0,  0,  90px);transform:translate3d(0,  0,  90px);display:block;position:absolute;width:100%;height:81px;border-bottom:1px solid var(--border-color);background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%);z-index:10}[dir=rtl].sc-ion-picker-ios .picker-above-highlight.sc-ion-picker-ios,[dir=rtl].sc-ion-picker-ios-h .picker-above-highlight.sc-ion-picker-ios,[dir=rtl] .sc-ion-picker-ios-h .picker-above-highlight.sc-ion-picker-ios{left:unset;right:unset;right:0}.picker-below-highlight.sc-ion-picker-ios{left:0;top:115px;-webkit-transform:translate3d(0,  0,  90px);transform:translate3d(0,  0,  90px);display:block;position:absolute;width:100%;height:119px;border-top:1px solid var(--border-color);background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%);z-index:11}[dir=rtl].sc-ion-picker-ios .picker-below-highlight.sc-ion-picker-ios,[dir=rtl].sc-ion-picker-ios-h .picker-below-highlight.sc-ion-picker-ios,[dir=rtl] .sc-ion-picker-ios-h .picker-below-highlight.sc-ion-picker-ios{left:unset;right:unset;right:0}";
const pickerMdCss = ".sc-ion-picker-md-h{--border-radius:0;--border-style:solid;--min-width:auto;--width:100%;--max-width:500px;--min-height:auto;--max-height:auto;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;left:0;top:0;display:block;position:absolute;width:100%;height:100%;outline:none;font-family:var(--ion-font-family, inherit);contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:1001}[dir=rtl].sc-ion-picker-md-h,[dir=rtl] .sc-ion-picker-md-h{left:unset;right:unset;right:0}.overlay-hidden.sc-ion-picker-md-h{display:none}.picker-wrapper.sc-ion-picker-md{border-radius:var(--border-radius);left:0;right:0;bottom:0;margin-left:auto;margin-right:auto;margin-top:auto;margin-bottom:auto;-webkit-transform:translate3d(0,  100%,  0);transform:translate3d(0,  100%,  0);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);contain:strict;overflow:hidden;z-index:10}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.picker-wrapper.sc-ion-picker-md{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}.picker-toolbar.sc-ion-picker-md{width:100%;background:transparent;contain:strict;z-index:1}.picker-button.sc-ion-picker-md{border:0;font-family:inherit}.picker-button.sc-ion-picker-md:active,.picker-button.sc-ion-picker-md:focus{outline:none}.picker-columns.sc-ion-picker-md{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;margin-bottom:var(--ion-safe-area-bottom, 0);contain:strict;direction:ltr;overflow:hidden}.picker-above-highlight.sc-ion-picker-md,.picker-below-highlight.sc-ion-picker-md{display:none;pointer-events:none}.sc-ion-picker-md-h{--background:var(--ion-background-color, #fff);--border-width:0.55px 0 0;--border-color:var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));--height:260px;--backdrop-opacity:var(--ion-backdrop-opacity, 0.26);color:var(--ion-item-color, var(--ion-text-color, #000))}.picker-toolbar.sc-ion-picker-md{display:-ms-flexbox;display:flex;-ms-flex-pack:end;justify-content:flex-end;height:44px}.picker-button.sc-ion-picker-md,.picker-button.ion-activated.sc-ion-picker-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:1.1em;padding-right:1.1em;padding-top:0;padding-bottom:0;height:44px;background:transparent;color:var(--ion-color-primary, #3880ff);font-size:14px;font-weight:500;text-transform:uppercase;-webkit-box-shadow:none;box-shadow:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.picker-button.sc-ion-picker-md,.picker-button.ion-activated.sc-ion-picker-md{padding-left:unset;padding-right:unset;-webkit-padding-start:1.1em;padding-inline-start:1.1em;-webkit-padding-end:1.1em;padding-inline-end:1.1em}}.picker-columns.sc-ion-picker-md{height:216px;-webkit-perspective:1800px;perspective:1800px}.picker-above-highlight.sc-ion-picker-md{left:0;top:0;-webkit-transform:translate3d(0,  0,  90px);transform:translate3d(0,  0,  90px);position:absolute;width:100%;height:81px;border-bottom:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--ion-background-color, #fff)), to(rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8)));background:linear-gradient(to bottom, var(--ion-background-color, #fff) 20%, rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8) 100%);z-index:10}[dir=rtl].sc-ion-picker-md .picker-above-highlight.sc-ion-picker-md,[dir=rtl].sc-ion-picker-md-h .picker-above-highlight.sc-ion-picker-md,[dir=rtl] .sc-ion-picker-md-h .picker-above-highlight.sc-ion-picker-md{left:unset;right:unset;right:0}.picker-below-highlight.sc-ion-picker-md{left:0;top:115px;-webkit-transform:translate3d(0,  0,  90px);transform:translate3d(0,  0,  90px);position:absolute;width:100%;height:119px;border-top:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--ion-background-color, #fff)), to(rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8)));background:linear-gradient(to top, var(--ion-background-color, #fff) 30%, rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8) 100%);z-index:11}[dir=rtl].sc-ion-picker-md .picker-below-highlight.sc-ion-picker-md,[dir=rtl].sc-ion-picker-md-h .picker-below-highlight.sc-ion-picker-md,[dir=rtl] .sc-ion-picker-md-h .picker-below-highlight.sc-ion-picker-md{left:unset;right:unset;right:0}";
const Picker = class {
  constructor(hostRef) {
    (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.didPresent = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPickerDidPresent", 7);
    this.willPresent = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPickerWillPresent", 7);
    this.willDismiss = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPickerWillDismiss", 7);
    this.didDismiss = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPickerDidDismiss", 7);
    this.presented = false;
    /**
     * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
     */

    this.keyboardClose = true;
    /**
     * Array of buttons to be displayed at the top of the picker.
     */

    this.buttons = [];
    /**
     * Array of columns to be displayed in the picker.
     */

    this.columns = [];
    /**
     * Number of milliseconds to wait before dismissing the picker.
     */

    this.duration = 0;
    /**
     * If `true`, a backdrop will be displayed behind the picker.
     */

    this.showBackdrop = true;
    /**
     * If `true`, the picker will be dismissed when the backdrop is clicked.
     */

    this.backdropDismiss = true;
    /**
     * If `true`, the picker will animate.
     */

    this.animated = true;

    this.onBackdropTap = () => {
      this.dismiss(undefined, _overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.B);
    };

    this.dispatchCancelHandler = ev => {
      const role = ev.detail.role;

      if ((0,_overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.i)(role)) {
        const cancelButton = this.buttons.find(b => b.role === 'cancel');
        this.callButtonHandler(cancelButton);
      }
    };
  }

  connectedCallback() {
    (0,_overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.e)(this.el);
  }
  /**
   * Present the picker overlay after it has been created.
   */


  present() {
    var _this5 = this;

    return (0,_Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield (0,_overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.d)(_this5, 'pickerEnter', iosEnterAnimation, iosEnterAnimation, undefined);

      if (_this5.duration > 0) {
        _this5.durationTimeout = setTimeout(() => _this5.dismiss(), _this5.duration);
      }
    })();
  }
  /**
   * Dismiss the picker overlay after it has been presented.
   *
   * @param data Any data to emit in the dismiss events.
   * @param role The role of the element that is dismissing the picker.
   * This can be useful in a button handler for determining which button was
   * clicked to dismiss the picker.
   * Some examples include: ``"cancel"`, `"destructive"`, "selected"`, and `"backdrop"`.
   */


  dismiss(data, role) {
    if (this.durationTimeout) {
      clearTimeout(this.durationTimeout);
    }

    return (0,_overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.f)(this, data, role, 'pickerLeave', iosLeaveAnimation, iosLeaveAnimation);
  }
  /**
   * Returns a promise that resolves when the picker did dismiss.
   */


  onDidDismiss() {
    return (0,_overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.g)(this.el, 'ionPickerDidDismiss');
  }
  /**
   * Returns a promise that resolves when the picker will dismiss.
   */


  onWillDismiss() {
    return (0,_overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.g)(this.el, 'ionPickerWillDismiss');
  }
  /**
   * Get the column that matches the specified name.
   *
   * @param name The name of the column.
   */


  getColumn(name) {
    return Promise.resolve(this.columns.find(column => column.name === name));
  }

  buttonClick(button) {
    var _this6 = this;

    return (0,_Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const role = button.role;

      if ((0,_overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.i)(role)) {
        return _this6.dismiss(undefined, role);
      }

      const shouldDismiss = yield _this6.callButtonHandler(button);

      if (shouldDismiss) {
        return _this6.dismiss(_this6.getSelected(), button.role);
      }

      return Promise.resolve();
    })();
  }

  callButtonHandler(button) {
    var _this7 = this;

    return (0,_Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (button) {
        // a handler has been provided, execute it
        // pass the handler the values from the inputs
        const rtn = yield (0,_overlays_87c7c7cb_js__WEBPACK_IMPORTED_MODULE_10__.s)(button.handler, _this7.getSelected());

        if (rtn === false) {
          // if the return value of the handler is false then do not dismiss
          return false;
        }
      }

      return true;
    })();
  }

  getSelected() {
    const selected = {};
    this.columns.forEach((col, index) => {
      const selectedColumn = col.selectedIndex !== undefined ? col.options[col.selectedIndex] : undefined;
      selected[col.name] = {
        text: selectedColumn ? selectedColumn.text : undefined,
        value: selectedColumn ? selectedColumn.value : undefined,
        columnIndex: index
      };
    });
    return selected;
  }

  render() {
    const {
      htmlAttributes
    } = this;
    const mode = (0,_ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_3__.b)(this);
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.H, Object.assign({
      "aria-modal": "true",
      tabindex: "-1"
    }, htmlAttributes, {
      style: {
        zIndex: `${20000 + this.overlayIndex}`
      },
      class: Object.assign({
        [mode]: true,
        // Used internally for styling
        [`picker-${mode}`]: true,
        'overlay-hidden': true
      }, (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.cssClass)),
      onIonBackdropTap: this.onBackdropTap,
      onIonPickerWillDismiss: this.dispatchCancelHandler
    }), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-backdrop", {
      visible: this.showBackdrop,
      tappable: this.backdropDismiss
    }), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      tabindex: "0"
    }), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "picker-wrapper ion-overlay-wrapper",
      role: "dialog"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "picker-toolbar"
    }, this.buttons.map(b => (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: buttonWrapperClass(b)
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
      type: "button",
      onClick: () => this.buttonClick(b),
      class: buttonClass(b)
    }, b.text)))), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "picker-columns"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "picker-above-highlight"
    }), this.presented && this.columns.map(c => (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-picker-column", {
      col: c
    })), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "picker-below-highlight"
    }))), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      tabindex: "0"
    }));
  }

  get el() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

};

const buttonWrapperClass = button => {
  return {
    [`picker-toolbar-${button.role}`]: button.role !== undefined,
    'picker-toolbar-button': true
  };
};

const buttonClass = button => {
  return Object.assign({
    'picker-button': true,
    'ion-activatable': true
  }, (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.g)(button.cssClass));
};

Picker.style = {
  ios: pickerIosCss,
  md: pickerMdCss
};
const pickerColumnIosCss = ".picker-col{display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-pack:center;justify-content:center;height:100%;-webkit-box-sizing:content-box;box-sizing:content-box;contain:content}.picker-opts{position:relative;-ms-flex:1;flex:1;max-width:100%}.picker-opt{left:0;top:0;display:block;position:absolute;width:100%;border:0;text-align:center;text-overflow:ellipsis;white-space:nowrap;contain:strict;overflow:hidden;will-change:transform}[dir=rtl] .picker-opt,:host-context([dir=rtl]) .picker-opt{left:unset;right:unset;right:0}.picker-opt.picker-opt-disabled{pointer-events:none}.picker-opt-disabled{opacity:0}.picker-opts-left{-ms-flex-pack:start;justify-content:flex-start}.picker-opts-right{-ms-flex-pack:end;justify-content:flex-end}.picker-opt:active,.picker-opt:focus{outline:none}.picker-prefix{position:relative;-ms-flex:1;flex:1;text-align:end;white-space:nowrap}.picker-suffix{position:relative;-ms-flex:1;flex:1;text-align:start;white-space:nowrap}.picker-col{padding-left:4px;padding-right:4px;padding-top:0;padding-bottom:0;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.picker-col{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px}}.picker-prefix,.picker-suffix,.picker-opts{top:77px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;color:inherit;font-size:20px;line-height:42px;pointer-events:none}.picker-opt{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-transform-origin:center center;transform-origin:center center;height:46px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;background:transparent;color:inherit;font-size:20px;line-height:42px;-webkit-backface-visibility:hidden;backface-visibility:hidden;pointer-events:auto}[dir=rtl] .picker-opt,:host-context([dir=rtl]) .picker-opt{-webkit-transform-origin:calc(100% - center) center;transform-origin:calc(100% - center) center}";
const pickerColumnMdCss = ".picker-col{display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-pack:center;justify-content:center;height:100%;-webkit-box-sizing:content-box;box-sizing:content-box;contain:content}.picker-opts{position:relative;-ms-flex:1;flex:1;max-width:100%}.picker-opt{left:0;top:0;display:block;position:absolute;width:100%;border:0;text-align:center;text-overflow:ellipsis;white-space:nowrap;contain:strict;overflow:hidden;will-change:transform}[dir=rtl] .picker-opt,:host-context([dir=rtl]) .picker-opt{left:unset;right:unset;right:0}.picker-opt.picker-opt-disabled{pointer-events:none}.picker-opt-disabled{opacity:0}.picker-opts-left{-ms-flex-pack:start;justify-content:flex-start}.picker-opts-right{-ms-flex-pack:end;justify-content:flex-end}.picker-opt:active,.picker-opt:focus{outline:none}.picker-prefix{position:relative;-ms-flex:1;flex:1;text-align:end;white-space:nowrap}.picker-suffix{position:relative;-ms-flex:1;flex:1;text-align:start;white-space:nowrap}.picker-col{padding-left:8px;padding-right:8px;padding-top:0;padding-bottom:0;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.picker-col{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}.picker-prefix,.picker-suffix,.picker-opts{top:77px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;color:inherit;font-size:22px;line-height:42px;pointer-events:none}.picker-opt{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;height:43px;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;background:transparent;color:inherit;font-size:22px;line-height:42px;-webkit-backface-visibility:hidden;backface-visibility:hidden;pointer-events:auto}.picker-prefix,.picker-suffix,.picker-opt.picker-opt-selected{color:var(--ion-color-primary, #3880ff)}";
const PickerColumnCmp = class {
  constructor(hostRef) {
    (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionPickerColChange = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPickerColChange", 7);
    this.optHeight = 0;
    this.rotateFactor = 0;
    this.scaleFactor = 1;
    this.velocity = 0;
    this.y = 0;
    this.noAnimate = true;
  }

  colChanged() {
    this.refresh();
  }

  connectedCallback() {
    var _this8 = this;

    return (0,_Users_oscar_sgc_Desktop_Sample_App_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let pickerRotateFactor = 0;
      let pickerScaleFactor = 0.81;
      const mode = (0,_ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_3__.b)(_this8);

      if (mode === 'ios') {
        pickerRotateFactor = -0.46;
        pickerScaleFactor = 1;
      }

      _this8.rotateFactor = pickerRotateFactor;
      _this8.scaleFactor = pickerScaleFactor;
      _this8.gesture = (yield Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./index-f8d8aa5a.js */ 9286))).createGesture({
        el: _this8.el,
        gestureName: 'picker-swipe',
        gesturePriority: 100,
        threshold: 0,
        passive: false,
        onStart: ev => _this8.onStart(ev),
        onMove: ev => _this8.onMove(ev),
        onEnd: ev => _this8.onEnd(ev)
      });

      _this8.gesture.enable();

      _this8.tmrId = setTimeout(() => {
        _this8.noAnimate = false;

        _this8.refresh(true);
      }, 250);
    })();
  }

  componentDidLoad() {
    const colEl = this.optsEl;

    if (colEl) {
      // DOM READ
      // We perfom a DOM read over a rendered item, this needs to happen after the first render
      this.optHeight = colEl.firstElementChild ? colEl.firstElementChild.clientHeight : 0;
    }

    this.refresh();
  }

  disconnectedCallback() {
    cancelAnimationFrame(this.rafId);
    clearTimeout(this.tmrId);

    if (this.gesture) {
      this.gesture.destroy();
      this.gesture = undefined;
    }
  }

  emitColChange() {
    this.ionPickerColChange.emit(this.col);
  }

  setSelected(selectedIndex, duration) {
    // if there is a selected index, then figure out it's y position
    // if there isn't a selected index, then just use the top y position
    const y = selectedIndex > -1 ? -(selectedIndex * this.optHeight) : 0;
    this.velocity = 0; // set what y position we're at

    cancelAnimationFrame(this.rafId);
    this.update(y, duration, true);
    this.emitColChange();
  }

  update(y, duration, saveY) {
    if (!this.optsEl) {
      return;
    } // ensure we've got a good round number :)


    let translateY = 0;
    let translateZ = 0;
    const {
      col,
      rotateFactor
    } = this;
    const selectedIndex = col.selectedIndex = this.indexForY(-y);
    const durationStr = duration === 0 ? '' : duration + 'ms';
    const scaleStr = `scale(${this.scaleFactor})`;
    const children = this.optsEl.children;

    for (let i = 0; i < children.length; i++) {
      const button = children[i];
      const opt = col.options[i];
      const optOffset = i * this.optHeight + y;
      let transform = '';

      if (rotateFactor !== 0) {
        const rotateX = optOffset * rotateFactor;

        if (Math.abs(rotateX) <= 90) {
          translateY = 0;
          translateZ = 90;
          transform = `rotateX(${rotateX}deg) `;
        } else {
          translateY = -9999;
        }
      } else {
        translateZ = 0;
        translateY = optOffset;
      }

      const selected = selectedIndex === i;
      transform += `translate3d(0px,${translateY}px,${translateZ}px) `;

      if (this.scaleFactor !== 1 && !selected) {
        transform += scaleStr;
      } // Update transition duration


      if (this.noAnimate) {
        opt.duration = 0;
        button.style.transitionDuration = '';
      } else if (duration !== opt.duration) {
        opt.duration = duration;
        button.style.transitionDuration = durationStr;
      } // Update transform


      if (transform !== opt.transform) {
        opt.transform = transform;
      }

      button.style.transform = transform; // Update selected item

      if (selected !== opt.selected) {
        opt.selected = selected;

        if (selected) {
          button.classList.add(PICKER_OPT_SELECTED);
        } else {
          button.classList.remove(PICKER_OPT_SELECTED);
        }
      }
    }

    this.col.prevSelected = selectedIndex;

    if (saveY) {
      this.y = y;
    }

    if (this.lastIndex !== selectedIndex) {
      // have not set a last index yet
      (0,_haptic_683b3b3c_js__WEBPACK_IMPORTED_MODULE_12__.b)();
      this.lastIndex = selectedIndex;
    }
  }

  decelerate() {
    if (this.velocity !== 0) {
      // still decelerating
      this.velocity *= DECELERATION_FRICTION; // do not let it go slower than a velocity of 1

      this.velocity = this.velocity > 0 ? Math.max(this.velocity, 1) : Math.min(this.velocity, -1);
      let y = this.y + this.velocity;

      if (y > this.minY) {
        // whoops, it's trying to scroll up farther than the options we have!
        y = this.minY;
        this.velocity = 0;
      } else if (y < this.maxY) {
        // gahh, it's trying to scroll down farther than we can!
        y = this.maxY;
        this.velocity = 0;
      }

      this.update(y, 0, true);
      const notLockedIn = Math.round(y) % this.optHeight !== 0 || Math.abs(this.velocity) > 1;

      if (notLockedIn) {
        // isn't locked in yet, keep decelerating until it is
        this.rafId = requestAnimationFrame(() => this.decelerate());
      } else {
        this.velocity = 0;
        this.emitColChange();
        (0,_haptic_683b3b3c_js__WEBPACK_IMPORTED_MODULE_12__.h)();
      }
    } else if (this.y % this.optHeight !== 0) {
      // needs to still get locked into a position so options line up
      const currentPos = Math.abs(this.y % this.optHeight); // create a velocity in the direction it needs to scroll

      this.velocity = currentPos > this.optHeight / 2 ? 1 : -1;
      this.decelerate();
    }
  }

  indexForY(y) {
    return Math.min(Math.max(Math.abs(Math.round(y / this.optHeight)), 0), this.col.options.length - 1);
  } // TODO should this check disabled?


  onStart(detail) {
    // We have to prevent default in order to block scrolling under the picker
    // but we DO NOT have to stop propagation, since we still want
    // some "click" events to capture
    if (detail.event.cancelable) {
      detail.event.preventDefault();
    }

    detail.event.stopPropagation();
    (0,_haptic_683b3b3c_js__WEBPACK_IMPORTED_MODULE_12__.a)(); // reset everything

    cancelAnimationFrame(this.rafId);
    const options = this.col.options;
    let minY = options.length - 1;
    let maxY = 0;

    for (let i = 0; i < options.length; i++) {
      if (!options[i].disabled) {
        minY = Math.min(minY, i);
        maxY = Math.max(maxY, i);
      }
    }

    this.minY = -(minY * this.optHeight);
    this.maxY = -(maxY * this.optHeight);
  }

  onMove(detail) {
    if (detail.event.cancelable) {
      detail.event.preventDefault();
    }

    detail.event.stopPropagation(); // update the scroll position relative to pointer start position

    let y = this.y + detail.deltaY;

    if (y > this.minY) {
      // scrolling up higher than scroll area
      y = Math.pow(y, 0.8);
      this.bounceFrom = y;
    } else if (y < this.maxY) {
      // scrolling down below scroll area
      y += Math.pow(this.maxY - y, 0.9);
      this.bounceFrom = y;
    } else {
      this.bounceFrom = 0;
    }

    this.update(y, 0, false);
  }

  onEnd(detail) {
    if (this.bounceFrom > 0) {
      // bounce back up
      this.update(this.minY, 100, true);
      this.emitColChange();
      return;
    } else if (this.bounceFrom < 0) {
      // bounce back down
      this.update(this.maxY, 100, true);
      this.emitColChange();
      return;
    }

    this.velocity = (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__.l)(-MAX_PICKER_SPEED, detail.velocityY * 23, MAX_PICKER_SPEED);

    if (this.velocity === 0 && detail.deltaY === 0) {
      const opt = detail.event.target.closest('.picker-opt');

      if (opt === null || opt === void 0 ? void 0 : opt.hasAttribute('opt-index')) {
        this.setSelected(parseInt(opt.getAttribute('opt-index'), 10), TRANSITION_DURATION);
      }
    } else {
      this.y += detail.deltaY;

      if (Math.abs(detail.velocityY) < 0.05) {
        const isScrollingUp = detail.deltaY > 0;
        const optHeightFraction = Math.abs(this.y) % this.optHeight / this.optHeight;

        if (isScrollingUp && optHeightFraction > 0.5) {
          this.velocity = Math.abs(this.velocity) * -1;
        } else if (!isScrollingUp && optHeightFraction <= 0.5) {
          this.velocity = Math.abs(this.velocity);
        }
      }

      this.decelerate();
    }
  }

  refresh(forceRefresh) {
    var _a;

    let min = this.col.options.length - 1;
    let max = 0;
    const options = this.col.options;

    for (let i = 0; i < options.length; i++) {
      if (!options[i].disabled) {
        min = Math.min(min, i);
        max = Math.max(max, i);
      }
    }
    /**
     * Only update selected value if column has a
     * velocity of 0. If it does not, then the
     * column is animating might land on
     * a value different than the value at
     * selectedIndex
     */


    if (this.velocity !== 0) {
      return;
    }

    const selectedIndex = (0,_helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__.l)(min, (_a = this.col.selectedIndex) !== null && _a !== void 0 ? _a : 0, max);

    if (this.col.prevSelected !== selectedIndex || forceRefresh) {
      const y = selectedIndex * this.optHeight * -1;
      this.velocity = 0;
      this.update(y, TRANSITION_DURATION, true);
    }
  }

  render() {
    const col = this.col;
    const Button = 'button';
    const mode = (0,_ionic_global_c95cf239_js__WEBPACK_IMPORTED_MODULE_3__.b)(this);
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [mode]: true,
        'picker-col': true,
        'picker-opts-left': this.col.align === 'left',
        'picker-opts-right': this.col.align === 'right'
      },
      style: {
        'max-width': this.col.columnWidth
      }
    }, col.prefix && (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "picker-prefix",
      style: {
        width: col.prefixWidth
      }
    }, col.prefix), (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "picker-opts",
      style: {
        maxWidth: col.optionsWidth
      },
      ref: el => this.optsEl = el
    }, col.options.map((o, index) => (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(Button, {
      type: "button",
      class: {
        'picker-opt': true,
        'picker-opt-disabled': !!o.disabled
      },
      "opt-index": index
    }, o.text))), col.suffix && (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "picker-suffix",
      style: {
        width: col.suffixWidth
      }
    }, col.suffix));
  }

  get el() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

  static get watchers() {
    return {
      "col": ["colChanged"]
    };
  }

};
const PICKER_OPT_SELECTED = 'picker-opt-selected';
const DECELERATION_FRICTION = 0.97;
const MAX_PICKER_SPEED = 90;
const TRANSITION_DURATION = 150;
PickerColumnCmp.style = {
  ios: pickerColumnIosCss,
  md: pickerColumnMdCss
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLWRhdGV0aW1lXzNfZW50cnlfanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1zSCxjQUFjLEdBQUcsQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEVBQW9CQyxRQUFwQixLQUFpQztFQUN0RCxJQUFJRCxRQUFRLElBQUlBLFFBQVEsQ0FBQ0UsSUFBVCxHQUFnQkgsT0FBaEMsRUFBeUM7SUFDdkMsT0FBTyxJQUFQO0VBQ0Q7O0VBQ0QsSUFBSUUsUUFBUSxJQUFJQSxRQUFRLENBQUNDLElBQVQsR0FBZ0JILE9BQWhDLEVBQXlDO0lBQ3ZDLE9BQU8sSUFBUDtFQUNEOztFQUNELE9BQU8sS0FBUDtBQUNELENBUkQ7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNSSxhQUFhLEdBQUcsQ0FBQ0MsUUFBRCxFQUFXSixRQUFYLEVBQXFCQyxRQUFyQixFQUErQkksU0FBL0IsS0FBNkM7RUFDakU7QUFDRjtBQUNBO0FBQ0E7RUFDRSxJQUFJRCxRQUFRLENBQUNFLEdBQVQsS0FBaUIsSUFBckIsRUFBMkI7SUFDekIsT0FBTyxJQUFQO0VBQ0Q7RUFDRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7RUFDRSxJQUFJRCxTQUFTLEtBQUtFLFNBQWQsSUFBMkIsQ0FBQ0YsU0FBUyxDQUFDRyxRQUFWLENBQW1CSixRQUFRLENBQUNFLEdBQTVCLENBQWhDLEVBQWtFO0lBQ2hFLE9BQU8sSUFBUDtFQUNEO0VBQ0Q7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0VBQ0UsSUFBSU4sUUFBUSxJQUFJcEYscURBQVEsQ0FBQ3dGLFFBQUQsRUFBV0osUUFBWCxDQUF4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OE47SUFBbkcsQ0FBVCxFQUFxSDlWLENBQUMsQ0FBQ21JLElBQXZILENBQWhDLENBQTFHLENBUHBHLEVBTytXa1MsR0FBRyxDQUFDMEosTUFBSixJQUFlcmtCLHFEQUFDLENBQUMsS0FBRCxFQUFRO01BQUVtVixLQUFLLEVBQUUsZUFBVDtNQUEwQnBGLEtBQUssRUFBRTtRQUFFTixLQUFLLEVBQUVrTCxHQUFHLENBQUMySjtNQUFiO0lBQWpDLENBQVIsRUFBdUUzSixHQUFHLENBQUMwSixNQUEzRSxDQVAvWCxDQUFUO0VBUUQ7O0VBQ0ssSUFBRjFZLEVBQUUsR0FBRztJQUFFLE9BQU92TCxxREFBVSxDQUFDLElBQUQsQ0FBakI7RUFBMEI7O0VBQ2xCLFdBQVJ5YixRQUFRLEdBQUc7SUFBRSxPQUFPO01BQzdCLE9BQU8sQ0FBQyxZQUFEO0lBRHNCLENBQVA7RUFFcEI7O0FBblR3QixDQUE5QjtBQXFUQSxNQUFNMEcsbUJBQW1CLEdBQUcscUJBQTVCO0FBQ0EsTUFBTUkscUJBQXFCLEdBQUcsSUFBOUI7QUFDQSxNQUFNVyxnQkFBZ0IsR0FBRyxFQUF6QjtBQUNBLE1BQU1JLG1CQUFtQixHQUFHLEdBQTVCO0FBQ0E3RCxlQUFlLENBQUM5UCxLQUFoQixHQUF3QjtFQUN0QitMLEdBQUcsRUFBRTZELGtCQURpQjtFQUV0QjVELEVBQUUsRUFBRTZEO0FBRmtCLENBQXhCIiwic291cmNlcyI6WyIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS9pb24tZGF0ZXRpbWVfMy5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBlIGFzIGNyZWF0ZUV2ZW50LCBjIGFzIHdyaXRlVGFzaywgaCwgSCBhcyBIb3N0LCBpIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LThlNjkyNDQ1LmpzJztcbmltcG9ydCB7IGMgYXMgY2hldnJvbkJhY2ssIG8gYXMgY2hldnJvbkZvcndhcmQsIGwgYXMgY2hldnJvbkRvd24sIHAgYXMgY2FyZXRVcFNoYXJwLCBxIGFzIGNhcmV0RG93blNoYXJwIH0gZnJvbSAnLi9pbmRleC00MGJiNjllZS5qcyc7XG5pbXBvcnQgeyBiIGFzIGdldElvbk1vZGUgfSBmcm9tICcuL2lvbmljLWdsb2JhbC1jOTVjZjIzOS5qcyc7XG5pbXBvcnQgeyBzdGFydEZvY3VzVmlzaWJsZSB9IGZyb20gJy4vZm9jdXMtdmlzaWJsZS0wOTZjZjZmZC5qcyc7XG5pbXBvcnQgeyByIGFzIHJhZiwgZSBhcyByZW5kZXJIaWRkZW5JbnB1dCwgZyBhcyBnZXRFbGVtZW50Um9vdCwgbCBhcyBjbGFtcCB9IGZyb20gJy4vaGVscGVycy0zYjM5MGU0OC5qcyc7XG5pbXBvcnQgeyBwIGFzIHByaW50SW9uV2FybmluZywgYiBhcyBwcmludElvbkVycm9yIH0gZnJvbSAnLi9pbmRleC1jNGIxMTY3Ni5qcyc7XG5pbXBvcnQgeyBpIGFzIGlzUlRMIH0gZnJvbSAnLi9kaXItZThiNzY3YTguanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVDb2xvckNsYXNzZXMsIGcgYXMgZ2V0Q2xhc3NNYXAgfSBmcm9tICcuL3RoZW1lLTc2NzAzNDFjLmpzJztcbmltcG9ydCB7IGcgYXMgZ2VuZXJhdGVEYXlBcmlhTGFiZWwsIGEgYXMgZ2V0RGF5LCBpIGFzIGlzQmVmb3JlLCBiIGFzIGlzQWZ0ZXIsIGMgYXMgaXNTYW1lRGF5LCBkIGFzIGdldFByZXZpb3VzTW9udGgsIGUgYXMgZ2V0TmV4dE1vbnRoLCBwIGFzIHBhcnNlRGF0ZSwgZiBhcyBnZXRUb2RheSwgdiBhcyB2YWxpZGF0ZVBhcnRzLCBoIGFzIGdldFBhcnRzRnJvbUNhbGVuZGFyRGF5LCBqIGFzIGdldEVuZE9mV2VlaywgayBhcyBnZXRTdGFydE9mV2VlaywgbCBhcyBnZXRQcmV2aW91c0RheSwgbSBhcyBnZXROZXh0RGF5LCBuIGFzIGdldFByZXZpb3VzV2VlaywgbyBhcyBnZXROZXh0V2VlaywgcSBhcyBwYXJzZU1pblBhcnRzLCByIGFzIHBhcnNlTWF4UGFydHMsIHcgYXMgd2FybklmVmFsdWVPdXRPZkJvdW5kcywgcyBhcyBjb252ZXJ0VG9BcnJheU9mTnVtYmVycywgdCBhcyBjb252ZXJ0RGF0YVRvSVNPLCB1IGFzIGdldE51bURheXNJbk1vbnRoLCB4IGFzIGdldENvbWJpbmVkRGF0ZUNvbHVtbkRhdGEsIHkgYXMgZ2V0TW9udGhDb2x1bW5EYXRhLCB6IGFzIGdldERheUNvbHVtbkRhdGEsIEEgYXMgZ2V0WWVhckNvbHVtbkRhdGEsIEIgYXMgaXNNb250aEZpcnN0TG9jYWxlLCBDIGFzIGdldFRpbWVDb2x1bW5zRGF0YSwgRCBhcyBpc0xvY2FsZURheVBlcmlvZFJUTCwgRSBhcyBnZXREYXlzT2ZXZWVrLCBGIGFzIGdldE1vbnRoQW5kWWVhciwgRyBhcyBnZXREYXlzT2ZNb250aCwgSCBhcyBnZW5lcmF0ZU1vbnRocywgSSBhcyBpczI0SG91ciwgSiBhcyBnZXRMb2NhbGl6ZWRUaW1lLCBLIGFzIGdldE1vbnRoQW5kRGF5LCBMIGFzIGZvcm1hdFZhbHVlLCBNIGFzIGdldE5leHRZZWFyLCBOIGFzIGdldFByZXZpb3VzWWVhciwgTyBhcyBjbGFtcERhdGUsIFAgYXMgcGFyc2VBbVBtLCBRIGFzIGNhbGN1bGF0ZUhvdXJGcm9tQU1QTSB9IGZyb20gJy4vcGFyc2UtNzFmMjhjZDcuanMnO1xuaW1wb3J0IHsgQiBhcyBCQUNLRFJPUCwgaSBhcyBpc0NhbmNlbCwgZSBhcyBwcmVwYXJlT3ZlcmxheSwgZCBhcyBwcmVzZW50LCBmIGFzIGRpc21pc3MsIGcgYXMgZXZlbnRNZXRob2QsIHMgYXMgc2FmZUNhbGwgfSBmcm9tICcuL292ZXJsYXlzLTg3YzdjN2NiLmpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlQW5pbWF0aW9uIH0gZnJvbSAnLi9hbmltYXRpb24tMmM1MGQyNGQuanMnO1xuaW1wb3J0IHsgYiBhcyBoYXB0aWNTZWxlY3Rpb25DaGFuZ2VkLCBoIGFzIGhhcHRpY1NlbGVjdGlvbkVuZCwgYSBhcyBoYXB0aWNTZWxlY3Rpb25TdGFydCB9IGZyb20gJy4vaGFwdGljLTY4M2IzYjNjLmpzJztcbmltcG9ydCAnLi9oYXJkd2FyZS1iYWNrLWJ1dHRvbi00OTBkZjExNS5qcyc7XG5pbXBvcnQgJy4vaW5kZXgtMzNmZmVjMjUuanMnO1xuXG5jb25zdCBpc1llYXJEaXNhYmxlZCA9IChyZWZZZWFyLCBtaW5QYXJ0cywgbWF4UGFydHMpID0+IHtcbiAgaWYgKG1pblBhcnRzICYmIG1pblBhcnRzLnllYXIgPiByZWZZZWFyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG1heFBhcnRzICYmIG1heFBhcnRzLnllYXIgPCByZWZZZWFyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gZGF5IHNob3VsZFxuICogbm90IGJlIGludGVyYWN0aXZlIGFjY29yZGluZyB0byBpdHMgdmFsdWUsXG4gKiBvciB0aGUgbWF4L21pbiBkYXRlcy5cbiAqL1xuY29uc3QgaXNEYXlEaXNhYmxlZCA9IChyZWZQYXJ0cywgbWluUGFydHMsIG1heFBhcnRzLCBkYXlWYWx1ZXMpID0+IHtcbiAgLyoqXG4gICAqIElmIHRoaXMgaXMgYSBmaWxsZXIgZGF0ZSAoaS5lLiBwYWRkaW5nKVxuICAgKiB0aGVuIHRoZSBkYXRlIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgaWYgKHJlZlBhcnRzLmRheSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBJZiB1c2VyIHBhc3NlZCBpbiBhIGxpc3Qgb2YgYWNjZXB0YWJsZSBkYXkgdmFsdWVzXG4gICAqIGNoZWNrIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBkYXRlIHdlIGFyZSBsb29raW5nXG4gICAqIGF0IGlzIGluIHRoaXMgYXJyYXkuXG4gICAqL1xuICBpZiAoZGF5VmFsdWVzICE9PSB1bmRlZmluZWQgJiYgIWRheVZhbHVlcy5pbmNsdWRlcyhyZWZQYXJ0cy5kYXkpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdpdmVuIGEgbWluIGRhdGUsIHBlcmZvcm0gdGhlIGZvbGxvd2luZ1xuICAgKiBjaGVja3MuIElmIGFueSBvZiB0aGVtIGFyZSB0cnVlLCB0aGVuIHRoZVxuICAgKiBkYXkgc2hvdWxkIGJlIGRpc2FibGVkOlxuICAgKiAxLiBJcyB0aGUgY3VycmVudCB5ZWFyIDwgdGhlIG1pbiBhbGxvd2VkIHllYXI/XG4gICAqIDIuIElzIHRoZSBjdXJyZW50IHllYXIgPT09IG1pbiBhbGxvd2VkIHllYXIsXG4gICAqIGJ1dCB0aGUgY3VycmVudCBtb250aCA8IHRoZSBtaW4gYWxsb3dlZCBtb250aD9cbiAgICogMy4gSXMgdGhlIGN1cnJlbnQgeWVhciA9PT0gbWluIGFsbG93ZWQgeWVhciwgdGhlXG4gICAqIGN1cnJlbnQgbW9udGggPT09IG1pbiBhbGxvdyBtb250aCwgYnV0IHRoZSBjdXJyZW50XG4gICAqIGRheSA8IHRoZSBtaW4gYWxsb3dlZCBkYXk/XG4gICAqL1xuICBpZiAobWluUGFydHMgJiYgaXNCZWZvcmUocmVmUGFydHMsIG1pblBhcnRzKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHaXZlbiBhIG1heCBkYXRlLCBwZXJmb3JtIHRoZSBmb2xsb3dpbmdcbiAgICogY2hlY2tzLiBJZiBhbnkgb2YgdGhlbSBhcmUgdHJ1ZSwgdGhlbiB0aGVcbiAgICogZGF5IHNob3VsZCBiZSBkaXNhYmxlZDpcbiAgICogMS4gSXMgdGhlIGN1cnJlbnQgeWVhciA+IHRoZSBtYXggYWxsb3dlZCB5ZWFyP1xuICAgKiAyLiBJcyB0aGUgY3VycmVudCB5ZWFyID09PSBtYXggYWxsb3dlZCB5ZWFyLFxuICAgKiBidXQgdGhlIGN1cnJlbnQgbW9udGggPiB0aGUgbWF4IGFsbG93ZWQgbW9udGg/XG4gICAqIDMuIElzIHRoZSBjdXJyZW50IHllYXIgPT09IG1heCBhbGxvd2VkIHllYXIsIHRoZVxuICAgKiBjdXJyZW50IG1vbnRoID09PSBtYXggYWxsb3cgbW9udGgsIGJ1dCB0aGUgY3VycmVudFxuICAgKiBkYXkgPiB0aGUgbWF4IGFsbG93ZWQgZGF5P1xuICAgKi9cbiAgaWYgKG1heFBhcnRzICYmIGlzQWZ0ZXIocmVmUGFydHMsIG1heFBhcnRzKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBJZiBub25lIG9mIHRoZXNlIGNoZWNrc1xuICAgKiBwYXNzZWQgdGhlbiB0aGUgZGF0ZSBzaG91bGRcbiAgICogYmUgaW50ZXJhY3RpdmUuXG4gICAqL1xuICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBHaXZlbiBhIGxvY2FsZSwgYSBkYXRlLCB0aGUgc2VsZWN0ZWQgZGF0ZShzKSwgYW5kIHRvZGF5J3MgZGF0ZSxcbiAqIGdlbmVyYXRlIHRoZSBzdGF0ZSBmb3IgYSBnaXZlbiBjYWxlbmRhciBkYXkgYnV0dG9uLlxuICovXG5jb25zdCBnZXRDYWxlbmRhckRheVN0YXRlID0gKGxvY2FsZSwgcmVmUGFydHMsIGFjdGl2ZVBhcnRzLCB0b2RheVBhcnRzLCBtaW5QYXJ0cywgbWF4UGFydHMsIGRheVZhbHVlcykgPT4ge1xuICAvKipcbiAgICogYWN0aXZlUGFydHMgc2lnbmFscyB3aGF0IGRheShzKSBhcmUgY3VycmVudGx5IHNlbGVjdGVkIGluIHRoZSBkYXRldGltZS5cbiAgICogSWYgbXVsdGlwbGU9XCJ0cnVlXCIsIHRoaXMgd2lsbCBiZSBhbiBhcnJheSwgYnV0IHRoZSBsb2dpYyBpbiB0aGlzIHV0aWxcbiAgICogaXMgdGhlIHNhbWUgd2hldGhlciB3ZSBoYXZlIG9uZSBzZWxlY3RlZCBkYXkgb3IgbWFueSBiZWNhdXNlIHdlJ3JlIG9ubHlcbiAgICogY2FsY3VsYXRpbmcgdGhlIHN0YXRlIGZvciBvbmUgYnV0dG9uLiBTbywgd2UgdHJlYXQgYSBzaW5nbGUgYWN0aXZlUGFydHMgdmFsdWVcbiAgICogdGhlIHNhbWUgYXMgYW4gYXJyYXkgb2YgbGVuZ3RoIG9uZS5cbiAgICovXG4gIGNvbnN0IGFjdGl2ZVBhcnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGFjdGl2ZVBhcnRzKSA/IGFjdGl2ZVBhcnRzIDogW2FjdGl2ZVBhcnRzXTtcbiAgLyoqXG4gICAqIFRoZSBkYXkgYnV0dG9uIGlzIGFjdGl2ZSBpZiBpdCBpcyBzZWxlY3RlZCwgb3IgaW4gb3RoZXIgd29yZHMsIGlmIHJlZlBhcnRzXG4gICAqIG1hdGNoZXMgYXQgbGVhc3Qgb25lIHNlbGVjdGVkIGRhdGUuXG4gICAqL1xuICBjb25zdCBpc0FjdGl2ZSA9IGFjdGl2ZVBhcnRzQXJyYXkuZmluZCgocGFydHMpID0+IGlzU2FtZURheShyZWZQYXJ0cywgcGFydHMpKSAhPT0gdW5kZWZpbmVkO1xuICBjb25zdCBpc1RvZGF5ID0gaXNTYW1lRGF5KHJlZlBhcnRzLCB0b2RheVBhcnRzKTtcbiAgY29uc3QgZGlzYWJsZWQgPSBpc0RheURpc2FibGVkKHJlZlBhcnRzLCBtaW5QYXJ0cywgbWF4UGFydHMsIGRheVZhbHVlcyk7XG4gIC8qKlxuICAgKiBOb3RlIHRoYXQgd2UgYWx3YXlzIHJldHVybiBvbmUgb2JqZWN0IHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBhY3RpdmVQYXJ0c1xuICAgKiB3YXMgYW4gYXJyYXksIHNpbmNlIHdlIHBhcmUgZG93biB0byBvbmUgdmFsdWUgZm9yIGlzQWN0aXZlLlxuICAgKi9cbiAgcmV0dXJuIHtcbiAgICBkaXNhYmxlZCxcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1RvZGF5LFxuICAgIGFyaWFTZWxlY3RlZDogaXNBY3RpdmUgPyAndHJ1ZScgOiBudWxsLFxuICAgIGFyaWFMYWJlbDogZ2VuZXJhdGVEYXlBcmlhTGFiZWwobG9jYWxlLCBpc1RvZGF5LCByZWZQYXJ0cyksXG4gICAgdGV4dDogcmVmUGFydHMuZGF5ICE9IG51bGwgPyBnZXREYXkobG9jYWxlLCByZWZQYXJ0cykgOiBudWxsLFxuICB9O1xufTtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1vbnRoIGlzIGRpc2FibGVkIGdpdmVuIHRoZVxuICogY3VycmVudCBkYXRlIHZhbHVlIGFuZCBtaW4vbWF4IGRhdGUgY29uc3RyYWludHMuXG4gKi9cbmNvbnN0IGlzTW9udGhEaXNhYmxlZCA9IChyZWZQYXJ0cywgeyBtaW5QYXJ0cywgbWF4UGFydHMsIH0pID0+IHtcbiAgLy8gSWYgdGhlIHllYXIgaXMgZGlzYWJsZWQgdGhlbiB0aGUgbW9udGggaXMgZGlzYWJsZWQuXG4gIGlmIChpc1llYXJEaXNhYmxlZChyZWZQYXJ0cy55ZWFyLCBtaW5QYXJ0cywgbWF4UGFydHMpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gSWYgdGhlIGRhdGUgdmFsdWUgaXMgYmVmb3JlIHRoZSBtaW4gZGF0ZSwgdGhlbiB0aGUgbW9udGggaXMgZGlzYWJsZWQuXG4gIC8vIElmIHRoZSBkYXRlIHZhbHVlIGlzIGFmdGVyIHRoZSBtYXggZGF0ZSwgdGhlbiB0aGUgbW9udGggaXMgZGlzYWJsZWQuXG4gIGlmICgobWluUGFydHMgJiYgaXNCZWZvcmUocmVmUGFydHMsIG1pblBhcnRzKSkgfHwgKG1heFBhcnRzICYmIGlzQWZ0ZXIocmVmUGFydHMsIG1heFBhcnRzKSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBHaXZlbiBhIHdvcmtpbmcgZGF0ZSwgYW4gb3B0aW9uYWwgbWluaW11bSBkYXRlIHJhbmdlLFxuICogYW5kIGFuIG9wdGlvbmFsIG1heGltdW0gZGF0ZSByYW5nZTsgZGV0ZXJtaW5lIGlmIHRoZVxuICogcHJldmlvdXMgbmF2aWdhdGlvbiBidXR0b24gaXMgZGlzYWJsZWQuXG4gKi9cbmNvbnN0IGlzUHJldk1vbnRoRGlzYWJsZWQgPSAocmVmUGFydHMsIG1pblBhcnRzLCBtYXhQYXJ0cykgPT4ge1xuICBjb25zdCBwcmV2TW9udGggPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldFByZXZpb3VzTW9udGgocmVmUGFydHMpKSwgeyBkYXk6IG51bGwgfSk7XG4gIHJldHVybiBpc01vbnRoRGlzYWJsZWQocHJldk1vbnRoLCB7XG4gICAgbWluUGFydHMsXG4gICAgbWF4UGFydHMsXG4gIH0pO1xufTtcbi8qKlxuICogR2l2ZW4gYSB3b3JraW5nIGRhdGUgYW5kIGEgbWF4aW11bSBkYXRlIHJhbmdlLFxuICogZGV0ZXJtaW5lIGlmIHRoZSBuZXh0IG5hdmlnYXRpb24gYnV0dG9uIGlzIGRpc2FibGVkLlxuICovXG5jb25zdCBpc05leHRNb250aERpc2FibGVkID0gKHJlZlBhcnRzLCBtYXhQYXJ0cykgPT4ge1xuICBjb25zdCBuZXh0TW9udGggPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldE5leHRNb250aChyZWZQYXJ0cykpLCB7IGRheTogbnVsbCB9KTtcbiAgcmV0dXJuIGlzTW9udGhEaXNhYmxlZChuZXh0TW9udGgsIHtcbiAgICBtYXhQYXJ0cyxcbiAgfSk7XG59O1xuXG5jb25zdCBkYXRldGltZUlvc0NzcyA9IFwiOmhvc3R7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZmxvdzpjb2x1bW47ZmxleC1mbG93OmNvbHVtbjtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO292ZXJmbG93OmhpZGRlbn1pb24tcGlja2VyLWNvbHVtbi1pbnRlcm5hbHttaW4td2lkdGg6MjZweH06aG9zdCguZGF0ZXRpbWUtc2l6ZS1maXhlZCl7d2lkdGg6YXV0bztoZWlnaHQ6YXV0b306aG9zdCguZGF0ZXRpbWUtc2l6ZS1maXhlZDpub3QoLmRhdGV0aW1lLXByZWZlci13aGVlbCkpe21heC13aWR0aDozNTBweH06aG9zdCguZGF0ZXRpbWUtc2l6ZS1maXhlZC5kYXRldGltZS1wcmVmZXItd2hlZWwpe21pbi13aWR0aDozNTBweDttYXgtd2lkdGg6LXdlYmtpdC1tYXgtY29udGVudDttYXgtd2lkdGg6LW1vei1tYXgtY29udGVudDttYXgtd2lkdGg6bWF4LWNvbnRlbnR9Omhvc3QoLmRhdGV0aW1lLXNpemUtY292ZXIpe3dpZHRoOjEwMCV9Omhvc3QgLmNhbGVuZGFyLWJvZHksOmhvc3QgLmRhdGV0aW1lLXllYXJ7b3BhY2l0eTowfTpob3N0KDpub3QoLmRhdGV0aW1lLXJlYWR5KSkgLmRhdGV0aW1lLXllYXJ7cG9zaXRpb246YWJzb2x1dGU7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguZGF0ZXRpbWUtcmVhZHkpIC5jYWxlbmRhci1ib2R5e29wYWNpdHk6MX06aG9zdCguZGF0ZXRpbWUtcmVhZHkpIC5kYXRldGltZS15ZWFye2Rpc3BsYXk6bm9uZTtvcGFjaXR5OjF9Omhvc3QgLndoZWVsLW9yZGVyLXllYXItZmlyc3QgLmRheS1jb2x1bW57LW1zLWZsZXgtb3JkZXI6MztvcmRlcjozO3RleHQtYWxpZ246ZW5kfTpob3N0IC53aGVlbC1vcmRlci15ZWFyLWZpcnN0IC5tb250aC1jb2x1bW57LW1zLWZsZXgtb3JkZXI6MjtvcmRlcjoyO3RleHQtYWxpZ246ZW5kfTpob3N0IC53aGVlbC1vcmRlci15ZWFyLWZpcnN0IC55ZWFyLWNvbHVtbnstbXMtZmxleC1vcmRlcjoxO29yZGVyOjE7dGV4dC1hbGlnbjpzdGFydH06aG9zdCAuZGF0ZXRpbWUtY2FsZW5kYXIsOmhvc3QgLmRhdGV0aW1lLXllYXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXg6MSAxIGF1dG87ZmxleDoxIDEgYXV0bzstbXMtZmxleC1mbG93OmNvbHVtbjtmbGV4LWZsb3c6Y29sdW1ufTpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuZGF0ZXRpbWUteWVhcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH1Ac3VwcG9ydHMgKGJhY2tncm91bmQ6IC13ZWJraXQtbmFtZWQtaW1hZ2UoYXBwbGUtcGF5LWxvZ28tYmxhY2spKSBhbmQgKG5vdCAoYXNwZWN0LXJhdGlvOiAxLzEpKXs6aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmNhbGVuZGFyLW5leHQtcHJldiw6aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmNhbGVuZGFyLWRheXMtb2Ytd2Vlayw6aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmNhbGVuZGFyLWJvZHksOmhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5kYXRldGltZS10aW1le2xlZnQ6LTk5OTk5cHg7cG9zaXRpb246YWJzb2x1dGU7dmlzaWJpbGl0eTpoaWRkZW47cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmNhbGVuZGFyLW5leHQtcHJldiw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuc2hvdy1tb250aC1hbmQteWVhciAuY2FsZW5kYXItbmV4dC1wcmV2LDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuY2FsZW5kYXItZGF5cy1vZi13ZWVrLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5zaG93LW1vbnRoLWFuZC15ZWFyIC5jYWxlbmRhci1kYXlzLW9mLXdlZWssOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1ib2R5LDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5zaG93LW1vbnRoLWFuZC15ZWFyIC5jYWxlbmRhci1ib2R5LDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuZGF0ZXRpbWUtdGltZSw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuc2hvdy1tb250aC1hbmQteWVhciAuZGF0ZXRpbWUtdGltZXtsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O3JpZ2h0Oi05OTk5OXB4fX1Ac3VwcG9ydHMgKG5vdCAoYmFja2dyb3VuZDogLXdlYmtpdC1uYW1lZC1pbWFnZShhcHBsZS1wYXktbG9nby1ibGFjaykpKSBvciAoKGJhY2tncm91bmQ6IC13ZWJraXQtbmFtZWQtaW1hZ2UoYXBwbGUtcGF5LWxvZ28tYmxhY2spKSBhbmQgKGFzcGVjdC1yYXRpbzogMS8xKSl7Omhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1uZXh0LXByZXYsOmhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1kYXlzLW9mLXdlZWssOmhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1ib2R5LDpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuZGF0ZXRpbWUtdGltZXtkaXNwbGF5Om5vbmV9fTpob3N0KC5tb250aC15ZWFyLXBpY2tlci1vcGVuKSAuZGF0ZXRpbWUtZm9vdGVye2Rpc3BsYXk6bm9uZX06aG9zdCguZGF0ZXRpbWUtcmVhZG9ubHkpLDpob3N0KC5kYXRldGltZS1kaXNhYmxlZCl7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguZGF0ZXRpbWUtZGlzYWJsZWQpe29wYWNpdHk6MC40fTpob3N0IC5kYXRldGltZS1oZWFkZXIgLmRhdGV0aW1lLXRpdGxle3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbn06aG9zdCAuZGF0ZXRpbWUtYWN0aW9uLWJ1dHRvbnMuaGFzLWNsZWFyLWJ1dHRvbnt3aWR0aDoxMDAlfTpob3N0IC5kYXRldGltZS1hY3Rpb24tYnV0dG9ucyBpb24tYnV0dG9uc3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Omhvc3QgLmNhbGVuZGFyLWFjdGlvbi1idXR0b25ze2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn06aG9zdCAuY2FsZW5kYXItYWN0aW9uLWJ1dHRvbnMgaW9uLWl0ZW0sOmhvc3QgLmNhbGVuZGFyLWFjdGlvbi1idXR0b25zIGlvbi1idXR0b257LS1iYWNrZ3JvdW5kOnRyYW5zbHVjZW50fTpob3N0IC5jYWxlbmRhci1hY3Rpb24tYnV0dG9ucyBpb24taXRlbSBpb24tbGFiZWx7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn06aG9zdCAuY2FsZW5kYXItYWN0aW9uLWJ1dHRvbnMgaW9uLWl0ZW0gaW9uLWljb257cGFkZGluZy1sZWZ0OjRweDtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowfUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QgLmNhbGVuZGFyLWFjdGlvbi1idXR0b25zIGlvbi1pdGVtIGlvbi1pY29ue3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDo0cHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6NHB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MDtwYWRkaW5nLWlubGluZS1lbmQ6MH19Omhvc3QgLmNhbGVuZGFyLWRheXMtb2Ytd2Vla3tkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCg3LCAxZnIpO3RleHQtYWxpZ246Y2VudGVyfTpob3N0IC5jYWxlbmRhci1ib2R5e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXBvc2l0aXZlOjE7ZmxleC1ncm93OjE7LXdlYmtpdC1zY3JvbGwtc25hcC10eXBlOnggbWFuZGF0b3J5Oy1tcy1zY3JvbGwtc25hcC10eXBlOnggbWFuZGF0b3J5O3Njcm9sbC1zbmFwLXR5cGU6eCBtYW5kYXRvcnk7b3ZlcmZsb3cteDpzY3JvbGw7b3ZlcmZsb3cteTpoaWRkZW47c2Nyb2xsYmFyLXdpZHRoOm5vbmU7b3V0bGluZTpub25lfTpob3N0IC5jYWxlbmRhci1ib2R5IC5jYWxlbmRhci1tb250aHtzY3JvbGwtc25hcC1hbGlnbjpzdGFydDtzY3JvbGwtc25hcC1zdG9wOmFsd2F5czstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7d2lkdGg6MTAwJX06aG9zdCAuY2FsZW5kYXItYm9keSAuY2FsZW5kYXItbW9udGgtZGlzYWJsZWR7c2Nyb2xsLXNuYXAtYWxpZ246bm9uZX06aG9zdCAuY2FsZW5kYXItYm9keTo6LXdlYmtpdC1zY3JvbGxiYXJ7ZGlzcGxheTpub25lfTpob3N0IC5jYWxlbmRhci1ib2R5IC5jYWxlbmRhci1tb250aC1ncmlke2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KDcsIDFmcik7aGVpZ2h0OjEwMCV9Omhvc3QgLmNhbGVuZGFyLWRheXtwYWRkaW5nLWxlZnQ6MHB4O3BhZGRpbmctcmlnaHQ6MHB4O3BhZGRpbmctdG9wOjBweDtwYWRkaW5nLWJvdHRvbTowcHg7bWFyZ2luLWxlZnQ6MHB4O21hcmdpbi1yaWdodDowcHg7bWFyZ2luLXRvcDowcHg7bWFyZ2luLWJvdHRvbTowcHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2JvcmRlcjpub25lO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOm5vbmU7Y29sb3I6Y3VycmVudENvbG9yO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtYXBwZWFyYW5jZTpub25lOy1tb3otYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZTt6LWluZGV4OjB9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCAuY2FsZW5kYXItZGF5e3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDowcHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6MHB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MHB4O3BhZGRpbmctaW5saW5lLWVuZDowcHh9fUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QgLmNhbGVuZGFyLWRheXttYXJnaW4tbGVmdDp1bnNldDttYXJnaW4tcmlnaHQ6dW5zZXQ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MHB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6MHB4Oy13ZWJraXQtbWFyZ2luLWVuZDowcHg7bWFyZ2luLWlubGluZS1lbmQ6MHB4fX06aG9zdCAuY2FsZW5kYXItZGF5W2Rpc2FibGVkXXtwb2ludGVyLWV2ZW50czpub25lO29wYWNpdHk6MC40fTpob3N0IC5jYWxlbmRhci1kYXk6YWZ0ZXJ7Ym9yZGVyLXJhZGl1czozMnB4O3BhZGRpbmctbGVmdDo0cHg7cGFkZGluZy1yaWdodDo0cHg7cGFkZGluZy10b3A6NHB4O3BhZGRpbmctYm90dG9tOjRweDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO2xlZnQ6NTAlO3dpZHRoOjMycHg7aGVpZ2h0OjMycHg7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTUwJSk7Y29udGVudDpcXFwiIFxcXCI7ei1pbmRleDotMX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0IC5jYWxlbmRhci1kYXk6YWZ0ZXJ7cGFkZGluZy1sZWZ0OnVuc2V0O3BhZGRpbmctcmlnaHQ6dW5zZXQ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjRweDtwYWRkaW5nLWlubGluZS1zdGFydDo0cHg7LXdlYmtpdC1wYWRkaW5nLWVuZDo0cHg7cGFkZGluZy1pbmxpbmUtZW5kOjRweH19Omhvc3QgLmRhdGV0aW1lLXRpbWV7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufTpob3N0KC5kYXRldGltZS1wcmVzZW50YXRpb24tdGltZSkgLmRhdGV0aW1lLXRpbWV7cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MH06aG9zdCBpb24tcG9wb3ZlcnstLWhlaWdodDoyMDBweH06aG9zdCAudGltZS1oZWFkZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn06aG9zdCAudGltZS1ib2R5e2JvcmRlci1yYWRpdXM6OHB4O3BhZGRpbmctbGVmdDoxMnB4O3BhZGRpbmctcmlnaHQ6MTJweDtwYWRkaW5nLXRvcDo2cHg7cGFkZGluZy1ib3R0b206NnB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O2JvcmRlcjpub25lO2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMzAwLCAjZWRlZWYwKTtjb2xvcjp2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCk7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXNpemU6aW5oZXJpdDtjdXJzb3I6cG9pbnRlcjstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmV9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCAudGltZS1ib2R5e3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDoxMnB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjEycHg7LXdlYmtpdC1wYWRkaW5nLWVuZDoxMnB4O3BhZGRpbmctaW5saW5lLWVuZDoxMnB4fX06aG9zdCAudGltZS1ib2R5LWFjdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QoLmluLWl0ZW0pe3Bvc2l0aW9uOnN0YXRpY306aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmNhbGVuZGFyLWFjdGlvbi1idXR0b25zIGlvbi1pdGVtey0tY29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0ey0tYmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItbGlnaHQsICNmZmZmZmYpOy0tYmFja2dyb3VuZC1yZ2I6dmFyKC0taW9uLWNvbG9yLWxpZ2h0LXJnYik7LS10aXRsZS1jb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC02MDAsICM2NjY2NjYpfTpob3N0KC5kYXRldGltZS1wcmVzZW50YXRpb24tZGF0ZS10aW1lOm5vdCguZGF0ZXRpbWUtcHJlZmVyLXdoZWVsKSksOmhvc3QoLmRhdGV0aW1lLXByZXNlbnRhdGlvbi10aW1lLWRhdGU6bm90KC5kYXRldGltZS1wcmVmZXItd2hlZWwpKSw6aG9zdCguZGF0ZXRpbWUtcHJlc2VudGF0aW9uLWRhdGU6bm90KC5kYXRldGltZS1wcmVmZXItd2hlZWwpKXttaW4taGVpZ2h0OjM1MHB4fTpob3N0IC5kYXRldGltZS1oZWFkZXJ7cGFkZGluZy1sZWZ0OjE2cHg7cGFkZGluZy1yaWdodDoxNnB4O3BhZGRpbmctdG9wOjE2cHg7cGFkZGluZy1ib3R0b206MTZweDtib3JkZXItYm90dG9tOjAuNTVweCBzb2xpZCB2YXIoLS1pb24tY29sb3Itc3RlcC0yMDAsICNjY2NjY2MpO2ZvbnQtc2l6ZToxNHB4fUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QgLmRhdGV0aW1lLWhlYWRlcntwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6MTZweDtwYWRkaW5nLWlubGluZS1zdGFydDoxNnB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MTZweDtwYWRkaW5nLWlubGluZS1lbmQ6MTZweH19Omhvc3QgLmRhdGV0aW1lLWhlYWRlciAuZGF0ZXRpbWUtdGl0bGV7Y29sb3I6dmFyKC0tdGl0bGUtY29sb3IpfTpob3N0IC5kYXRldGltZS1oZWFkZXIgLmRhdGV0aW1lLXNlbGVjdGVkLWRhdGV7bWFyZ2luLXRvcDoxMHB4fTpob3N0IC5jYWxlbmRhci1hY3Rpb24tYnV0dG9ucyBpb24taXRlbXstLXBhZGRpbmctc3RhcnQ6MTZweDstLWJhY2tncm91bmQtaG92ZXI6dHJhbnNwYXJlbnQ7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZDp0cmFuc3BhcmVudDtmb250LXNpemU6MTZweDtmb250LXdlaWdodDo2MDB9Omhvc3QgLmNhbGVuZGFyLWFjdGlvbi1idXR0b25zIGlvbi1pdGVtIGlvbi1pY29uLDpob3N0IC5jYWxlbmRhci1hY3Rpb24tYnV0dG9ucyBpb24tYnV0dG9ucyBpb24tYnV0dG9ue2NvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCAuY2FsZW5kYXItYWN0aW9uLWJ1dHRvbnMgaW9uLWJ1dHRvbnN7cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjhweDtwYWRkaW5nLWJvdHRvbTowfTpob3N0IC5jYWxlbmRhci1hY3Rpb24tYnV0dG9ucyBpb24tYnV0dG9ucyBpb24tYnV0dG9ue21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH06aG9zdCAuY2FsZW5kYXItZGF5cy1vZi13ZWVre3BhZGRpbmctbGVmdDo4cHg7cGFkZGluZy1yaWdodDo4cHg7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO2NvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTMwMCwgI2IzYjNiMyk7Zm9udC1zaXplOjEycHg7Zm9udC13ZWlnaHQ6NjAwO2xpbmUtaGVpZ2h0OjI0cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QgLmNhbGVuZGFyLWRheXMtb2Ytd2Vla3twYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6OHB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjhweDstd2Via2l0LXBhZGRpbmctZW5kOjhweDtwYWRkaW5nLWlubGluZS1lbmQ6OHB4fX06aG9zdCAuY2FsZW5kYXItYm9keSAuY2FsZW5kYXItbW9udGggLmNhbGVuZGFyLW1vbnRoLWdyaWR7cGFkZGluZy1sZWZ0OjhweDtwYWRkaW5nLXJpZ2h0OjhweDtwYWRkaW5nLXRvcDo4cHg7cGFkZGluZy1ib3R0b206OHB4O2hlaWdodDpjYWxjKDEwMCUgLSAxNnB4KX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0IC5jYWxlbmRhci1ib2R5IC5jYWxlbmRhci1tb250aCAuY2FsZW5kYXItbW9udGgtZ3JpZHtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6OHB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjhweDstd2Via2l0LXBhZGRpbmctZW5kOjhweDtwYWRkaW5nLWlubGluZS1lbmQ6OHB4fX06aG9zdCAuY2FsZW5kYXItZGF5e2ZvbnQtc2l6ZToyMHB4fTpob3N0IC5jYWxlbmRhci1kYXk6YWZ0ZXJ7b3BhY2l0eTowLjJ9Omhvc3QgLmNhbGVuZGFyLWRheTpmb2N1czphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCAuY2FsZW5kYXItZGF5LmNhbGVuZGFyLWRheS10b2RheXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QgLmNhbGVuZGFyLWRheS5jYWxlbmRhci1kYXktYWN0aXZle2NvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKTtmb250LXdlaWdodDo2MDB9Omhvc3QgLmNhbGVuZGFyLWRheS5jYWxlbmRhci1kYXktYWN0aXZlOmFmdGVye2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0IC5jYWxlbmRhci1kYXkuY2FsZW5kYXItZGF5LXRvZGF5LmNhbGVuZGFyLWRheS1hY3RpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KX06aG9zdCAuY2FsZW5kYXItZGF5LmNhbGVuZGFyLWRheS10b2RheS5jYWxlbmRhci1kYXktYWN0aXZlOmFmdGVye2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpO29wYWNpdHk6MX06aG9zdCAuZGF0ZXRpbWUtdGltZXtwYWRkaW5nLWxlZnQ6MTZweDtwYWRkaW5nLXJpZ2h0OjE2cHg7cGFkZGluZy10b3A6OHB4O3BhZGRpbmctYm90dG9tOjE2cHg7Zm9udC1zaXplOjE2cHh9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCAuZGF0ZXRpbWUtdGltZXtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6MTZweDtwYWRkaW5nLWlubGluZS1zdGFydDoxNnB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MTZweDtwYWRkaW5nLWlubGluZS1lbmQ6MTZweH19Omhvc3QgLmRhdGV0aW1lLXRpbWUgLnRpbWUtaGVhZGVye2ZvbnQtd2VpZ2h0OjYwMH06aG9zdCAuZGF0ZXRpbWUtYnV0dG9uc3twYWRkaW5nLWxlZnQ6OHB4O3BhZGRpbmctcmlnaHQ6OHB4O3BhZGRpbmctdG9wOjhweDtwYWRkaW5nLWJvdHRvbTo4cHg7Ym9yZGVyLXRvcDowLjU1cHggc29saWQgdmFyKC0taW9uLWNvbG9yLXN0ZXAtMjAwLCAjY2NjY2NjKX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0IC5kYXRldGltZS1idXR0b25ze3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDo4cHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6OHB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6OHB4O3BhZGRpbmctaW5saW5lLWVuZDo4cHh9fTpob3N0IC5kYXRldGltZS1idXR0b25zIDo6c2xvdHRlZChpb24tYnV0dG9ucyksOmhvc3QgLmRhdGV0aW1lLWJ1dHRvbnMgaW9uLWJ1dHRvbnN7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Omhvc3QgLmRhdGV0aW1lLWFjdGlvbi1idXR0b25ze3dpZHRoOjEwMCV9XCI7XG5cbmNvbnN0IGRhdGV0aW1lTWRDc3MgPSBcIjpob3N0e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWZsb3c6Y29sdW1uO2ZsZXgtZmxvdzpjb2x1bW47YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtvdmVyZmxvdzpoaWRkZW59aW9uLXBpY2tlci1jb2x1bW4taW50ZXJuYWx7bWluLXdpZHRoOjI2cHh9Omhvc3QoLmRhdGV0aW1lLXNpemUtZml4ZWQpe3dpZHRoOmF1dG87aGVpZ2h0OmF1dG99Omhvc3QoLmRhdGV0aW1lLXNpemUtZml4ZWQ6bm90KC5kYXRldGltZS1wcmVmZXItd2hlZWwpKXttYXgtd2lkdGg6MzUwcHh9Omhvc3QoLmRhdGV0aW1lLXNpemUtZml4ZWQuZGF0ZXRpbWUtcHJlZmVyLXdoZWVsKXttaW4td2lkdGg6MzUwcHg7bWF4LXdpZHRoOi13ZWJraXQtbWF4LWNvbnRlbnQ7bWF4LXdpZHRoOi1tb3otbWF4LWNvbnRlbnQ7bWF4LXdpZHRoOm1heC1jb250ZW50fTpob3N0KC5kYXRldGltZS1zaXplLWNvdmVyKXt3aWR0aDoxMDAlfTpob3N0IC5jYWxlbmRhci1ib2R5LDpob3N0IC5kYXRldGltZS15ZWFye29wYWNpdHk6MH06aG9zdCg6bm90KC5kYXRldGltZS1yZWFkeSkpIC5kYXRldGltZS15ZWFye3Bvc2l0aW9uOmFic29sdXRlO3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLmRhdGV0aW1lLXJlYWR5KSAuY2FsZW5kYXItYm9keXtvcGFjaXR5OjF9Omhvc3QoLmRhdGV0aW1lLXJlYWR5KSAuZGF0ZXRpbWUteWVhcntkaXNwbGF5Om5vbmU7b3BhY2l0eToxfTpob3N0IC53aGVlbC1vcmRlci15ZWFyLWZpcnN0IC5kYXktY29sdW1uey1tcy1mbGV4LW9yZGVyOjM7b3JkZXI6Mzt0ZXh0LWFsaWduOmVuZH06aG9zdCAud2hlZWwtb3JkZXIteWVhci1maXJzdCAubW9udGgtY29sdW1uey1tcy1mbGV4LW9yZGVyOjI7b3JkZXI6Mjt0ZXh0LWFsaWduOmVuZH06aG9zdCAud2hlZWwtb3JkZXIteWVhci1maXJzdCAueWVhci1jb2x1bW57LW1zLWZsZXgtb3JkZXI6MTtvcmRlcjoxO3RleHQtYWxpZ246c3RhcnR9Omhvc3QgLmRhdGV0aW1lLWNhbGVuZGFyLDpob3N0IC5kYXRldGltZS15ZWFye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4OjEgMSBhdXRvO2ZsZXg6MSAxIGF1dG87LW1zLWZsZXgtZmxvdzpjb2x1bW47ZmxleC1mbG93OmNvbHVtbn06aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmRhdGV0aW1lLXllYXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXh9QHN1cHBvcnRzIChiYWNrZ3JvdW5kOiAtd2Via2l0LW5hbWVkLWltYWdlKGFwcGxlLXBheS1sb2dvLWJsYWNrKSkgYW5kIChub3QgKGFzcGVjdC1yYXRpbzogMS8xKSl7Omhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1uZXh0LXByZXYsOmhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1kYXlzLW9mLXdlZWssOmhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1ib2R5LDpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuZGF0ZXRpbWUtdGltZXtsZWZ0Oi05OTk5OXB4O3Bvc2l0aW9uOmFic29sdXRlO3Zpc2liaWxpdHk6aGlkZGVuO3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1uZXh0LXByZXYsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLnNob3ctbW9udGgtYW5kLXllYXIgLmNhbGVuZGFyLW5leHQtcHJldiw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmNhbGVuZGFyLWRheXMtb2Ytd2Vlayw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuc2hvdy1tb250aC1hbmQteWVhciAuY2FsZW5kYXItZGF5cy1vZi13ZWVrLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuY2FsZW5kYXItYm9keSw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuc2hvdy1tb250aC1hbmQteWVhciAuY2FsZW5kYXItYm9keSw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmRhdGV0aW1lLXRpbWUsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLnNob3ctbW9udGgtYW5kLXllYXIgLmRhdGV0aW1lLXRpbWV7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDotOTk5OTlweH19QHN1cHBvcnRzIChub3QgKGJhY2tncm91bmQ6IC13ZWJraXQtbmFtZWQtaW1hZ2UoYXBwbGUtcGF5LWxvZ28tYmxhY2spKSkgb3IgKChiYWNrZ3JvdW5kOiAtd2Via2l0LW5hbWVkLWltYWdlKGFwcGxlLXBheS1sb2dvLWJsYWNrKSkgYW5kIChhc3BlY3QtcmF0aW86IDEvMSkpezpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuY2FsZW5kYXItbmV4dC1wcmV2LDpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuY2FsZW5kYXItZGF5cy1vZi13ZWVrLDpob3N0KC5zaG93LW1vbnRoLWFuZC15ZWFyKSAuY2FsZW5kYXItYm9keSw6aG9zdCguc2hvdy1tb250aC1hbmQteWVhcikgLmRhdGV0aW1lLXRpbWV7ZGlzcGxheTpub25lfX06aG9zdCgubW9udGgteWVhci1waWNrZXItb3BlbikgLmRhdGV0aW1lLWZvb3RlcntkaXNwbGF5Om5vbmV9Omhvc3QoLmRhdGV0aW1lLXJlYWRvbmx5KSw6aG9zdCguZGF0ZXRpbWUtZGlzYWJsZWQpe3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLmRhdGV0aW1lLWRpc2FibGVkKXtvcGFjaXR5OjAuNH06aG9zdCAuZGF0ZXRpbWUtaGVhZGVyIC5kYXRldGltZS10aXRsZXt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW59Omhvc3QgLmRhdGV0aW1lLWFjdGlvbi1idXR0b25zLmhhcy1jbGVhci1idXR0b257d2lkdGg6MTAwJX06aG9zdCAuZGF0ZXRpbWUtYWN0aW9uLWJ1dHRvbnMgaW9uLWJ1dHRvbnN7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufTpob3N0IC5jYWxlbmRhci1hY3Rpb24tYnV0dG9uc3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Omhvc3QgLmNhbGVuZGFyLWFjdGlvbi1idXR0b25zIGlvbi1pdGVtLDpob3N0IC5jYWxlbmRhci1hY3Rpb24tYnV0dG9ucyBpb24tYnV0dG9uey0tYmFja2dyb3VuZDp0cmFuc2x1Y2VudH06aG9zdCAuY2FsZW5kYXItYWN0aW9uLWJ1dHRvbnMgaW9uLWl0ZW0gaW9uLWxhYmVse2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Omhvc3QgLmNhbGVuZGFyLWFjdGlvbi1idXR0b25zIGlvbi1pdGVtIGlvbi1pY29ue3BhZGRpbmctbGVmdDo0cHg7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0IC5jYWxlbmRhci1hY3Rpb24tYnV0dG9ucyBpb24taXRlbSBpb24taWNvbntwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6NHB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjRweDstd2Via2l0LXBhZGRpbmctZW5kOjA7cGFkZGluZy1pbmxpbmUtZW5kOjB9fTpob3N0IC5jYWxlbmRhci1kYXlzLW9mLXdlZWt7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoNywgMWZyKTt0ZXh0LWFsaWduOmNlbnRlcn06aG9zdCAuY2FsZW5kYXItYm9keXtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wb3NpdGl2ZToxO2ZsZXgtZ3JvdzoxOy13ZWJraXQtc2Nyb2xsLXNuYXAtdHlwZTp4IG1hbmRhdG9yeTstbXMtc2Nyb2xsLXNuYXAtdHlwZTp4IG1hbmRhdG9yeTtzY3JvbGwtc25hcC10eXBlOnggbWFuZGF0b3J5O292ZXJmbG93LXg6c2Nyb2xsO292ZXJmbG93LXk6aGlkZGVuO3Njcm9sbGJhci13aWR0aDpub25lO291dGxpbmU6bm9uZX06aG9zdCAuY2FsZW5kYXItYm9keSAuY2FsZW5kYXItbW9udGh7c2Nyb2xsLXNuYXAtYWxpZ246c3RhcnQ7c2Nyb2xsLXNuYXAtc3RvcDphbHdheXM7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowO3dpZHRoOjEwMCV9Omhvc3QgLmNhbGVuZGFyLWJvZHkgLmNhbGVuZGFyLW1vbnRoLWRpc2FibGVke3Njcm9sbC1zbmFwLWFsaWduOm5vbmV9Omhvc3QgLmNhbGVuZGFyLWJvZHk6Oi13ZWJraXQtc2Nyb2xsYmFye2Rpc3BsYXk6bm9uZX06aG9zdCAuY2FsZW5kYXItYm9keSAuY2FsZW5kYXItbW9udGgtZ3JpZHtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCg3LCAxZnIpO2hlaWdodDoxMDAlfTpob3N0IC5jYWxlbmRhci1kYXl7cGFkZGluZy1sZWZ0OjBweDtwYWRkaW5nLXJpZ2h0OjBweDtwYWRkaW5nLXRvcDowcHg7cGFkZGluZy1ib3R0b206MHB4O21hcmdpbi1sZWZ0OjBweDttYXJnaW4tcmlnaHQ6MHB4O21hcmdpbi10b3A6MHB4O21hcmdpbi1ib3R0b206MHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtib3JkZXI6bm9uZTtvdXRsaW5lOm5vbmU7YmFja2dyb3VuZDpub25lO2NvbG9yOmN1cnJlbnRDb2xvcjtjdXJzb3I6cG9pbnRlcjstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmU7ei1pbmRleDowfUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QgLmNhbGVuZGFyLWRheXtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6MHB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjBweDstd2Via2l0LXBhZGRpbmctZW5kOjBweDtwYWRkaW5nLWlubGluZS1lbmQ6MHB4fX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0IC5jYWxlbmRhci1kYXl7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OjBweDttYXJnaW4taW5saW5lLXN0YXJ0OjBweDstd2Via2l0LW1hcmdpbi1lbmQ6MHB4O21hcmdpbi1pbmxpbmUtZW5kOjBweH19Omhvc3QgLmNhbGVuZGFyLWRheVtkaXNhYmxlZF17cG9pbnRlci1ldmVudHM6bm9uZTtvcGFjaXR5OjAuNH06aG9zdCAuY2FsZW5kYXItZGF5OmFmdGVye2JvcmRlci1yYWRpdXM6MzJweDtwYWRkaW5nLWxlZnQ6NHB4O3BhZGRpbmctcmlnaHQ6NHB4O3BhZGRpbmctdG9wOjRweDtwYWRkaW5nLWJvdHRvbTo0cHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTt3aWR0aDozMnB4O2hlaWdodDozMnB4Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpO2NvbnRlbnQ6XFxcIiBcXFwiO3otaW5kZXg6LTF9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCAuY2FsZW5kYXItZGF5OmFmdGVye3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDo0cHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6NHB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6NHB4O3BhZGRpbmctaW5saW5lLWVuZDo0cHh9fTpob3N0IC5kYXRldGltZS10aW1le2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn06aG9zdCguZGF0ZXRpbWUtcHJlc2VudGF0aW9uLXRpbWUpIC5kYXRldGltZS10aW1le3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLXRvcDowO3BhZGRpbmctYm90dG9tOjB9Omhvc3QgaW9uLXBvcG92ZXJ7LS1oZWlnaHQ6MjAwcHh9Omhvc3QgLnRpbWUtaGVhZGVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Omhvc3QgLnRpbWUtYm9keXtib3JkZXItcmFkaXVzOjhweDtwYWRkaW5nLWxlZnQ6MTJweDtwYWRkaW5nLXJpZ2h0OjEycHg7cGFkZGluZy10b3A6NnB4O3BhZGRpbmctYm90dG9tOjZweDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtib3JkZXI6bm9uZTtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTMwMCwgI2VkZWVmMCk7Y29sb3I6dmFyKC0taW9uLXRleHQtY29sb3IsICMwMDApO2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOmluaGVyaXQ7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QgLnRpbWUtYm9keXtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6MTJweDtwYWRkaW5nLWlubGluZS1zdGFydDoxMnB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MTJweDtwYWRkaW5nLWlubGluZS1lbmQ6MTJweH19Omhvc3QgLnRpbWUtYm9keS1hY3RpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0KC5pbi1pdGVtKXtwb3NpdGlvbjpzdGF0aWN9Omhvc3QoLnNob3ctbW9udGgtYW5kLXllYXIpIC5jYWxlbmRhci1hY3Rpb24tYnV0dG9ucyBpb24taXRlbXstLWNvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdHstLWJhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMTAwLCAjZmZmZmZmKTstLXRpdGxlLWNvbG9yOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9Omhvc3QgLmRhdGV0aW1lLWhlYWRlcntwYWRkaW5nLWxlZnQ6MjBweDtwYWRkaW5nLXJpZ2h0OjIwcHg7cGFkZGluZy10b3A6MjBweDtwYWRkaW5nLWJvdHRvbToyMHB4O2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpO2NvbG9yOnZhcigtLXRpdGxlLWNvbG9yKX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0IC5kYXRldGltZS1oZWFkZXJ7cGFkZGluZy1sZWZ0OnVuc2V0O3BhZGRpbmctcmlnaHQ6dW5zZXQ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjIwcHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6MjBweDstd2Via2l0LXBhZGRpbmctZW5kOjIwcHg7cGFkZGluZy1pbmxpbmUtZW5kOjIwcHh9fTpob3N0IC5kYXRldGltZS1oZWFkZXIgLmRhdGV0aW1lLXRpdGxle2ZvbnQtc2l6ZToxMnB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX06aG9zdCAuZGF0ZXRpbWUtaGVhZGVyIC5kYXRldGltZS1zZWxlY3RlZC1kYXRle21hcmdpbi10b3A6MzBweDtmb250LXNpemU6MzRweH06aG9zdCAuZGF0ZXRpbWUtY2FsZW5kYXIgLmNhbGVuZGFyLWFjdGlvbi1idXR0b25zIGlvbi1pdGVtey0tcGFkZGluZy1zdGFydDoyMHB4fTpob3N0IC5jYWxlbmRhci1hY3Rpb24tYnV0dG9ucyBpb24taXRlbSw6aG9zdCAuY2FsZW5kYXItYWN0aW9uLWJ1dHRvbnMgaW9uLWJ1dHRvbntjb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC02NTAsICM1OTU5NTkpfTpob3N0IC5jYWxlbmRhci1kYXlzLW9mLXdlZWt7cGFkZGluZy1sZWZ0OjEwcHg7cGFkZGluZy1yaWdodDoxMHB4O3BhZGRpbmctdG9wOjBweDtwYWRkaW5nLWJvdHRvbTowcHg7Y29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNTAwLCBncmF5KTtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDozNnB4fUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QgLmNhbGVuZGFyLWRheXMtb2Ytd2Vla3twYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6MTBweDtwYWRkaW5nLWlubGluZS1zdGFydDoxMHB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MTBweDtwYWRkaW5nLWlubGluZS1lbmQ6MTBweH19Omhvc3QgLmNhbGVuZGFyLWJvZHkgLmNhbGVuZGFyLW1vbnRoIC5jYWxlbmRhci1tb250aC1ncmlke3BhZGRpbmctbGVmdDoxMHB4O3BhZGRpbmctcmlnaHQ6MTBweDtwYWRkaW5nLXRvcDozcHg7cGFkZGluZy1ib3R0b206MHB4O2dyaWQtdGVtcGxhdGUtcm93czpyZXBlYXQoNiwgMWZyKX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0IC5jYWxlbmRhci1ib2R5IC5jYWxlbmRhci1tb250aCAuY2FsZW5kYXItbW9udGgtZ3JpZHtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6MTBweDtwYWRkaW5nLWlubGluZS1zdGFydDoxMHB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MTBweDtwYWRkaW5nLWlubGluZS1lbmQ6MTBweH19Omhvc3QgLmNhbGVuZGFyLWRheXtwYWRkaW5nLWxlZnQ6MHB4O3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLXRvcDoxM3B4O3BhZGRpbmctYm90dG9tOjEzcHg7Zm9udC1zaXplOjE0cHh9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCAuY2FsZW5kYXItZGF5e3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDowcHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6MHB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MDtwYWRkaW5nLWlubGluZS1lbmQ6MH19Omhvc3QgLmNhbGVuZGFyLWRheTpmb2N1czphZnRlcntiYWNrZ3JvdW5kOnJnYmEodmFyKC0taW9uLWNvbG9yLWJhc2UtcmdiKSwgMC4yKTstd2Via2l0LWJveC1zaGFkb3c6MHB4IDBweCAwcHggNHB4IHJnYmEodmFyKC0taW9uLWNvbG9yLWJhc2UtcmdiKSwgMC4yKTtib3gtc2hhZG93OjBweCAwcHggMHB4IDRweCByZ2JhKHZhcigtLWlvbi1jb2xvci1iYXNlLXJnYiksIDAuMil9Omhvc3QgLmNhbGVuZGFyLWRheS5jYWxlbmRhci1kYXktdG9kYXl7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0IC5jYWxlbmRhci1kYXkuY2FsZW5kYXItZGF5LXRvZGF5OmFmdGVye2JvcmRlcjoxcHggc29saWQgdmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0IC5jYWxlbmRhci1kYXkuY2FsZW5kYXItZGF5LWFjdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfTpob3N0IC5jYWxlbmRhci1kYXkuY2FsZW5kYXItZGF5LWFjdGl2ZTphZnRlcntib3JkZXI6MXB4IHNvbGlkIHZhcigtLWlvbi1jb2xvci1iYXNlKTtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCAuZGF0ZXRpbWUtdGltZXtwYWRkaW5nLWxlZnQ6MTZweDtwYWRkaW5nLXJpZ2h0OjE2cHg7cGFkZGluZy10b3A6OHB4O3BhZGRpbmctYm90dG9tOjhweH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0IC5kYXRldGltZS10aW1le3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDoxNnB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjE2cHg7LXdlYmtpdC1wYWRkaW5nLWVuZDoxNnB4O3BhZGRpbmctaW5saW5lLWVuZDoxNnB4fX06aG9zdCAudGltZS1oZWFkZXJ7Y29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNjUwLCAjNTk1OTU5KX06aG9zdCguZGF0ZXRpbWUtcHJlc2VudGF0aW9uLW1vbnRoKSAuZGF0ZXRpbWUteWVhciw6aG9zdCguZGF0ZXRpbWUtcHJlc2VudGF0aW9uLXllYXIpIC5kYXRldGltZS15ZWFyLDpob3N0KC5kYXRldGltZS1wcmVzZW50YXRpb24tbW9udGgteWVhcikgLmRhdGV0aW1lLXllYXJ7bWFyZ2luLXRvcDoyMHB4O21hcmdpbi1ib3R0b206MjBweH06aG9zdCAuZGF0ZXRpbWUtYnV0dG9uc3twYWRkaW5nLWxlZnQ6MTBweDtwYWRkaW5nLXJpZ2h0OjEwcHg7cGFkZGluZy10b3A6MTBweDtwYWRkaW5nLWJvdHRvbToxMHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazplbmQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QgLmRhdGV0aW1lLWJ1dHRvbnN7cGFkZGluZy1sZWZ0OnVuc2V0O3BhZGRpbmctcmlnaHQ6dW5zZXQ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjEwcHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6MTBweDstd2Via2l0LXBhZGRpbmctZW5kOjEwcHg7cGFkZGluZy1pbmxpbmUtZW5kOjEwcHh9fTpob3N0IC5kYXRldGltZS12aWV3LWJ1dHRvbnMgaW9uLWJ1dHRvbntjb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC04MDAsICMzMzMzMzMpfVwiO1xuXG5jb25zdCBEYXRldGltZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25DYW5jZWwgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkNhbmNlbFwiLCA3KTtcbiAgICB0aGlzLmlvbkNoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uQ2hhbmdlXCIsIDcpO1xuICAgIHRoaXMuaW9uRm9jdXMgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkZvY3VzXCIsIDcpO1xuICAgIHRoaXMuaW9uQmx1ciA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uQmx1clwiLCA3KTtcbiAgICB0aGlzLmlvblN0eWxlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25TdHlsZVwiLCA3KTtcbiAgICB0aGlzLmlvblJlbmRlciA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uUmVuZGVyXCIsIDcpO1xuICAgIHRoaXMuaW5wdXRJZCA9IGBpb24tZHQtJHtkYXRldGltZUlkcysrfWA7XG4gICAgdGhpcy50b2RheVBhcnRzID0gcGFyc2VEYXRlKGdldFRvZGF5KCkpO1xuICAgIHRoaXMucHJldlByZXNlbnRhdGlvbiA9IG51bGw7XG4gICAgLyoqXG4gICAgICogRHVwbGljYXRlIHJlZmVyZW5jZSB0byBgYWN0aXZlUGFydHNgIHRoYXQgZG9lcyBub3QgdHJpZ2dlciBhIHJlLXJlbmRlciBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIEFsbG93cyBjYWNoaW5nIGFuIGluc3RhbmNlIG9mIHRoZSBgYWN0aXZlUGFydHNgIGluIGJldHdlZW4gcmVuZGVyIGN5Y2xlcy5cbiAgICAgKi9cbiAgICB0aGlzLmFjdGl2ZVBhcnRzQ2xvbmUgPSBbXTtcbiAgICB0aGlzLnNob3dNb250aEFuZFllYXIgPSBmYWxzZTtcbiAgICB0aGlzLmFjdGl2ZVBhcnRzID0gW107XG4gICAgdGhpcy53b3JraW5nUGFydHMgPSB7XG4gICAgICBtb250aDogNSxcbiAgICAgIGRheTogMjgsXG4gICAgICB5ZWFyOiAyMDIxLFxuICAgICAgaG91cjogMTMsXG4gICAgICBtaW51dGU6IDUyLFxuICAgICAgYW1wbTogJ3BtJyxcbiAgICB9O1xuICAgIHRoaXMuaXNQcmVzZW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzVGltZVBvcG92ZXJPcGVuID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbG9yIHRvIHVzZSBmcm9tIHlvdXIgYXBwbGljYXRpb24ncyBjb2xvciBwYWxldHRlLlxuICAgICAqIERlZmF1bHQgb3B0aW9ucyBhcmU6IGBcInByaW1hcnlcImAsIGBcInNlY29uZGFyeVwiYCwgYFwidGVydGlhcnlcImAsIGBcInN1Y2Nlc3NcImAsIGBcIndhcm5pbmdcImAsIGBcImRhbmdlclwiYCwgYFwibGlnaHRcImAsIGBcIm1lZGl1bVwiYCwgYW5kIGBcImRhcmtcImAuXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gY29sb3JzLCBzZWUgW3RoZW1pbmddKC9kb2NzL3RoZW1pbmcvYmFzaWNzKS5cbiAgICAgKi9cbiAgICB0aGlzLmNvbG9yID0gJ3ByaW1hcnknO1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBjb250cm9sLCB3aGljaCBpcyBzdWJtaXR0ZWQgd2l0aCB0aGUgZm9ybSBkYXRhLlxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IHRoaXMuaW5wdXRJZDtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSB1c2VyIGNhbm5vdCBpbnRlcmFjdCB3aXRoIHRoZSBkYXRldGltZS5cbiAgICAgKi9cbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgZGF0ZXRpbWUgYXBwZWFycyBub3JtYWwgYnV0IGlzIG5vdCBpbnRlcmFjdGl2ZS5cbiAgICAgKi9cbiAgICB0aGlzLnJlYWRvbmx5ID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogV2hpY2ggdmFsdWVzIHlvdSB3YW50IHRvIHNlbGVjdC4gYCdkYXRlJ2Agd2lsbCBzaG93XG4gICAgICogYSBjYWxlbmRhciBwaWNrZXIgdG8gc2VsZWN0IHRoZSBtb250aCwgZGF5LCBhbmQgeWVhci4gYCd0aW1lJ2BcbiAgICAgKiB3aWxsIHNob3cgYSB0aW1lIHBpY2tlciB0byBzZWxlY3QgdGhlIGhvdXIsIG1pbnV0ZSwgYW5kIChvcHRpb25hbGx5KVxuICAgICAqIEFNL1BNLiBgJ2RhdGUtdGltZSdgIHdpbGwgc2hvdyB0aGUgZGF0ZSBwaWNrZXIgZmlyc3QgYW5kIHRpbWUgcGlja2VyIHNlY29uZC5cbiAgICAgKiBgJ3RpbWUtZGF0ZSdgIHdpbGwgc2hvdyB0aGUgdGltZSBwaWNrZXIgZmlyc3QgYW5kIGRhdGUgcGlja2VyIHNlY29uZC5cbiAgICAgKi9cbiAgICB0aGlzLnByZXNlbnRhdGlvbiA9ICdkYXRlLXRpbWUnO1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgb24gdGhlIHBpY2tlcidzIGNhbmNlbCBidXR0b24uXG4gICAgICovXG4gICAgdGhpcy5jYW5jZWxUZXh0ID0gJ0NhbmNlbCc7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBvbiB0aGUgcGlja2VyJ3MgXCJEb25lXCIgYnV0dG9uLlxuICAgICAqL1xuICAgIHRoaXMuZG9uZVRleHQgPSAnRG9uZSc7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBvbiB0aGUgcGlja2VyJ3MgXCJDbGVhclwiIGJ1dHRvbi5cbiAgICAgKi9cbiAgICB0aGlzLmNsZWFyVGV4dCA9ICdDbGVhcic7XG4gICAgLyoqXG4gICAgICogVGhlIGxvY2FsZSB0byB1c2UgZm9yIGBpb24tZGF0ZXRpbWVgLiBUaGlzXG4gICAgICogaW1wYWN0cyBtb250aCBhbmQgZGF5IG5hbWUgZm9ybWF0dGluZy5cbiAgICAgKiBUaGUgYCdkZWZhdWx0J2AgdmFsdWUgcmVmZXJzIHRvIHRoZSBkZWZhdWx0XG4gICAgICogbG9jYWxlIHNldCBieSB5b3VyIGRldmljZS5cbiAgICAgKi9cbiAgICB0aGlzLmxvY2FsZSA9ICdkZWZhdWx0JztcbiAgICAvKipcbiAgICAgKiBUaGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrIHRvIHVzZSBmb3IgYGlvbi1kYXRldGltZWAuIFRoZVxuICAgICAqIGRlZmF1bHQgdmFsdWUgaXMgYDBgIGFuZCByZXByZXNlbnRzIFN1bmRheS5cbiAgICAgKi9cbiAgICB0aGlzLmZpcnN0RGF5T2ZXZWVrID0gMDtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIG11bHRpcGxlIGRhdGVzIGNhbiBiZSBzZWxlY3RlZCBhdCBvbmNlLiBPbmx5XG4gICAgICogYXBwbGllcyB0byBgcHJlc2VudGF0aW9uPVwiZGF0ZVwiYCBhbmQgYHByZWZlcldoZWVsPVwiZmFsc2VcImAuXG4gICAgICovXG4gICAgdGhpcy5tdWx0aXBsZSA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgYSBoZWFkZXIgd2lsbCBiZSBzaG93biBhYm92ZSB0aGUgY2FsZW5kYXJcbiAgICAgKiBwaWNrZXIuIFRoaXMgd2lsbCBpbmNsdWRlIGJvdGggdGhlIHNsb3R0ZWQgdGl0bGUsIGFuZFxuICAgICAqIHRoZSBzZWxlY3RlZCBkYXRlLlxuICAgICAqL1xuICAgIHRoaXMuc2hvd0RlZmF1bHRUaXRsZSA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIGRlZmF1bHQgXCJDYW5jZWxcIiBhbmQgXCJPS1wiIGJ1dHRvbnNcbiAgICAgKiB3aWxsIGJlIHJlbmRlcmVkIGF0IHRoZSBib3R0b20gb2YgdGhlIGBpb24tZGF0ZXRpbWVgXG4gICAgICogY29tcG9uZW50LiBEZXZlbG9wZXJzIGNhbiBhbHNvIHVzZSB0aGUgYGJ1dHRvbmAgc2xvdFxuICAgICAqIGlmIHRoZXkgd2FudCB0byBjdXN0b21pemUgdGhlc2UgYnV0dG9ucy4gSWYgY3VzdG9tXG4gICAgICogYnV0dG9ucyBhcmUgc2V0IGluIHRoZSBgYnV0dG9uYCBzbG90IHRoZW4gdGhlXG4gICAgICogZGVmYXVsdCBidXR0b25zIHdpbGwgbm90IGJlIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIHRoaXMuc2hvd0RlZmF1bHRCdXR0b25zID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCBhIFwiQ2xlYXJcIiBidXR0b24gd2lsbCBiZSByZW5kZXJlZCBhbG9uZ3NpZGVcbiAgICAgKiB0aGUgZGVmYXVsdCBcIkNhbmNlbFwiIGFuZCBcIk9LXCIgYnV0dG9ucyBhdCB0aGUgYm90dG9tIG9mIHRoZSBgaW9uLWRhdGV0aW1lYFxuICAgICAqIGNvbXBvbmVudC4gRGV2ZWxvcGVycyBjYW4gYWxzbyB1c2UgdGhlIGBidXR0b25gIHNsb3RcbiAgICAgKiBpZiB0aGV5IHdhbnQgdG8gY3VzdG9taXplIHRoZXNlIGJ1dHRvbnMuIElmIGN1c3RvbVxuICAgICAqIGJ1dHRvbnMgYXJlIHNldCBpbiB0aGUgYGJ1dHRvbmAgc2xvdCB0aGVuIHRoZVxuICAgICAqIGRlZmF1bHQgYnV0dG9ucyB3aWxsIG5vdCBiZSByZW5kZXJlZC5cbiAgICAgKi9cbiAgICB0aGlzLnNob3dDbGVhckJ1dHRvbiA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIGRlZmF1bHQgXCJUaW1lXCIgbGFiZWwgd2lsbCBiZSByZW5kZXJlZFxuICAgICAqIGZvciB0aGUgdGltZSBzZWxlY3RvciBvZiB0aGUgYGlvbi1kYXRldGltZWAgY29tcG9uZW50LlxuICAgICAqIERldmVsb3BlcnMgY2FuIGFsc28gdXNlIHRoZSBgdGltZS1sYWJlbGAgc2xvdFxuICAgICAqIGlmIHRoZXkgd2FudCB0byBjdXN0b21pemUgdGhpcyBsYWJlbC4gSWYgYSBjdXN0b21cbiAgICAgKiBsYWJlbCBpcyBzZXQgaW4gdGhlIGB0aW1lLWxhYmVsYCBzbG90IHRoZW4gdGhlXG4gICAgICogZGVmYXVsdCBsYWJlbCB3aWxsIG5vdCBiZSByZW5kZXJlZC5cbiAgICAgKi9cbiAgICB0aGlzLnNob3dEZWZhdWx0VGltZUxhYmVsID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBJZiBgY292ZXJgLCB0aGUgYGlvbi1kYXRldGltZWAgd2lsbCBleHBhbmQgdG8gY292ZXIgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICAgKiBJZiBgZml4ZWRgLCB0aGUgYGlvbi1kYXRldGltZWAgd2lsbCBoYXZlIGEgZml4ZWQgd2lkdGguXG4gICAgICovXG4gICAgdGhpcy5zaXplID0gJ2ZpeGVkJztcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIGEgd2hlZWwgcGlja2VyIHdpbGwgYmUgcmVuZGVyZWQgaW5zdGVhZCBvZiBhIGNhbGVuZGFyIGdyaWRcbiAgICAgKiB3aGVyZSBwb3NzaWJsZS4gSWYgYGZhbHNlYCwgYSBjYWxlbmRhciBncmlkIHdpbGwgYmUgcmVuZGVyZWQgaW5zdGVhZCBvZlxuICAgICAqIGEgd2hlZWwgcGlja2VyIHdoZXJlIHBvc3NpYmxlLlxuICAgICAqXG4gICAgICogQSB3aGVlbCBwaWNrZXIgY2FuIGJlIHJlbmRlcmVkIGluc3RlYWQgb2YgYSBncmlkIHdoZW4gYHByZXNlbnRhdGlvbmAgaXNcbiAgICAgKiBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6IGAnZGF0ZSdgLCBgJ2RhdGUtdGltZSdgLCBvciBgJ3RpbWUtZGF0ZSdgLlxuICAgICAqXG4gICAgICogQSB3aGVlbCBwaWNrZXIgd2lsbCBhbHdheXMgYmUgcmVuZGVyZWQgcmVnYXJkbGVzcyBvZlxuICAgICAqIHRoZSBgcHJlZmVyV2hlZWxgIHZhbHVlIHdoZW4gYHByZXNlbnRhdGlvbmAgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxuICAgICAqIGAndGltZSdgLCBgJ21vbnRoJ2AsIGAnbW9udGgteWVhcidgLCBvciBgJ3llYXInYC5cbiAgICAgKi9cbiAgICB0aGlzLnByZWZlcldoZWVsID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgRGF0ZXRpbWVQYXJ0IGludGVyZmFjZVxuICAgICAqIHRvIHVzZSB3aGVuIHJlbmRlcmluZyBhbiBpbml0aWFsIHNldCBvZlxuICAgICAqIGRhdGEuIFRoaXMgc2hvdWxkIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYW5cbiAgICAgKiBpbnRlcmZhY2UgaW4gYW4gZW52aXJvbm1lbnQgd2hlcmUgdGhlIGB2YWx1ZWBcbiAgICAgKiBtYXkgbm90IGJlIHNldC4gVGhpcyBmdW5jdGlvbiB3b3Jrc1xuICAgICAqIGJ5IHJldHVybmluZyB0aGUgZmlyc3Qgc2VsZWN0ZWQgZGF0ZSBpblxuICAgICAqIFwiYWN0aXZlUGFydHNDbG9uZVwiIGFuZCB0aGVuIGZhbGxpbmcgYmFjayB0b1xuICAgICAqIHRvZGF5J3MgRGF0ZXRpbWVQYXJ0cyBpZiBubyBhY3RpdmUgZGF0ZSBpcyBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICB0aGlzLmdldERlZmF1bHRQYXJ0ID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyBhY3RpdmVQYXJ0c0Nsb25lLCB0b2RheVBhcnRzIH0gPSB0aGlzO1xuICAgICAgY29uc3QgZmlyc3RQYXJ0ID0gQXJyYXkuaXNBcnJheShhY3RpdmVQYXJ0c0Nsb25lKSA/IGFjdGl2ZVBhcnRzQ2xvbmVbMF0gOiBhY3RpdmVQYXJ0c0Nsb25lO1xuICAgICAgcmV0dXJuIGZpcnN0UGFydCAhPT0gbnVsbCAmJiBmaXJzdFBhcnQgIT09IHZvaWQgMCA/IGZpcnN0UGFydCA6IHRvZGF5UGFydHM7XG4gICAgfTtcbiAgICB0aGlzLmNsb3NlUGFyZW50T3ZlcmxheSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHBvcG92ZXJPck1vZGFsID0gdGhpcy5lbC5jbG9zZXN0KCdpb24tbW9kYWwsIGlvbi1wb3BvdmVyJyk7XG4gICAgICBpZiAocG9wb3Zlck9yTW9kYWwpIHtcbiAgICAgICAgcG9wb3Zlck9yTW9kYWwuZGlzbWlzcygpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zZXRXb3JraW5nUGFydHMgPSAocGFydHMpID0+IHtcbiAgICAgIHRoaXMud29ya2luZ1BhcnRzID0gT2JqZWN0LmFzc2lnbih7fSwgcGFydHMpO1xuICAgIH07XG4gICAgdGhpcy5zZXRBY3RpdmVQYXJ0cyA9IChwYXJ0cywgcmVtb3ZlRGF0ZSA9IGZhbHNlKSA9PiB7XG4gICAgICBjb25zdCB7IG11bHRpcGxlLCBhY3RpdmVQYXJ0c0Nsb25lIH0gPSB0aGlzO1xuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHNldHRpbmcgdGhlIGFjdGl2ZSBwYXJ0cywgaXQgaXMgcG9zc2libGVcbiAgICAgICAqIHRvIHNldCBpbnZhbGlkIGRhdGEuIEZvciBleGFtcGxlLFxuICAgICAgICogd2hlbiB1cGRhdGluZyBKYW51YXJ5IDMxIHRvIEZlYnJ1YXJ5LFxuICAgICAgICogRmVicnVhcnkgMzEgZG9lcyBub3QgZXhpc3QuIEFzIGEgcmVzdWx0XG4gICAgICAgKiB3ZSBuZWVkIHRvIHZhbGlkYXRlIHRoZSBhY3RpdmUgcGFydHMgYW5kXG4gICAgICAgKiBlbnN1cmUgdGhhdCB3ZSBhcmUgb25seSBzZXR0aW5nIHZhbGlkIGRhdGVzLlxuICAgICAgICogQWRkaXRpb25hbGx5LCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgd29ya2luZyBwYXJ0c1xuICAgICAgICogdG9vIGluIHRoZSBldmVudCB0aGF0IHRoZSB2YWxpZGF0ZWQgcGFydHMgYXJlIGRpZmZlcmVudC5cbiAgICAgICAqL1xuICAgICAgY29uc3QgdmFsaWRhdGVkUGFydHMgPSB2YWxpZGF0ZVBhcnRzKHBhcnRzKTtcbiAgICAgIHRoaXMuc2V0V29ya2luZ1BhcnRzKHZhbGlkYXRlZFBhcnRzKTtcbiAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogV2UgcmVhZCBmcm9tIGFjdGl2ZVBhcnRzQ2xvbmUgaGVyZSBiZWNhdXNlIHZhbHVlQ2hhbmdlZCgpIG9ubHkgdXBkYXRlcyB0aGF0LFxuICAgICAgICAgKiBzbyBpdCdzIHRoZSBtb3JlIHJlbGlhYmxlIHNvdXJjZSBvZiB0cnV0aC4gSWYgd2UgcmVhZCBmcm9tIGFjdGl2ZVBhcnRzLCB0aGVuXG4gICAgICAgICAqIGlmIHlvdSBjbGljayBKdWx5IDEsIG1hbnVhbGx5IHNldCB0aGUgdmFsdWUgdG8gSnVseSAyLCBhbmQgdGhlbiBjbGljayBKdWx5IDMsXG4gICAgICAgICAqIHRoZSBuZXcgdmFsdWUgd291bGQgYmUgW0p1bHkgMSwgSnVseSAzXSwgaWdub3JpbmcgdGhlIHZhbHVlIHNldC5cbiAgICAgICAgICpcbiAgICAgICAgICogV2UgY2FuIHRoZW4gcGFzcyB0aGUgbmV3IHZhbHVlIHRvIGFjdGl2ZVBhcnRzIChyYXRoZXIgdGhhbiBhY3RpdmVQYXJ0c0Nsb25lKVxuICAgICAgICAgKiBzaW5jZSB0aGUgY2xvbmUgd2lsbCBiZSB1cGRhdGVkIGF1dG9tYXRpY2FsbHkgYnkgYWN0aXZlUGFydHNDaGFuZ2VkKCkuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhY3RpdmVQYXJ0c0FycmF5ID0gQXJyYXkuaXNBcnJheShhY3RpdmVQYXJ0c0Nsb25lKSA/IGFjdGl2ZVBhcnRzQ2xvbmUgOiBbYWN0aXZlUGFydHNDbG9uZV07XG4gICAgICAgIGlmIChyZW1vdmVEYXRlKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVQYXJ0cyA9IGFjdGl2ZVBhcnRzQXJyYXkuZmlsdGVyKChwKSA9PiAhaXNTYW1lRGF5KHAsIHZhbGlkYXRlZFBhcnRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVQYXJ0cyA9IFsuLi5hY3RpdmVQYXJ0c0FycmF5LCB2YWxpZGF0ZWRQYXJ0c107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmFjdGl2ZVBhcnRzID0gT2JqZWN0LmFzc2lnbih7fSwgdmFsaWRhdGVkUGFydHMpO1xuICAgICAgfVxuICAgICAgY29uc3QgaGFzU2xvdHRlZEJ1dHRvbnMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ1tzbG90PVwiYnV0dG9uc1wiXScpICE9PSBudWxsO1xuICAgICAgaWYgKGhhc1Nsb3R0ZWRCdXR0b25zIHx8IHRoaXMuc2hvd0RlZmF1bHRCdXR0b25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29uZmlybSgpO1xuICAgIH07XG4gICAgdGhpcy5pbml0aWFsaXplS2V5Ym9hcmRMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjYWxlbmRhckJvZHlSZWYgPSB0aGlzLmNhbGVuZGFyQm9keVJlZjtcbiAgICAgIGlmICghY2FsZW5kYXJCb2R5UmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLmVsLnNoYWRvd1Jvb3Q7XG4gICAgICAvKipcbiAgICAgICAqIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgbW9udGhcbiAgICAgICAqIGVsZW1lbnQgd2UgYXJlIGN1cnJlbnRseSB2aWV3aW5nLlxuICAgICAgICovXG4gICAgICBjb25zdCBjdXJyZW50TW9udGggPSBjYWxlbmRhckJvZHlSZWYucXVlcnlTZWxlY3RvcignLmNhbGVuZGFyLW1vbnRoOm50aC1vZi10eXBlKDIpJyk7XG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gZm9jdXNpbmcgdGhlIGNhbGVuZGFyIGJvZHksIHdlIHdhbnQgdG8gcGFzcyBmb2N1c1xuICAgICAgICogdG8gdGhlIHdvcmtpbmcgZGF5LCBidXQgb3RoZXIgZGF5cyBzaG91bGRcbiAgICAgICAqIG9ubHkgYmUgYWNjZXNzaWJsZSB1c2luZyB0aGUgYXJyb3cga2V5cy4gUHJlc3NpbmdcbiAgICAgICAqIFRhYiBzaG91bGQganVtcCBiZXR3ZWVuIGJvZGllcyBvZiBzZWxlY3RhYmxlIGNvbnRlbnQuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGNoZWNrQ2FsZW5kYXJCb2R5Rm9jdXMgPSAoZXYpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCByZWNvcmQgPSBldlswXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGNhbGVuZGFyIGJvZHkgd2FzIGFscmVhZHkgZm9jdXNlZFxuICAgICAgICAgKiB3aGVuIHRoaXMgZmlyZWQgb3IgaWYgdGhlIGNhbGVuZGFyIGJvZHlcbiAgICAgICAgICogaWYgbm90IGN1cnJlbnRseSBmb2N1c2VkLCB3ZSBzaG91bGQgbm90IHJlLWZvY3VzXG4gICAgICAgICAqIHRoZSBpbm5lciBkYXkuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoKChfYSA9IHJlY29yZC5vbGRWYWx1ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluY2x1ZGVzKCdpb24tZm9jdXNlZCcpKSB8fCAhY2FsZW5kYXJCb2R5UmVmLmNsYXNzTGlzdC5jb250YWlucygnaW9uLWZvY3VzZWQnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZvY3VzV29ya2luZ0RheShjdXJyZW50TW9udGgpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IG1vID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2hlY2tDYWxlbmRhckJvZHlGb2N1cyk7XG4gICAgICBtby5vYnNlcnZlKGNhbGVuZGFyQm9keVJlZiwgeyBhdHRyaWJ1dGVGaWx0ZXI6IFsnY2xhc3MnXSwgYXR0cmlidXRlT2xkVmFsdWU6IHRydWUgfSk7XG4gICAgICB0aGlzLmRlc3Ryb3lLZXlib2FyZE1PID0gKCkgPT4ge1xuICAgICAgICBtbyA9PT0gbnVsbCB8fCBtbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbW8uZGlzY29ubmVjdCgpO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogV2UgbXVzdCB1c2Uga2V5ZG93biBub3Qga2V5dXAgYXMgd2Ugd2FudFxuICAgICAgICogdG8gcHJldmVudCBzY3JvbGxpbmcgd2hlbiB1c2luZyB0aGUgYXJyb3cga2V5cy5cbiAgICAgICAqL1xuICAgICAgY2FsZW5kYXJCb2R5UmVmLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXYpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IHJvb3QuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnY2FsZW5kYXItZGF5JykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFydHMgPSBnZXRQYXJ0c0Zyb21DYWxlbmRhckRheShhY3RpdmVFbGVtZW50KTtcbiAgICAgICAgbGV0IHBhcnRzVG9Gb2N1cztcbiAgICAgICAgc3dpdGNoIChldi5rZXkpIHtcbiAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHBhcnRzVG9Gb2N1cyA9IGdldE5leHRXZWVrKHBhcnRzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHBhcnRzVG9Gb2N1cyA9IGdldFByZXZpb3VzV2VlayhwYXJ0cyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBwYXJ0c1RvRm9jdXMgPSBnZXROZXh0RGF5KHBhcnRzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcGFydHNUb0ZvY3VzID0gZ2V0UHJldmlvdXNEYXkocGFydHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcGFydHNUb0ZvY3VzID0gZ2V0U3RhcnRPZldlZWsocGFydHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRW5kJzpcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBwYXJ0c1RvRm9jdXMgPSBnZXRFbmRPZldlZWsocGFydHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnUGFnZVVwJzpcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBwYXJ0c1RvRm9jdXMgPSBldi5zaGlmdEtleSA/IGdldFByZXZpb3VzWWVhcihwYXJ0cykgOiBnZXRQcmV2aW91c01vbnRoKHBhcnRzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1BhZ2VEb3duJzpcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBwYXJ0c1RvRm9jdXMgPSBldi5zaGlmdEtleSA/IGdldE5leHRZZWFyKHBhcnRzKSA6IGdldE5leHRNb250aChwYXJ0cyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBEbyBub3QgcHJldmVudERlZmF1bHQgaGVyZVxuICAgICAgICAgICAqIGFzIHdlIGRvIG5vdCB3YW50IHRvIG92ZXJyaWRlIG90aGVyXG4gICAgICAgICAgICogYnJvd3NlciBkZWZhdWx0cyBzdWNoIGFzIHByZXNzaW5nIEVudGVyL1NwYWNlXG4gICAgICAgICAgICogdG8gc2VsZWN0IGEgZGF5LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSBkYXkgd2Ugd2FudCB0byBtb3ZlIGZvY3VzIHRvIGlzXG4gICAgICAgICAqIGRpc2FibGVkLCBkbyBub3QgZG8gYW55dGhpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNEYXlEaXNhYmxlZChwYXJ0c1RvRm9jdXMsIHRoaXMubWluUGFydHMsIHRoaXMubWF4UGFydHMpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0V29ya2luZ1BhcnRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy53b3JraW5nUGFydHMpLCBwYXJ0c1RvRm9jdXMpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmUgdmlldyBhIGNoYW5jZSB0byByZS1yZW5kZXJcbiAgICAgICAgICogdGhlbiBtb3ZlIGZvY3VzIHRvIHRoZSBuZXcgd29ya2luZyBkYXlcbiAgICAgICAgICovXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmZvY3VzV29ya2luZ0RheShjdXJyZW50TW9udGgpKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5mb2N1c1dvcmtpbmdEYXkgPSAoY3VycmVudE1vbnRoKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgbnVtYmVyIG9mIHBhZGRpbmcgZGF5cyBzb1xuICAgICAgICogd2Uga25vdyBob3cgbXVjaCB0byBvZmZzZXQgb3VyIG5leHQgc2VsZWN0b3IgYnlcbiAgICAgICAqIHRvIGdyYWIgdGhlIGNvcnJlY3QgY2FsZW5kYXktZGF5IGVsZW1lbnQuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHBhZGRpbmcgPSBjdXJyZW50TW9udGgucXVlcnlTZWxlY3RvckFsbCgnLmNhbGVuZGFyLWRheS1wYWRkaW5nJyk7XG4gICAgICBjb25zdCB7IGRheSB9ID0gdGhpcy53b3JraW5nUGFydHM7XG4gICAgICBpZiAoZGF5ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogR2V0IHRoZSBjYWxlbmRhciBkYXkgZWxlbWVudFxuICAgICAgICogYW5kIGZvY3VzIGl0LlxuICAgICAgICovXG4gICAgICBjb25zdCBkYXlFbCA9IGN1cnJlbnRNb250aC5xdWVyeVNlbGVjdG9yKGAuY2FsZW5kYXItZGF5Om50aC1vZi10eXBlKCR7cGFkZGluZy5sZW5ndGggKyBkYXl9KWApO1xuICAgICAgaWYgKGRheUVsKSB7XG4gICAgICAgIGRheUVsLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnByb2Nlc3NNaW5QYXJ0cyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgbWluLCB0b2RheVBhcnRzIH0gPSB0aGlzO1xuICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMubWluUGFydHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubWluUGFydHMgPSBwYXJzZU1pblBhcnRzKG1pbiwgdG9kYXlQYXJ0cyk7XG4gICAgfTtcbiAgICB0aGlzLnByb2Nlc3NNYXhQYXJ0cyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgbWF4LCB0b2RheVBhcnRzIH0gPSB0aGlzO1xuICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMubWF4UGFydHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubWF4UGFydHMgPSBwYXJzZU1heFBhcnRzKG1heCwgdG9kYXlQYXJ0cyk7XG4gICAgfTtcbiAgICB0aGlzLmluaXRpYWxpemVDYWxlbmRhckxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgY29uc3QgY2FsZW5kYXJCb2R5UmVmID0gdGhpcy5jYWxlbmRhckJvZHlSZWY7XG4gICAgICBpZiAoIWNhbGVuZGFyQm9keVJlZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBvbmx5IHJlbmRlciAzXG4gICAgICAgKiBtb250aHMgYXQgYSB0aW1lOiBUaGUgY3VycmVudCBtb250aCwgdGhlIHByZXZpb3VzXG4gICAgICAgKiBtb250aCwgYW5kIHRoZSBuZXh0IG1vbnRoLiBXZSBoYXZlIGEgc2Nyb2xsIGxpc3RlbmVyXG4gICAgICAgKiBvbiB0aGUgY2FsZW5kYXIgYm9keSB0byBhcHBlbmQvcHJlcGVuZCBuZXcgbW9udGhzLlxuICAgICAgICpcbiAgICAgICAqIFdlIGNhbiBkbyB0aGlzIGJlY2F1c2UgU3RlbmNpbCBpcyBzbWFydCBlbm91Z2ggdG8gbm90XG4gICAgICAgKiByZS1jcmVhdGUgdGhlIC5jYWxlbmRhci1tb250aCBjb250YWluZXJzLCBidXQgcmF0aGVyXG4gICAgICAgKiB1cGRhdGUgdGhlIGNvbnRlbnQgd2l0aGluIHRob3NlIGNvbnRhaW5lcnMuXG4gICAgICAgKlxuICAgICAgICogQXMgYW4gYWRkZWQgYm9udXMsIFdlYktpdCBoYXMgc29tZSB0cm91YmxlcyB3aXRoXG4gICAgICAgKiBzY3JvbGwtc25hcC1zdG9wOiBhbHdheXMsIHNvIG5vdCByZW5kZXJpbmcgYWxsIG9mXG4gICAgICAgKiB0aGUgbW9udGhzIGluIGEgcm93IGFsbG93cyB1cyB0byBtb3N0bHkgc2lkZXN0ZXBcbiAgICAgICAqIHRoYXQgaXNzdWUuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IG1vbnRocyA9IGNhbGVuZGFyQm9keVJlZi5xdWVyeVNlbGVjdG9yQWxsKCcuY2FsZW5kYXItbW9udGgnKTtcbiAgICAgIGNvbnN0IHN0YXJ0TW9udGggPSBtb250aHNbMF07XG4gICAgICBjb25zdCB3b3JraW5nTW9udGggPSBtb250aHNbMV07XG4gICAgICBjb25zdCBlbmRNb250aCA9IG1vbnRoc1syXTtcbiAgICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgICAgY29uc3QgbmVlZHNpT1NSdWJiZXJCYW5kRml4ID0gbW9kZSA9PT0gJ2lvcycgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMTtcbiAgICAgIC8qKlxuICAgICAgICogQmVmb3JlIHNldHRpbmcgdXAgdGhlIHNjcm9sbCBsaXN0ZW5lcixcbiAgICAgICAqIHNjcm9sbCB0aGUgbWlkZGxlIG1vbnRoIGludG8gdmlldy5cbiAgICAgICAqIHNjcm9sbEludG9WaWV3KCkgd2lsbCBzY3JvbGwgZW50aXJlIHBhZ2VcbiAgICAgICAqIGlmIGVsZW1lbnQgaXMgbm90IGluIHZpZXdwb3J0LiBVc2Ugc2Nyb2xsTGVmdCBpbnN0ZWFkLlxuICAgICAgICovXG4gICAgICB3cml0ZVRhc2soKCkgPT4ge1xuICAgICAgICBjYWxlbmRhckJvZHlSZWYuc2Nyb2xsTGVmdCA9IHN0YXJ0TW9udGguY2xpZW50V2lkdGggKiAoaXNSVEwodGhpcy5lbCkgPyAtMSA6IDEpO1xuICAgICAgICBjb25zdCBnZXRDaGFuZ2VkTW9udGggPSAocGFydHMpID0+IHtcbiAgICAgICAgICBjb25zdCBib3ggPSBjYWxlbmRhckJvZHlSZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuZWwuc2hhZG93Um9vdDtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBHZXQgdGhlIGVsZW1lbnQgdGhhdCBpcyBpbiB0aGUgY2VudGVyIG9mIHRoZSBjYWxlbmRhciBib2R5LlxuICAgICAgICAgICAqIFRoaXMgd2lsbCBiZSBhbiBlbGVtZW50IGluc2lkZSBvZiB0aGUgYWN0aXZlIG1vbnRoLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0IGVsZW1lbnRBdENlbnRlciA9IHJvb3QuZWxlbWVudEZyb21Qb2ludChib3gueCArIGJveC53aWR0aCAvIDIsIGJveC55ICsgYm94LmhlaWdodCAvIDIpO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIElmIHRoZXJlIGlzIG5vIGVsZW1lbnQgdGhlbiB0aGVcbiAgICAgICAgICAgKiBjb21wb25lbnQgbWF5IGJlIHJlLXJlbmRlcmluZyBvbiBhIHNsb3cgZGV2aWNlLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGlmICghZWxlbWVudEF0Q2VudGVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IG1vbnRoID0gZWxlbWVudEF0Q2VudGVyLmNsb3Nlc3QoJy5jYWxlbmRhci1tb250aCcpO1xuICAgICAgICAgIGlmICghbW9udGgpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIGVkZ2Ugb2YgdGhlIG1vbnRoIG11c3QgYmUgbGluZWQgdXAgd2l0aFxuICAgICAgICAgICAqIHRoZSBlZGdlIG9mIHRoZSBjYWxlbmRhciBib2R5IGluIG9yZGVyIGZvclxuICAgICAgICAgICAqIHRoZSBjb21wb25lbnQgdG8gdXBkYXRlLiBPdGhlcndpc2UsIGl0XG4gICAgICAgICAgICogbWF5IGJlIHRoZSBjYXNlIHRoYXQgdGhlIHVzZXIgaGFzIHBhdXNlZCB0aGVpclxuICAgICAgICAgICAqIHN3aXBlIG9yIHRoZSBicm93c2VyIGhhcyBub3QgZmluaXNoZWQgc25hcHBpbmcgeWV0LlxuICAgICAgICAgICAqIFJhdGhlciB0aGFuIGNoZWNrIGlmIHRoZSB4IHZhbHVlcyBhcmUgZXF1YWwsXG4gICAgICAgICAgICogd2UgZ2l2ZSBpdCBhIHRvbGVyYW5jZSBvZiAycHggdG8gYWNjb3VudCBmb3JcbiAgICAgICAgICAgKiBzdWIgcGl4ZWwgcmVuZGVyaW5nLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0IG1vbnRoQm94ID0gbW9udGguZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKG1vbnRoQm94LnggLSBib3gueCkgPiAyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZyb20gaGVyZSwgd2UgY2FuIGRldGVybWluZSBpZiB0aGUgc3RhcnRcbiAgICAgICAgICAgKiBtb250aCBvciB0aGUgZW5kIG1vbnRoIHdhcyBzY3JvbGxlZCBpbnRvIHZpZXcuXG4gICAgICAgICAgICogSWYgbm8gbW9udGggd2FzIGNoYW5nZWQsIHRoZW4gd2UgY2FuIHJldHVybiBmcm9tXG4gICAgICAgICAgICogdGhlIHNjcm9sbCBjYWxsYmFjayBlYXJseS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpZiAobW9udGggPT09IHN0YXJ0TW9udGgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRQcmV2aW91c01vbnRoKHBhcnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAobW9udGggPT09IGVuZE1vbnRoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmV4dE1vbnRoKHBhcnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB1cGRhdGVBY3RpdmVNb250aCA9ICgpID0+IHtcbiAgICAgICAgICBpZiAobmVlZHNpT1NSdWJiZXJCYW5kRml4KSB7XG4gICAgICAgICAgICBjYWxlbmRhckJvZHlSZWYuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3BvaW50ZXItZXZlbnRzJyk7XG4gICAgICAgICAgICBhcHBsaWVkaU9TUnViYmVyQmFuZEZpeCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBJZiB0aGUgbW9udGggZGlkIG5vdCBjaGFuZ2VcbiAgICAgICAgICAgKiB0aGVuIHdlIGNhbiByZXR1cm4gZWFybHkuXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3QgbmV3RGF0ZSA9IGdldENoYW5nZWRNb250aCh0aGlzLndvcmtpbmdQYXJ0cyk7XG4gICAgICAgICAgaWYgKCFuZXdEYXRlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IHsgbW9udGgsIGRheSwgeWVhciB9ID0gbmV3RGF0ZTtcbiAgICAgICAgICBpZiAoaXNNb250aERpc2FibGVkKHsgbW9udGgsIHllYXIsIGRheTogbnVsbCB9LCB7XG4gICAgICAgICAgICBtaW5QYXJ0czogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLm1pblBhcnRzKSwgeyBkYXk6IG51bGwgfSksXG4gICAgICAgICAgICBtYXhQYXJ0czogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLm1heFBhcnRzKSwgeyBkYXk6IG51bGwgfSksXG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogUHJldmVudCBzY3JvbGxpbmcgZm9yIG90aGVyIGJyb3dzZXJzXG4gICAgICAgICAgICogdG8gZ2l2ZSB0aGUgRE9NIHRpbWUgdG8gdXBkYXRlIGFuZCB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICogdGltZSB0byBwcm9wZXJseSBzbmFwLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNhbGVuZGFyQm9keVJlZi5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVXNlIGEgd3JpdGVUYXNrIGhlcmUgdG8gZW5zdXJlXG4gICAgICAgICAgICogdGhhdCB0aGUgc3RhdGUgaXMgdXBkYXRlZCBhbmQgdGhlXG4gICAgICAgICAgICogY29ycmVjdCBtb250aCBpcyBzY3JvbGxlZCBpbnRvIHZpZXdcbiAgICAgICAgICAgKiBpbiB0aGUgc2FtZSBmcmFtZS4gVGhpcyBpcyBub3RcbiAgICAgICAgICAgKiB0eXBpY2FsbHkgYSBwcm9ibGVtIG9uIG5ld2VyIGRldmljZXNcbiAgICAgICAgICAgKiBidXQgb2xkZXIvc2xvd2VyIGRldmljZSBtYXkgaGF2ZSBhIGZsaWNrZXJcbiAgICAgICAgICAgKiBpZiB3ZSBkaWQgbm90IGRvIHRoaXMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgd3JpdGVUYXNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0V29ya2luZ1BhcnRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy53b3JraW5nUGFydHMpLCB7IG1vbnRoLCBkYXk6IGRheSwgeWVhciB9KSk7XG4gICAgICAgICAgICBjYWxlbmRhckJvZHlSZWYuc2Nyb2xsTGVmdCA9IHdvcmtpbmdNb250aC5jbGllbnRXaWR0aCAqIChpc1JUTCh0aGlzLmVsKSA/IC0xIDogMSk7XG4gICAgICAgICAgICBjYWxlbmRhckJvZHlSZWYuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ292ZXJmbG93Jyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHRoZSBjb250YWluZXIgZmluaXNoZXMgc2Nyb2xsaW5nIHdlXG4gICAgICAgICAqIG5lZWQgdG8gdXBkYXRlIHRoZSBET00gd2l0aCB0aGUgc2VsZWN0ZWQgbW9udGguXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgc2Nyb2xsVGltZW91dDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIGRvIG5vdCB3YW50IHRvIGF0dGVtcHQgdG8gc2V0IHBvaW50ZXItZXZlbnRzXG4gICAgICAgICAqIG11bHRpcGxlIHRpbWVzIHdpdGhpbiBhIHNpbmdsZSBzd2lwZSBnZXN0dXJlIGFzXG4gICAgICAgICAqIHRoYXQgYWRkcyB1bm5lY2Vzc2FyeSB3b3JrIHRvIHRoZSBtYWluIHRocmVhZC5cbiAgICAgICAgICovXG4gICAgICAgIGxldCBhcHBsaWVkaU9TUnViYmVyQmFuZEZpeCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBzY3JvbGxDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoc2Nyb2xsVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbFRpbWVvdXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBPbiBpT1MgaXQgaXMgcG9zc2libGUgdG8gcXVpY2tseSBydWJiZXIgYmFuZFxuICAgICAgICAgICAqIHRoZSBzY3JvbGwgYXJlYSBiZWZvcmUgdGhlIHNjcm9sbCB0aW1lb3V0IGhhcyBmaXJlZC5cbiAgICAgICAgICAgKiBUaGlzIHJlc3VsdHMgaW4gdXNlcnMgcmVhY2hpbmcgdGhlIGVuZCBvZiB0aGUgc2Nyb2xsYWJsZVxuICAgICAgICAgICAqIGNvbnRhaW5lciBiZWZvcmUgdGhlIERPTSBoYXMgdXBkYXRlZC5cbiAgICAgICAgICAgKiBCeSBzZXR0aW5nIGBwb2ludGVyLWV2ZW50czogbm9uZWAgd2UgY2FuIGVuc3VyZSB0aGF0XG4gICAgICAgICAgICogc3Vic2VxdWVudCBzd2lwZXMgZG8gbm90IGhhcHBlbiB3aGlsZSB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICogaXMgc25hcHBpbmcuXG4gICAgICAgICAgICovXG4gICAgICAgICAgaWYgKCFhcHBsaWVkaU9TUnViYmVyQmFuZEZpeCAmJiBuZWVkc2lPU1J1YmJlckJhbmRGaXgpIHtcbiAgICAgICAgICAgIGNhbGVuZGFyQm9keVJlZi5zdHlsZS5zZXRQcm9wZXJ0eSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpO1xuICAgICAgICAgICAgYXBwbGllZGlPU1J1YmJlckJhbmRGaXggPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBXYWl0IH4zIGZyYW1lc1xuICAgICAgICAgIHNjcm9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KHVwZGF0ZUFjdGl2ZU1vbnRoLCA1MCk7XG4gICAgICAgIH07XG4gICAgICAgIGNhbGVuZGFyQm9keVJlZi5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxDYWxsYmFjayk7XG4gICAgICAgIHRoaXMuZGVzdHJveUNhbGVuZGFyTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgICAgY2FsZW5kYXJCb2R5UmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbENhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYW4gdXAgYWxsIGxpc3RlbmVycyBleGNlcHQgZm9yIHRoZSBvdmVybGF5XG4gICAgICogbGlzdGVuZXIuIFRoaXMgaXMgc28gdGhhdCB3ZSBjYW4gcmUtY3JlYXRlIHRoZSBsaXN0ZW5lcnNcbiAgICAgKiBpZiB0aGUgZGF0ZXRpbWUgaGFzIGJlZW4gaGlkZGVuL3ByZXNlbnRlZCBieSBhIG1vZGFsIG9yIHBvcG92ZXIuXG4gICAgICovXG4gICAgdGhpcy5kZXN0cm95SW50ZXJhY3Rpb25MaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IGRlc3Ryb3lDYWxlbmRhckxpc3RlbmVyLCBkZXN0cm95S2V5Ym9hcmRNTyB9ID0gdGhpcztcbiAgICAgIGlmIChkZXN0cm95Q2FsZW5kYXJMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlc3Ryb3lDYWxlbmRhckxpc3RlbmVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVzdHJveUtleWJvYXJkTU8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZXN0cm95S2V5Ym9hcmRNTygpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5wcm9jZXNzVmFsdWUgPSAodmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGhhc1ZhbHVlID0gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgIGxldCB2YWx1ZVRvUHJvY2VzcyA9IHBhcnNlRGF0ZSh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiBnZXRUb2RheSgpKTtcbiAgICAgIGNvbnN0IHsgbWluUGFydHMsIG1heFBhcnRzLCBtdWx0aXBsZSB9ID0gdGhpcztcbiAgICAgIGlmICghbXVsdGlwbGUgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlWzBdO1xuICAgICAgICB2YWx1ZVRvUHJvY2VzcyA9IHZhbHVlVG9Qcm9jZXNzWzBdO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBEYXRldGltZSBzaG91bGQgb25seSB3YXJuIG9mIG91dCBvZiBib3VuZHMgdmFsdWVzXG4gICAgICAgKiBpZiBzZXQgYnkgdGhlIHVzZXIuIElmIHRoZSBgdmFsdWVgIGlzIHVuZGVmaW5lZCxcbiAgICAgICAqIHdlIHdpbGwgZGVmYXVsdCB0byB0b2RheSdzIGRhdGUgd2hpY2ggbWF5IGJlIG91dFxuICAgICAgICogb2YgYm91bmRzLiBJbiB0aGlzIGNhc2UsIHRoZSB3YXJuaW5nIG1ha2VzIGl0IGxvb2tcbiAgICAgICAqIGxpa2UgdGhlIGRldmVsb3BlciBkaWQgc29tZXRoaW5nIHdyb25nIHdoaWNoIGlzXG4gICAgICAgKiBub3QgdHJ1ZS5cbiAgICAgICAqL1xuICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgIHdhcm5JZlZhbHVlT3V0T2ZCb3VuZHModmFsdWVUb1Byb2Nlc3MsIG1pblBhcnRzLCBtYXhQYXJ0cyk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIElmIHRoZXJlIGFyZSBtdWx0aXBsZSB2YWx1ZXMsIHBpY2sgYW4gYXJiaXRyYXJ5IG9uZSB0byBjbGFtcCB0by4gVGhpcyB3YXksXG4gICAgICAgKiBpZiB0aGUgdmFsdWVzIGFyZSBhY3Jvc3MgbW9udGhzLCB3ZSBhbHdheXMgc2hvdyBhdCBsZWFzdCBvbmUgb2YgdGhlbS4gTm90ZVxuICAgICAgICogdGhhdCB0aGUgdmFsdWVzIGRvbid0IG5lY2Vzc2FyaWx5IGhhdmUgdG8gYmUgaW4gb3JkZXIuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHNpbmdsZVZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZVRvUHJvY2VzcykgPyB2YWx1ZVRvUHJvY2Vzc1swXSA6IHZhbHVlVG9Qcm9jZXNzO1xuICAgICAgY29uc3QgeyBtb250aCwgZGF5LCB5ZWFyLCBob3VyLCBtaW51dGUsIHR6T2Zmc2V0IH0gPSBjbGFtcERhdGUoc2luZ2xlVmFsdWUsIG1pblBhcnRzLCBtYXhQYXJ0cyk7XG4gICAgICBjb25zdCBhbXBtID0gcGFyc2VBbVBtKGhvdXIpO1xuICAgICAgdGhpcy5zZXRXb3JraW5nUGFydHMoe1xuICAgICAgICBtb250aCxcbiAgICAgICAgZGF5LFxuICAgICAgICB5ZWFyLFxuICAgICAgICBob3VyLFxuICAgICAgICBtaW51dGUsXG4gICAgICAgIHR6T2Zmc2V0LFxuICAgICAgICBhbXBtLFxuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIFNpbmNlIGBhY3RpdmVQYXJ0c2AgaW5kaWNhdGVzIGEgdmFsdWUgdGhhdFxuICAgICAgICogYmVlbiBleHBsaWNpdGx5IHNlbGVjdGVkIGVpdGhlciBieSB0aGVcbiAgICAgICAqIHVzZXIgb3IgdGhlIGFwcCwgb25seSB1cGRhdGUgYGFjdGl2ZVBhcnRzYFxuICAgICAgICogaWYgdGhlIGB2YWx1ZWAgcHJvcGVydHkgaXMgc2V0LlxuICAgICAgICovXG4gICAgICBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVUb1Byb2Nlc3MpKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVQYXJ0cyA9IFsuLi52YWx1ZVRvUHJvY2Vzc107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVQYXJ0cyA9IHtcbiAgICAgICAgICAgIG1vbnRoLFxuICAgICAgICAgICAgZGF5LFxuICAgICAgICAgICAgeWVhcixcbiAgICAgICAgICAgIGhvdXIsXG4gICAgICAgICAgICBtaW51dGUsXG4gICAgICAgICAgICB0ek9mZnNldCxcbiAgICAgICAgICAgIGFtcG0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vbkZvY3VzID0gKCkgPT4ge1xuICAgICAgdGhpcy5pb25Gb2N1cy5lbWl0KCk7XG4gICAgfTtcbiAgICB0aGlzLm9uQmx1ciA9ICgpID0+IHtcbiAgICAgIHRoaXMuaW9uQmx1ci5lbWl0KCk7XG4gICAgfTtcbiAgICB0aGlzLmhhc1ZhbHVlID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUgIT0gbnVsbCAmJiB0aGlzLnZhbHVlICE9PSAnJztcbiAgICB9O1xuICAgIHRoaXMubmV4dE1vbnRoID0gKCkgPT4ge1xuICAgICAgY29uc3QgY2FsZW5kYXJCb2R5UmVmID0gdGhpcy5jYWxlbmRhckJvZHlSZWY7XG4gICAgICBpZiAoIWNhbGVuZGFyQm9keVJlZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBuZXh0TW9udGggPSBjYWxlbmRhckJvZHlSZWYucXVlcnlTZWxlY3RvcignLmNhbGVuZGFyLW1vbnRoOmxhc3Qtb2YtdHlwZScpO1xuICAgICAgaWYgKCFuZXh0TW9udGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgbGVmdCA9IG5leHRNb250aC5vZmZzZXRXaWR0aCAqIDI7XG4gICAgICBjYWxlbmRhckJvZHlSZWYuc2Nyb2xsVG8oe1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IGxlZnQgKiAoaXNSVEwodGhpcy5lbCkgPyAtMSA6IDEpLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHRoaXMucHJldk1vbnRoID0gKCkgPT4ge1xuICAgICAgY29uc3QgY2FsZW5kYXJCb2R5UmVmID0gdGhpcy5jYWxlbmRhckJvZHlSZWY7XG4gICAgICBpZiAoIWNhbGVuZGFyQm9keVJlZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwcmV2TW9udGggPSBjYWxlbmRhckJvZHlSZWYucXVlcnlTZWxlY3RvcignLmNhbGVuZGFyLW1vbnRoOmZpcnN0LW9mLXR5cGUnKTtcbiAgICAgIGlmICghcHJldk1vbnRoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhbGVuZGFyQm9keVJlZi5zY3JvbGxUbyh7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgfSk7XG4gICAgfTtcbiAgICB0aGlzLnRvZ2dsZU1vbnRoQW5kWWVhclZpZXcgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNob3dNb250aEFuZFllYXIgPSAhdGhpcy5zaG93TW9udGhBbmRZZWFyO1xuICAgIH07XG4gIH1cbiAgZGlzYWJsZWRDaGFuZ2VkKCkge1xuICAgIHRoaXMuZW1pdFN0eWxlKCk7XG4gIH1cbiAgbWluQ2hhbmdlZCgpIHtcbiAgICB0aGlzLnByb2Nlc3NNaW5QYXJ0cygpO1xuICB9XG4gIG1heENoYW5nZWQoKSB7XG4gICAgdGhpcy5wcm9jZXNzTWF4UGFydHMoKTtcbiAgfVxuICB5ZWFyVmFsdWVzQ2hhbmdlZCgpIHtcbiAgICB0aGlzLnBhcnNlZFllYXJWYWx1ZXMgPSBjb252ZXJ0VG9BcnJheU9mTnVtYmVycyh0aGlzLnllYXJWYWx1ZXMpO1xuICB9XG4gIG1vbnRoVmFsdWVzQ2hhbmdlZCgpIHtcbiAgICB0aGlzLnBhcnNlZE1vbnRoVmFsdWVzID0gY29udmVydFRvQXJyYXlPZk51bWJlcnModGhpcy5tb250aFZhbHVlcyk7XG4gIH1cbiAgZGF5VmFsdWVzQ2hhbmdlZCgpIHtcbiAgICB0aGlzLnBhcnNlZERheVZhbHVlcyA9IGNvbnZlcnRUb0FycmF5T2ZOdW1iZXJzKHRoaXMuZGF5VmFsdWVzKTtcbiAgfVxuICBob3VyVmFsdWVzQ2hhbmdlZCgpIHtcbiAgICB0aGlzLnBhcnNlZEhvdXJWYWx1ZXMgPSBjb252ZXJ0VG9BcnJheU9mTnVtYmVycyh0aGlzLmhvdXJWYWx1ZXMpO1xuICB9XG4gIG1pbnV0ZVZhbHVlc0NoYW5nZWQoKSB7XG4gICAgdGhpcy5wYXJzZWRNaW51dGVWYWx1ZXMgPSBjb252ZXJ0VG9BcnJheU9mTnVtYmVycyh0aGlzLm1pbnV0ZVZhbHVlcyk7XG4gIH1cbiAgYWN0aXZlUGFydHNDaGFuZ2VkKCkge1xuICAgIHRoaXMuYWN0aXZlUGFydHNDbG9uZSA9IHRoaXMuYWN0aXZlUGFydHM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZGF0ZXRpbWUgdmFsdWUgd2hlbiB0aGUgdmFsdWUgY2hhbmdlc1xuICAgKi9cbiAgdmFsdWVDaGFuZ2VkKCkge1xuICAgIGNvbnN0IHsgdmFsdWUsIG1pblBhcnRzLCBtYXhQYXJ0cywgd29ya2luZ1BhcnRzLCBtdWx0aXBsZSB9ID0gdGhpcztcbiAgICBpZiAodGhpcy5oYXNWYWx1ZSgpKSB7XG4gICAgICBpZiAoIW11bHRpcGxlICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZVswXTtcbiAgICAgICAgcmV0dXJuOyAvLyBzZXR0aW5nIHRoaXMudmFsdWUgd2lsbCB0cmlnZ2VyIHJlLXJ1biBvZiB0aGlzIGZ1bmN0aW9uXG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIENsb25lcyB0aGUgdmFsdWUgb2YgdGhlIGBhY3RpdmVQYXJ0c2AgdG8gdGhlIHByaXZhdGUgY2xvbmUsIHRvIHVwZGF0ZVxuICAgICAgICogdGhlIGRhdGUgZGlzcGxheSBvbiB0aGUgY3VycmVudCByZW5kZXIgY3ljbGUgd2l0aG91dCBjYXVzaW5nIGFub3RoZXIgcmVuZGVyLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgYWxsb3dzIHVzIHRvIHVwZGF0ZSB0aGUgY3VycmVudCB2YWx1ZSdzIGRhdGUvdGltZSBkaXNwbGF5IHdpdGhvdXRcbiAgICAgICAqIHJlZm9jdXNpbmcgb3Igc2hpZnRpbmcgdGhlIHVzZXIncyBkaXNwbGF5IChsZWF2ZXMgdGhlIHVzZXIgaW4gcGxhY2UpLlxuICAgICAgICovXG4gICAgICBjb25zdCB2YWx1ZURhdGVQYXJ0cyA9IHBhcnNlRGF0ZSh2YWx1ZSk7XG4gICAgICBpZiAodmFsdWVEYXRlUGFydHMpIHtcbiAgICAgICAgd2FybklmVmFsdWVPdXRPZkJvdW5kcyh2YWx1ZURhdGVQYXJ0cywgbWluUGFydHMsIG1heFBhcnRzKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVEYXRlUGFydHMpKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVQYXJ0c0Nsb25lID0gWy4uLnZhbHVlRGF0ZVBhcnRzXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7IG1vbnRoLCBkYXksIHllYXIsIGhvdXIsIG1pbnV0ZSB9ID0gdmFsdWVEYXRlUGFydHM7XG4gICAgICAgICAgY29uc3QgYW1wbSA9IGhvdXIgIT0gbnVsbCA/IChob3VyID49IDEyID8gJ3BtJyA6ICdhbScpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHRoaXMuYWN0aXZlUGFydHNDbG9uZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5hY3RpdmVQYXJ0cyksIHsgbW9udGgsXG4gICAgICAgICAgICBkYXksXG4gICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgaG91cixcbiAgICAgICAgICAgIG1pbnV0ZSxcbiAgICAgICAgICAgIGFtcG0gfSk7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIHdvcmtpbmcgcGFydHMgYW0vcG0gdmFsdWUgbXVzdCBiZSB1cGRhdGVkIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMsIHRvXG4gICAgICAgICAgICogZW5zdXJlIHRoZSB0aW1lIHBpY2tlciBob3VyIGNvbHVtbiB2YWx1ZXMgYXJlIGdlbmVyYXRlZCBjb3JyZWN0bHkuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBOb3RlIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBkbyB0aGlzIGlmIHZhbHVlRGF0ZVBhcnRzIGlzIGFuIGFycmF5LCBzaW5jZVxuICAgICAgICAgICAqIG11bHRpcGxlPVwidHJ1ZVwiIGRvZXMgbm90IGFwcGx5IHRvIHRpbWUgcGlja2Vycy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0aGlzLnNldFdvcmtpbmdQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHdvcmtpbmdQYXJ0cyksIHsgYW1wbSB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBwcmludElvbldhcm5pbmcoYFVuYWJsZSB0byBwYXJzZSBkYXRlIHN0cmluZzogJHt2YWx1ZX0uIFBsZWFzZSBwcm92aWRlIGEgdmFsaWQgSVNPIDg2MDEgZGF0ZXRpbWUgc3RyaW5nLmApO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmVtaXRTdHlsZSgpO1xuICAgIHRoaXMuaW9uQ2hhbmdlLmVtaXQoeyB2YWx1ZSB9KTtcbiAgfVxuICAvKipcbiAgICogQ29uZmlybXMgdGhlIHNlbGVjdGVkIGRhdGV0aW1lIHZhbHVlLCB1cGRhdGVzIHRoZVxuICAgKiBgdmFsdWVgIHByb3BlcnR5LCBhbmQgb3B0aW9uYWxseSBjbG9zZXMgdGhlIHBvcG92ZXJcbiAgICogb3IgbW9kYWwgdGhhdCB0aGUgZGF0ZXRpbWUgd2FzIHByZXNlbnRlZCBpbi5cbiAgICovXG4gIGFzeW5jIGNvbmZpcm0oY2xvc2VPdmVybGF5ID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IGlzQ2FsZW5kYXJQaWNrZXIsIGFjdGl2ZVBhcnRzIH0gPSB0aGlzO1xuICAgIC8qKlxuICAgICAqIFdlIG9ubHkgdXBkYXRlIHRoZSB2YWx1ZSBpZiB0aGUgcHJlc2VudGF0aW9uIGlzIG5vdCBhIGNhbGVuZGFyIHBpY2tlci5cbiAgICAgKi9cbiAgICBpZiAoYWN0aXZlUGFydHMgIT09IHVuZGVmaW5lZCB8fCAhaXNDYWxlbmRhclBpY2tlcikge1xuICAgICAgY29uc3QgYWN0aXZlUGFydHNJc0FycmF5ID0gQXJyYXkuaXNBcnJheShhY3RpdmVQYXJ0cyk7XG4gICAgICBpZiAoYWN0aXZlUGFydHNJc0FycmF5ICYmIGFjdGl2ZVBhcnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmV2ZW50IGNvbnZlcnREYXRhVG9JU08gZnJvbSBkb2luZyBhbnlcbiAgICAgICAgICoga2luZCBvZiB0cmFuc2Zvcm1hdGlvbiBiYXNlZCBvbiB0aW1lem9uZVxuICAgICAgICAgKiBUaGlzIGNhbmNlbHMgb3V0IGFueSBjaGFuZ2UgaXQgYXR0ZW1wdHMgdG8gbWFrZVxuICAgICAgICAgKlxuICAgICAgICAgKiBJbXBvcnRhbnQ6IFRha2UgdGhlIHRpbWV6b25lIG9mZnNldCBiYXNlZCBvblxuICAgICAgICAgKiB0aGUgZGF0ZSB0aGF0IGlzIGN1cnJlbnRseSBzZWxlY3RlZCwgb3RoZXJ3aXNlXG4gICAgICAgICAqIHRoZXJlIGNhbiBiZSAxIGhyIGRpZmZlcmVuY2Ugd2hlbiBkZWFsaW5nIHcvIERTVFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGFjdGl2ZVBhcnRzSXNBcnJheSkge1xuICAgICAgICAgIGNvbnN0IGRhdGVzID0gY29udmVydERhdGFUb0lTTyhhY3RpdmVQYXJ0cykubWFwKChzdHIpID0+IG5ldyBEYXRlKHN0cikpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFjdGl2ZVBhcnRzW2ldLnR6T2Zmc2V0ID0gZGF0ZXNbaV0uZ2V0VGltZXpvbmVPZmZzZXQoKSAqIC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoY29udmVydERhdGFUb0lTTyhhY3RpdmVQYXJ0cykpO1xuICAgICAgICAgIGFjdGl2ZVBhcnRzLnR6T2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogLTE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZSA9IGNvbnZlcnREYXRhVG9JU08oYWN0aXZlUGFydHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2xvc2VPdmVybGF5KSB7XG4gICAgICB0aGlzLmNsb3NlUGFyZW50T3ZlcmxheSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVzZXRzIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiB0aGUgZGF0ZXRpbWUgYnV0IGRvZXMgbm90IHVwZGF0ZSB0aGUgdmFsdWUuXG4gICAqIFBhc3NpbmcgYSB2YWxpZCBJU08tODYwMSBzdHJpbmcgd2lsbCByZXNldCB0aGUgc3RhdGUgb2YgdGhlIGNvbXBvbmVudCB0byB0aGUgcHJvdmlkZWQgZGF0ZS5cbiAgICogSWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQsIHRoZSBpbnRlcm5hbCBzdGF0ZSB3aWxsIGJlIHJlc2V0IHRvIHRoZSBjbGFtcGVkIHZhbHVlIG9mIHRoZSBtaW4sIG1heCBhbmQgdG9kYXkuXG4gICAqL1xuICBhc3luYyByZXNldChzdGFydERhdGUpIHtcbiAgICB0aGlzLnByb2Nlc3NWYWx1ZShzdGFydERhdGUpO1xuICB9XG4gIC8qKlxuICAgKiBFbWl0cyB0aGUgaW9uQ2FuY2VsIGV2ZW50IGFuZFxuICAgKiBvcHRpb25hbGx5IGNsb3NlcyB0aGUgcG9wb3ZlclxuICAgKiBvciBtb2RhbCB0aGF0IHRoZSBkYXRldGltZSB3YXNcbiAgICogcHJlc2VudGVkIGluLlxuICAgKi9cbiAgYXN5bmMgY2FuY2VsKGNsb3NlT3ZlcmxheSA9IGZhbHNlKSB7XG4gICAgdGhpcy5pb25DYW5jZWwuZW1pdCgpO1xuICAgIGlmIChjbG9zZU92ZXJsYXkpIHtcbiAgICAgIHRoaXMuY2xvc2VQYXJlbnRPdmVybGF5KCk7XG4gICAgfVxuICB9XG4gIGdldCBpc0NhbGVuZGFyUGlja2VyKCkge1xuICAgIGNvbnN0IHsgcHJlc2VudGF0aW9uIH0gPSB0aGlzO1xuICAgIHJldHVybiBwcmVzZW50YXRpb24gPT09ICdkYXRlJyB8fCBwcmVzZW50YXRpb24gPT09ICdkYXRlLXRpbWUnIHx8IHByZXNlbnRhdGlvbiA9PT0gJ3RpbWUtZGF0ZSc7XG4gIH1cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5jbGVhckZvY3VzVmlzaWJsZSA9IHN0YXJ0Rm9jdXNWaXNpYmxlKHRoaXMuZWwpLmRlc3Ryb3k7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMuY2xlYXJGb2N1c1Zpc2libGUpIHtcbiAgICAgIHRoaXMuY2xlYXJGb2N1c1Zpc2libGUoKTtcbiAgICAgIHRoaXMuY2xlYXJGb2N1c1Zpc2libGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGluaXRpYWxpemVMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplQ2FsZW5kYXJMaXN0ZW5lcigpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZUtleWJvYXJkTGlzdGVuZXJzKCk7XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICAvKipcbiAgICAgKiBJZiBhIHNjcm9sbGFibGUgZWxlbWVudCBpcyBoaWRkZW4gdXNpbmcgYGRpc3BsYXk6IG5vbmVgLFxuICAgICAqIGl0IHdpbGwgbm90IGhhdmUgYSBzY3JvbGwgaGVpZ2h0IG1lYW5pbmcgd2UgY2Fubm90IHNjcm9sbCBlbGVtZW50c1xuICAgICAqIGludG8gdmlldy4gQXMgYSByZXN1bHQsIHdlIHdpbGwgbmVlZCB0byB3YWl0IGZvciB0aGUgZGF0ZXRpbWUgdG8gYmVjb21lXG4gICAgICogdmlzaWJsZSBpZiB1c2VkIGluc2lkZSBvZiBhIG1vZGFsIG9yIGEgcG9wb3ZlciBvdGhlcndpc2UgdGhlIHNjcm9sbGFibGVcbiAgICAgKiBhcmVhcyB3aWxsIG5vdCBoYXZlIHRoZSBjb3JyZWN0IHZhbHVlcyBzbmFwcGVkIGludG8gcGxhY2UuXG4gICAgICovXG4gICAgY29uc3QgdmlzaWJsZUNhbGxiYWNrID0gKGVudHJpZXMpID0+IHtcbiAgICAgIGNvbnN0IGV2ID0gZW50cmllc1swXTtcbiAgICAgIGlmICghZXYuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5pbml0aWFsaXplTGlzdGVuZXJzKCk7XG4gICAgICAvKipcbiAgICAgICAqIFRPRE86IERhdGV0aW1lIG5lZWRzIGEgZnJhbWUgdG8gZW5zdXJlIHRoYXQgaXRcbiAgICAgICAqIGNhbiBwcm9wZXJseSBzY3JvbGwgY29udGVudHMgaW50byB2aWV3LiBBcyBhIHJlc3VsdFxuICAgICAgICogd2UgaGlkZSB0aGUgc2Nyb2xsYWJsZSBjb250ZW50IHVudGlsIGFmdGVyIHRoYXQgZnJhbWVcbiAgICAgICAqIHNvIHVzZXJzIGRvIG5vdCBzZWUgdGhlIGNvbnRlbnQgcXVpY2tseSBzaGlmdGluZy4gVGhlIGRvd25zaWRlXG4gICAgICAgKiBpcyB0aGF0IHRoZSBjb250ZW50IHdpbGwgcG9wIGludG8gdmlldyBhIGZyYW1lIGFmdGVyLiBNYXliZSB0aGVyZVxuICAgICAgICogaXMgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzP1xuICAgICAgICovXG4gICAgICB3cml0ZVRhc2soKCkgPT4ge1xuICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2RhdGV0aW1lLXJlYWR5Jyk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHZpc2libGVJTyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcih2aXNpYmxlQ2FsbGJhY2ssIHsgdGhyZXNob2xkOiAwLjAxIH0pO1xuICAgIC8qKlxuICAgICAqIFVzZSByYWYgdG8gYXZvaWQgYSByYWNlIGNvbmRpdGlvbiBiZXR3ZWVuIHRoZSBjb21wb25lbnQgbG9hZGluZyBhbmRcbiAgICAgKiBpdHMgZGlzcGxheSBhbmltYXRpb24gc3RhcnRpbmcgKHN1Y2ggYXMgd2hlbiBzaG93biBpbiBhIG1vZGFsKS4gVGhpc1xuICAgICAqIGNvdWxkIGNhdXNlIHRoZSBkYXRldGltZSB0byBzdGFydCBhdCBhIHZpc2liaWxpdHkgb2YgMCwgZXJyb25lb3VzbHlcbiAgICAgKiB0cmlnZ2VyaW5nIHRoZSBgaGlkZGVuSU9gIG9ic2VydmVyIGJlbG93LlxuICAgICAqL1xuICAgIHJhZigoKSA9PiB2aXNpYmxlSU8gPT09IG51bGwgfHwgdmlzaWJsZUlPID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aXNpYmxlSU8ub2JzZXJ2ZSh0aGlzLmVsKSk7XG4gICAgLyoqXG4gICAgICogV2UgbmVlZCB0byBjbGVhbiB1cCBsaXN0ZW5lcnMgd2hlbiB0aGUgZGF0ZXRpbWUgaXMgaGlkZGVuXG4gICAgICogaW4gYSBwb3BvdmVyL21vZGFsIHNvIHRoYXQgd2UgY2FuIHByb3Blcmx5IHNjcm9sbCBjb250YWluZXJzXG4gICAgICogYmFjayBpbnRvIHZpZXcgaWYgdGhleSBhcmUgcmUtcHJlc2VudGVkLiBXaGVuIHRoZSBkYXRldGltZSBpcyBoaWRkZW5cbiAgICAgKiB0aGUgc2Nyb2xsIGFyZWFzIGhhdmUgc2Nyb2xsIHdpZHRocy9oZWlnaHRzIG9mIDBweCwgc28gYW55IHNuYXBwaW5nXG4gICAgICogd2UgZGlkIG9yaWdpbmFsbHkgaGFzIGJlZW4gbG9zdC5cbiAgICAgKi9cbiAgICBjb25zdCBoaWRkZW5DYWxsYmFjayA9IChlbnRyaWVzKSA9PiB7XG4gICAgICBjb25zdCBldiA9IGVudHJpZXNbMF07XG4gICAgICBpZiAoZXYuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5kZXN0cm95SW50ZXJhY3Rpb25MaXN0ZW5lcnMoKTtcbiAgICAgIC8qKlxuICAgICAgICogV2hlbiBkYXRldGltZSBpcyBoaWRkZW4sIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXRcbiAgICAgICAqIHRoZSBtb250aC95ZWFyIHBpY2tlciBpcyBjbG9zZWQuIE90aGVyd2lzZSxcbiAgICAgICAqIGl0IHdpbGwgYmUgb3BlbiB3aGVuIHRoZSBkYXRldGltZSByZS1hcHBlYXJzXG4gICAgICAgKiBhbmQgdGhlIHNjcm9sbCBhcmVhIG9mIHRoZSBjYWxlbmRhciBncmlkIHdpbGwgYmUgMC5cbiAgICAgICAqIEFzIGEgcmVzdWx0LCB0aGUgd3JvbmcgbW9udGggd2lsbCBiZSBzaG93bi5cbiAgICAgICAqL1xuICAgICAgdGhpcy5zaG93TW9udGhBbmRZZWFyID0gZmFsc2U7XG4gICAgICB3cml0ZVRhc2soKCkgPT4ge1xuICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2RhdGV0aW1lLXJlYWR5Jyk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGhpZGRlbklPID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGhpZGRlbkNhbGxiYWNrLCB7IHRocmVzaG9sZDogMCB9KTtcbiAgICByYWYoKCkgPT4gaGlkZGVuSU8gPT09IG51bGwgfHwgaGlkZGVuSU8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhpZGRlbklPLm9ic2VydmUodGhpcy5lbCkpO1xuICAgIC8qKlxuICAgICAqIERhdGV0aW1lIHVzZXMgSW9uaWMgY29tcG9uZW50cyB0aGF0IGVtaXRcbiAgICAgKiBpb25Gb2N1cyBhbmQgaW9uQmx1ci4gVGhlc2UgZXZlbnRzIGFyZVxuICAgICAqIGNvbXBvc2VkIG1lYW5pbmcgdGhleSB3aWxsIGNyb3NzXG4gICAgICogdGhlIHNoYWRvdyBkb20gYm91bmRhcnkuIFdlIG5lZWQgdG9cbiAgICAgKiBzdG9wIHByb3BhZ2F0aW9uIG9uIHRoZXNlIGV2ZW50cyBvdGhlcndpc2VcbiAgICAgKiBkZXZlbG9wZXJzIHdpbGwgc2VlIDIgaW9uRm9jdXMgb3IgMiBpb25CbHVyXG4gICAgICogZXZlbnRzIGF0IGEgdGltZS5cbiAgICAgKi9cbiAgICBjb25zdCByb290ID0gZ2V0RWxlbWVudFJvb3QodGhpcy5lbCk7XG4gICAgcm9vdC5hZGRFdmVudExpc3RlbmVyKCdpb25Gb2N1cycsIChldikgPT4gZXYuc3RvcFByb3BhZ2F0aW9uKCkpO1xuICAgIHJvb3QuYWRkRXZlbnRMaXN0ZW5lcignaW9uQmx1cicsIChldikgPT4gZXYuc3RvcFByb3BhZ2F0aW9uKCkpO1xuICB9XG4gIC8qKlxuICAgKiBXaGVuIHRoZSBwcmVzZW50YXRpb24gaXMgY2hhbmdlZCwgYWxsIGNhbGVuZGFyIGNvbnRlbnQgaXMgcmVjcmVhdGVkLFxuICAgKiBzbyB3ZSBuZWVkIHRvIHJlLWluaXQgYmVoYXZpb3Igd2l0aCB0aGUgbmV3IGVsZW1lbnRzLlxuICAgKi9cbiAgY29tcG9uZW50RGlkUmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJlc2VudGF0aW9uLCBwcmV2UHJlc2VudGF0aW9uLCBjYWxlbmRhckJvZHlSZWYsIG1pblBhcnRzLCBwcmVmZXJXaGVlbCB9ID0gdGhpcztcbiAgICAvKipcbiAgICAgKiBUT0RPKEZXLTIxNjUpXG4gICAgICogUmVtb3ZlIHRoaXMgd2hlbiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjM1OTYwIGlzIGZpeGVkLlxuICAgICAqIFdoZW4gdXNpbmcgYG1pbmAsIHdlIGFkZCBgc2Nyb2xsLXNuYXAtYWxpZ246IG5vbmVgXG4gICAgICogdG8gdGhlIGRpc2FibGVkIG1vbnRoIHNvIHRoYXQgdXNlcnMgY2Fubm90IHNjcm9sbCB0byBpdC5cbiAgICAgKiBUaGlzIHRyaWdnZXJzIGEgYnVnIGluIFdlYktpdCB3aGVyZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlzIHJlc2V0LlxuICAgICAqIFNpbmNlIHRoZSBtb250aCBjaGFuZ2UgbG9naWMgaXMgaGFuZGxlZCBieSBhIHNjcm9sbCBsaXN0ZW5lcixcbiAgICAgKiB0aGlzIGNhdXNlcyB0aGUgbW9udGggdG8gY2hhbmdlIGxlYWRpbmcgdG8gYHNjcm9sbC1zbmFwLWFsaWduYFxuICAgICAqIGNoYW5naW5nIGFnYWluLCB0aHVzIGNoYW5naW5nIHRoZSBzY3JvbGwgcG9zaXRpb24gYWdhaW4gYW5kIGNhdXNpbmdcbiAgICAgKiBhbiBpbmZpbml0ZSBsb29wLlxuICAgICAqIFRoaXMgaXNzdWUgb25seSBhcHBsaWVzIHRvIHRoZSBjYWxlbmRhciBncmlkLCBzbyB3ZSBjYW4gZGlzYWJsZVxuICAgICAqIGl0IGlmIHRoZSBjYWxlbmRhciBncmlkIGlzIG5vdCBiZWluZyB1c2VkLlxuICAgICAqL1xuICAgIGNvbnN0IGhhc0NhbGVuZGFyR3JpZCA9ICFwcmVmZXJXaGVlbCAmJiBbJ2RhdGUtdGltZScsICd0aW1lLWRhdGUnLCAnZGF0ZSddLmluY2x1ZGVzKHByZXNlbnRhdGlvbik7XG4gICAgaWYgKG1pblBhcnRzICE9PSB1bmRlZmluZWQgJiYgaGFzQ2FsZW5kYXJHcmlkICYmIGNhbGVuZGFyQm9keVJlZikge1xuICAgICAgY29uc3Qgd29ya2luZ01vbnRoID0gY2FsZW5kYXJCb2R5UmVmLnF1ZXJ5U2VsZWN0b3IoJy5jYWxlbmRhci1tb250aDpudGgtb2YtdHlwZSgxKScpO1xuICAgICAgaWYgKHdvcmtpbmdNb250aCkge1xuICAgICAgICBjYWxlbmRhckJvZHlSZWYuc2Nyb2xsTGVmdCA9IHdvcmtpbmdNb250aC5jbGllbnRXaWR0aCAqIChpc1JUTCh0aGlzLmVsKSA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV2UHJlc2VudGF0aW9uID09PSBudWxsKSB7XG4gICAgICB0aGlzLnByZXZQcmVzZW50YXRpb24gPSBwcmVzZW50YXRpb247XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwcmVzZW50YXRpb24gPT09IHByZXZQcmVzZW50YXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcmV2UHJlc2VudGF0aW9uID0gcHJlc2VudGF0aW9uO1xuICAgIHRoaXMuZGVzdHJveUludGVyYWN0aW9uTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5pbml0aWFsaXplTGlzdGVuZXJzKCk7XG4gICAgLyoqXG4gICAgICogVGhlIG1vbnRoL3llYXIgcGlja2VyIGZyb20gdGhlIGRhdGUgaW50ZXJmYWNlXG4gICAgICogc2hvdWxkIGJlIGNsb3NlZCBhcyBpdCBpcyBub3QgYXZhaWxhYmxlIGluIG5vbi1kYXRlXG4gICAgICogaW50ZXJmYWNlcy5cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb250aEFuZFllYXIgPSBmYWxzZTtcbiAgICByYWYoKCkgPT4ge1xuICAgICAgdGhpcy5pb25SZW5kZXIuZW1pdCgpO1xuICAgIH0pO1xuICB9XG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIGNvbnN0IHsgZWwsIG11bHRpcGxlLCBwcmVzZW50YXRpb24sIHByZWZlcldoZWVsIH0gPSB0aGlzO1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKHByZXNlbnRhdGlvbiAhPT0gJ2RhdGUnKSB7XG4gICAgICAgIHByaW50SW9uV2FybmluZygnTXVsdGlwbGUgZGF0ZSBzZWxlY3Rpb24gaXMgb25seSBzdXBwb3J0ZWQgZm9yIHByZXNlbnRhdGlvbj1cImRhdGVcIi4nLCBlbCk7XG4gICAgICB9XG4gICAgICBpZiAocHJlZmVyV2hlZWwpIHtcbiAgICAgICAgcHJpbnRJb25XYXJuaW5nKCdNdWx0aXBsZSBkYXRlIHNlbGVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkIHdpdGggcHJlZmVyV2hlZWw9XCJ0cnVlXCIuJywgZWwpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnByb2Nlc3NNaW5QYXJ0cygpO1xuICAgIHRoaXMucHJvY2Vzc01heFBhcnRzKCk7XG4gICAgdGhpcy5wcm9jZXNzVmFsdWUodGhpcy52YWx1ZSk7XG4gICAgdGhpcy5wYXJzZWRIb3VyVmFsdWVzID0gY29udmVydFRvQXJyYXlPZk51bWJlcnModGhpcy5ob3VyVmFsdWVzKTtcbiAgICB0aGlzLnBhcnNlZE1pbnV0ZVZhbHVlcyA9IGNvbnZlcnRUb0FycmF5T2ZOdW1iZXJzKHRoaXMubWludXRlVmFsdWVzKTtcbiAgICB0aGlzLnBhcnNlZE1vbnRoVmFsdWVzID0gY29udmVydFRvQXJyYXlPZk51bWJlcnModGhpcy5tb250aFZhbHVlcyk7XG4gICAgdGhpcy5wYXJzZWRZZWFyVmFsdWVzID0gY29udmVydFRvQXJyYXlPZk51bWJlcnModGhpcy55ZWFyVmFsdWVzKTtcbiAgICB0aGlzLnBhcnNlZERheVZhbHVlcyA9IGNvbnZlcnRUb0FycmF5T2ZOdW1iZXJzKHRoaXMuZGF5VmFsdWVzKTtcbiAgICB0aGlzLmVtaXRTdHlsZSgpO1xuICB9XG4gIGVtaXRTdHlsZSgpIHtcbiAgICB0aGlzLmlvblN0eWxlLmVtaXQoe1xuICAgICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgICBkYXRldGltZTogdHJ1ZSxcbiAgICAgICdpbnRlcmFjdGl2ZS1kaXNhYmxlZCc6IHRoaXMuZGlzYWJsZWQsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFVuaXZlcnNhbCByZW5kZXIgbWV0aG9kc1xuICAgKiBUaGVzZSBhcmUgcGllY2VzIG9mIGRhdGV0aW1lIHRoYXRcbiAgICogYXJlIHJlbmRlcmVkIGluZGVwZW5kZW50bHkgb2YgcHJlc2VudGF0aW9uLlxuICAgKi9cbiAgcmVuZGVyRm9vdGVyKCkge1xuICAgIGNvbnN0IHsgc2hvd0RlZmF1bHRCdXR0b25zLCBzaG93Q2xlYXJCdXR0b24gfSA9IHRoaXM7XG4gICAgY29uc3QgaGFzU2xvdHRlZEJ1dHRvbnMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ1tzbG90PVwiYnV0dG9uc1wiXScpICE9PSBudWxsO1xuICAgIGlmICghaGFzU2xvdHRlZEJ1dHRvbnMgJiYgIXNob3dEZWZhdWx0QnV0dG9ucyAmJiAhc2hvd0NsZWFyQnV0dG9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNsZWFyQnV0dG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCB3ZSByZW5kZXIgdHdvIGJ1dHRvbnM6XG4gICAgICogQ2FuY2VsIC0gRGlzbWlzc2VzIHRoZSBkYXRldGltZSBhbmRcbiAgICAgKiBkb2VzIG5vdCB1cGRhdGUgdGhlIGB2YWx1ZWAgcHJvcC5cbiAgICAgKiBPSyAtIERpc21pc3NlcyB0aGUgZGF0ZXRpbWUgYW5kXG4gICAgICogdXBkYXRlcyB0aGUgYHZhbHVlYCBwcm9wLlxuICAgICAqL1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImRhdGV0aW1lLWZvb3RlclwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJkYXRldGltZS1idXR0b25zXCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIFsnZGF0ZXRpbWUtYWN0aW9uLWJ1dHRvbnMnXTogdHJ1ZSxcbiAgICAgICAgWydoYXMtY2xlYXItYnV0dG9uJ106IHRoaXMuc2hvd0NsZWFyQnV0dG9uLFxuICAgICAgfSB9LCBoKFwic2xvdFwiLCB7IG5hbWU6IFwiYnV0dG9uc1wiIH0sIGgoXCJpb24tYnV0dG9uc1wiLCBudWxsLCBzaG93RGVmYXVsdEJ1dHRvbnMgJiYgKGgoXCJpb24tYnV0dG9uXCIsIHsgaWQ6IFwiY2FuY2VsLWJ1dHRvblwiLCBjb2xvcjogdGhpcy5jb2xvciwgb25DbGljazogKCkgPT4gdGhpcy5jYW5jZWwodHJ1ZSkgfSwgdGhpcy5jYW5jZWxUZXh0KSksIGgoXCJkaXZcIiwgbnVsbCwgc2hvd0NsZWFyQnV0dG9uICYmIChoKFwiaW9uLWJ1dHRvblwiLCB7IGlkOiBcImNsZWFyLWJ1dHRvblwiLCBjb2xvcjogdGhpcy5jb2xvciwgb25DbGljazogKCkgPT4gY2xlYXJCdXR0b25DbGljaygpIH0sIHRoaXMuY2xlYXJUZXh0KSksIHNob3dEZWZhdWx0QnV0dG9ucyAmJiAoaChcImlvbi1idXR0b25cIiwgeyBpZDogXCJjb25maXJtLWJ1dHRvblwiLCBjb2xvcjogdGhpcy5jb2xvciwgb25DbGljazogKCkgPT4gdGhpcy5jb25maXJtKHRydWUpIH0sIHRoaXMuZG9uZVRleHQpKSkpKSkpKSk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZWVsIHBpY2tlciByZW5kZXIgbWV0aG9kc1xuICAgKi9cbiAgcmVuZGVyV2hlZWxQaWNrZXIoZm9yY2VQcmVzZW50YXRpb24gPSB0aGlzLnByZXNlbnRhdGlvbikge1xuICAgIC8qKlxuICAgICAqIElmIHByZXNlbnRhdGlvbj1cInRpbWUtZGF0ZVwiIHdlIHN3aXRjaCB0aGVcbiAgICAgKiBvcmRlciBvZiB0aGUgcmVuZGVyIGFycmF5IGhlcmUgaW5zdGVhZCBvZlxuICAgICAqIG1hbnVhbGx5IHJlb3JkZXJpbmcgZWFjaCBkYXRlL3RpbWUgcGlja2VyXG4gICAgICogY29sdW1uIHdpdGggQ1NTLiBUaGlzIGFsbG93cyBmb3IgYWRkaXRpb25hbFxuICAgICAqIGZsZXhpYmlsaXR5IGlmIHdlIG5lZWQgdG8gcmVuZGVyIHN1YnNldHNcbiAgICAgKiBvZiB0aGUgZGF0ZS90aW1lIGRhdGEgb3IgZG8gYWRkaXRpb25hbCBvcmRlcmluZ1xuICAgICAqIHdpdGhpbiB0aGUgY2hpbGQgcmVuZGVyIGZ1bmN0aW9ucy5cbiAgICAgKi9cbiAgICBjb25zdCByZW5kZXJBcnJheSA9IGZvcmNlUHJlc2VudGF0aW9uID09PSAndGltZS1kYXRlJ1xuICAgICAgPyBbdGhpcy5yZW5kZXJUaW1lUGlja2VyQ29sdW1ucyhmb3JjZVByZXNlbnRhdGlvbiksIHRoaXMucmVuZGVyRGF0ZVBpY2tlckNvbHVtbnMoZm9yY2VQcmVzZW50YXRpb24pXVxuICAgICAgOiBbdGhpcy5yZW5kZXJEYXRlUGlja2VyQ29sdW1ucyhmb3JjZVByZXNlbnRhdGlvbiksIHRoaXMucmVuZGVyVGltZVBpY2tlckNvbHVtbnMoZm9yY2VQcmVzZW50YXRpb24pXTtcbiAgICByZXR1cm4gaChcImlvbi1waWNrZXItaW50ZXJuYWxcIiwgbnVsbCwgcmVuZGVyQXJyYXkpO1xuICB9XG4gIHJlbmRlckRhdGVQaWNrZXJDb2x1bW5zKGZvcmNlUHJlc2VudGF0aW9uKSB7XG4gICAgcmV0dXJuIGZvcmNlUHJlc2VudGF0aW9uID09PSAnZGF0ZS10aW1lJyB8fCBmb3JjZVByZXNlbnRhdGlvbiA9PT0gJ3RpbWUtZGF0ZSdcbiAgICAgID8gdGhpcy5yZW5kZXJDb21iaW5lZERhdGVQaWNrZXJDb2x1bW4oKVxuICAgICAgOiB0aGlzLnJlbmRlckluZGl2aWR1YWxEYXRlUGlja2VyQ29sdW1ucyhmb3JjZVByZXNlbnRhdGlvbik7XG4gIH1cbiAgcmVuZGVyQ29tYmluZWREYXRlUGlja2VyQ29sdW1uKCkge1xuICAgIGNvbnN0IHsgd29ya2luZ1BhcnRzLCBsb2NhbGUsIG1pblBhcnRzLCBtYXhQYXJ0cywgdG9kYXlQYXJ0cywgaXNEYXRlRW5hYmxlZCB9ID0gdGhpcztcbiAgICBjb25zdCBhY3RpdmVQYXJ0ID0gdGhpcy5nZXREZWZhdWx0UGFydCgpO1xuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIGdlbmVyYXRlIGEgcmFuZ2Ugb2YgMyBtb250aHM6XG4gICAgICogUHJldmlvdXMgbW9udGgsIGN1cnJlbnQgbW9udGgsIGFuZCBuZXh0IG1vbnRoXG4gICAgICovXG4gICAgY29uc3QgbW9udGhzVG9SZW5kZXIgPSBnZW5lcmF0ZU1vbnRocyh3b3JraW5nUGFydHMpO1xuICAgIGNvbnN0IGxhc3RNb250aCA9IG1vbnRoc1RvUmVuZGVyW21vbnRoc1RvUmVuZGVyLmxlbmd0aCAtIDFdO1xuICAgIC8qKlxuICAgICAqIEVuc3VyZSB0aGF0IHVzZXJzIGNhbiBzZWxlY3QgdGhlIGVudGlyZSB3aW5kb3cgb2YgZGF0ZXMuXG4gICAgICovXG4gICAgbW9udGhzVG9SZW5kZXJbMF0uZGF5ID0gMTtcbiAgICBsYXN0TW9udGguZGF5ID0gZ2V0TnVtRGF5c0luTW9udGgobGFzdE1vbnRoLm1vbnRoLCBsYXN0TW9udGgueWVhcik7XG4gICAgLyoqXG4gICAgICogTmFycm93IHRoZSBkYXRlcyByZW5kZXJlZCBiYXNlZCBvbiBtaW4vbWF4IGRhdGVzIChpZiBhbnkpLlxuICAgICAqIFRoZSBgbWluYCBkYXRlIGlzIHVzZWQgaWYgdGhlIG1pbiBpcyBhZnRlciB0aGUgZ2VuZXJhdGVkIG1pbiBtb250aC5cbiAgICAgKiBUaGUgYG1heGAgZGF0ZSBpcyB1c2VkIGlmIHRoZSBtYXggaXMgYmVmb3JlIHRoZSBnZW5lcmF0ZWQgbWF4IG1vbnRoLlxuICAgICAqIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBzbGlkaW5nIHdpbmRvdyBhbHdheXMgc3RheXMgYXQgMyBtb250aHNcbiAgICAgKiBidXQgc3RpbGwgYWxsb3dzIGZ1dHVyZSBkYXRlcyB0byBiZSBsYXppbHkgcmVuZGVyZWQgYmFzZWQgb24gYW55IG1pbi9tYXhcbiAgICAgKiBjb25zdHJhaW50cy5cbiAgICAgKi9cbiAgICBjb25zdCBtaW4gPSBtaW5QYXJ0cyAhPT0gdW5kZWZpbmVkICYmIGlzQWZ0ZXIobWluUGFydHMsIG1vbnRoc1RvUmVuZGVyWzBdKSA/IG1pblBhcnRzIDogbW9udGhzVG9SZW5kZXJbMF07XG4gICAgY29uc3QgbWF4ID0gbWF4UGFydHMgIT09IHVuZGVmaW5lZCAmJiBpc0JlZm9yZShtYXhQYXJ0cywgbGFzdE1vbnRoKSA/IG1heFBhcnRzIDogbGFzdE1vbnRoO1xuICAgIGNvbnN0IHJlc3VsdCA9IGdldENvbWJpbmVkRGF0ZUNvbHVtbkRhdGEobG9jYWxlLCB0b2RheVBhcnRzLCBtaW4sIG1heCwgdGhpcy5wYXJzZWREYXlWYWx1ZXMsIHRoaXMucGFyc2VkTW9udGhWYWx1ZXMpO1xuICAgIGxldCBpdGVtcyA9IHJlc3VsdC5pdGVtcztcbiAgICBjb25zdCBwYXJ0cyA9IHJlc3VsdC5wYXJ0cztcbiAgICBpZiAoaXNEYXRlRW5hYmxlZCkge1xuICAgICAgaXRlbXMgPSBpdGVtcy5tYXAoKGl0ZW1PYmplY3QsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZVBhcnRzID0gcGFydHNbaW5kZXhdO1xuICAgICAgICBsZXQgZGlzYWJsZWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIGBpc0RhdGVFbmFibGVkYCBpbXBsZW1lbnRhdGlvbiBpcyB0cnktY2F0Y2ggd3JhcHBlZFxuICAgICAgICAgICAqIHRvIHByZXZlbnQgZXhjZXB0aW9ucyBpbiB0aGUgdXNlcidzIGZ1bmN0aW9uIGZyb21cbiAgICAgICAgICAgKiBpbnRlcnJ1cHRpbmcgdGhlIGNhbGVuZGFyIHJlbmRlcmluZy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBkaXNhYmxlZCA9ICFpc0RhdGVFbmFibGVkKGNvbnZlcnREYXRhVG9JU08ocmVmZXJlbmNlUGFydHMpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgIHByaW50SW9uRXJyb3IoJ0V4Y2VwdGlvbiB0aHJvd24gZnJvbSBwcm92aWRlZCBgaXNEYXRlRW5hYmxlZGAgZnVuY3Rpb24uIFBsZWFzZSBjaGVjayB5b3VyIGZ1bmN0aW9uIGFuZCB0cnkgYWdhaW4uJywgZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaXRlbU9iamVjdCksIHsgZGlzYWJsZWQgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZSBzZWxlY3RlZCBhIGRheSBhbHJlYWR5LCB0aGVuIGRlZmF1bHQgdGhlIGNvbHVtblxuICAgICAqIHRvIHRoYXQgdmFsdWUuIE90aGVyd2lzZSwgZGVmYXVsdCBpdCB0byB0b2RheS5cbiAgICAgKi9cbiAgICBjb25zdCB0b2RheVN0cmluZyA9IHdvcmtpbmdQYXJ0cy5kYXkgIT09IG51bGxcbiAgICAgID8gYCR7d29ya2luZ1BhcnRzLnllYXJ9LSR7d29ya2luZ1BhcnRzLm1vbnRofS0ke3dvcmtpbmdQYXJ0cy5kYXl9YFxuICAgICAgOiBgJHt0b2RheVBhcnRzLnllYXJ9LSR7dG9kYXlQYXJ0cy5tb250aH0tJHt0b2RheVBhcnRzLmRheX1gO1xuICAgIHJldHVybiAoaChcImlvbi1waWNrZXItY29sdW1uLWludGVybmFsXCIsIHsgY2xhc3M6IFwiZGF0ZS1jb2x1bW5cIiwgY29sb3I6IHRoaXMuY29sb3IsIGl0ZW1zOiBpdGVtcywgdmFsdWU6IHRvZGF5U3RyaW5nLCBvbklvbkNoYW5nZTogKGV2KSA9PiB7XG4gICAgICAgIC8vIFRPRE8oRlctMTgyMykgUmVtb3ZlIHRoaXMgd2hlbiBpT1MgMTQgc3VwcG9ydCBpcyBkcm9wcGVkLlxuICAgICAgICAvLyBEdWUgdG8gYSBTYWZhcmkgMTQgaXNzdWUgd2UgbmVlZCB0byBkZXN0cm95XG4gICAgICAgIC8vIHRoZSBzY3JvbGwgbGlzdGVuZXIgYmVmb3JlIHdlIHVwZGF0ZSBzdGF0ZVxuICAgICAgICAvLyBhbmQgdHJpZ2dlciBhIHJlLXJlbmRlci5cbiAgICAgICAgaWYgKHRoaXMuZGVzdHJveUNhbGVuZGFyTGlzdGVuZXIpIHtcbiAgICAgICAgICB0aGlzLmRlc3Ryb3lDYWxlbmRhckxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZXYuZGV0YWlsO1xuICAgICAgICBjb25zdCBmaW5kUGFydCA9IHBhcnRzLmZpbmQoKHsgbW9udGgsIGRheSwgeWVhciB9KSA9PiB2YWx1ZSA9PT0gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9YCk7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZ1BhcnRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgd29ya2luZ1BhcnRzKSwgZmluZFBhcnQpKTtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFjdGl2ZVBhcnQpLCBmaW5kUGFydCkpO1xuICAgICAgICAvLyBXZSBjYW4gcmUtYXR0YWNoIHRoZSBzY3JvbGwgbGlzdGVuZXIgYWZ0ZXJcbiAgICAgICAgLy8gdGhlIHdvcmtpbmcgcGFydHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUNhbGVuZGFyTGlzdGVuZXIoKTtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9IH0pKTtcbiAgfVxuICByZW5kZXJJbmRpdmlkdWFsRGF0ZVBpY2tlckNvbHVtbnMoZm9yY2VQcmVzZW50YXRpb24pIHtcbiAgICBjb25zdCB7IHdvcmtpbmdQYXJ0cywgaXNEYXRlRW5hYmxlZCB9ID0gdGhpcztcbiAgICBjb25zdCBzaG91bGRSZW5kZXJNb250aHMgPSBmb3JjZVByZXNlbnRhdGlvbiAhPT0gJ3llYXInICYmIGZvcmNlUHJlc2VudGF0aW9uICE9PSAndGltZSc7XG4gICAgY29uc3QgbW9udGhzID0gc2hvdWxkUmVuZGVyTW9udGhzXG4gICAgICA/IGdldE1vbnRoQ29sdW1uRGF0YSh0aGlzLmxvY2FsZSwgd29ya2luZ1BhcnRzLCB0aGlzLm1pblBhcnRzLCB0aGlzLm1heFBhcnRzLCB0aGlzLnBhcnNlZE1vbnRoVmFsdWVzKVxuICAgICAgOiBbXTtcbiAgICBjb25zdCBzaG91bGRSZW5kZXJEYXlzID0gZm9yY2VQcmVzZW50YXRpb24gPT09ICdkYXRlJztcbiAgICBsZXQgZGF5cyA9IHNob3VsZFJlbmRlckRheXNcbiAgICAgID8gZ2V0RGF5Q29sdW1uRGF0YSh0aGlzLmxvY2FsZSwgd29ya2luZ1BhcnRzLCB0aGlzLm1pblBhcnRzLCB0aGlzLm1heFBhcnRzLCB0aGlzLnBhcnNlZERheVZhbHVlcylcbiAgICAgIDogW107XG4gICAgaWYgKGlzRGF0ZUVuYWJsZWQpIHtcbiAgICAgIGRheXMgPSBkYXlzLm1hcCgoZGF5T2JqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGRheU9iamVjdDtcbiAgICAgICAgY29uc3QgdmFsdWVOdW0gPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gcGFyc2VJbnQodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZVBhcnRzID0ge1xuICAgICAgICAgIG1vbnRoOiB3b3JraW5nUGFydHMubW9udGgsXG4gICAgICAgICAgZGF5OiB2YWx1ZU51bSxcbiAgICAgICAgICB5ZWFyOiB3b3JraW5nUGFydHMueWVhcixcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGRpc2FibGVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFRoZSBgaXNEYXRlRW5hYmxlZGAgaW1wbGVtZW50YXRpb24gaXMgdHJ5LWNhdGNoIHdyYXBwZWRcbiAgICAgICAgICAgKiB0byBwcmV2ZW50IGV4Y2VwdGlvbnMgaW4gdGhlIHVzZXIncyBmdW5jdGlvbiBmcm9tXG4gICAgICAgICAgICogaW50ZXJydXB0aW5nIHRoZSBjYWxlbmRhciByZW5kZXJpbmcuXG4gICAgICAgICAgICovXG4gICAgICAgICAgZGlzYWJsZWQgPSAhaXNEYXRlRW5hYmxlZChjb252ZXJ0RGF0YVRvSVNPKHJlZmVyZW5jZVBhcnRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICBwcmludElvbkVycm9yKCdFeGNlcHRpb24gdGhyb3duIGZyb20gcHJvdmlkZWQgYGlzRGF0ZUVuYWJsZWRgIGZ1bmN0aW9uLiBQbGVhc2UgY2hlY2sgeW91ciBmdW5jdGlvbiBhbmQgdHJ5IGFnYWluLicsIGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRheU9iamVjdCksIHsgZGlzYWJsZWQgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgc2hvdWxkUmVuZGVyWWVhcnMgPSBmb3JjZVByZXNlbnRhdGlvbiAhPT0gJ21vbnRoJyAmJiBmb3JjZVByZXNlbnRhdGlvbiAhPT0gJ3RpbWUnO1xuICAgIGNvbnN0IHllYXJzID0gc2hvdWxkUmVuZGVyWWVhcnNcbiAgICAgID8gZ2V0WWVhckNvbHVtbkRhdGEodGhpcy5sb2NhbGUsIHRoaXMudG9kYXlQYXJ0cywgdGhpcy5taW5QYXJ0cywgdGhpcy5tYXhQYXJ0cywgdGhpcy5wYXJzZWRZZWFyVmFsdWVzKVxuICAgICAgOiBbXTtcbiAgICAvKipcbiAgICAgKiBDZXJ0YWluIGxvY2FsZXMgc2hvdyB0aGUgZGF5IGJlZm9yZSB0aGUgbW9udGguXG4gICAgICovXG4gICAgY29uc3Qgc2hvd01vbnRoRmlyc3QgPSBpc01vbnRoRmlyc3RMb2NhbGUodGhpcy5sb2NhbGUsIHsgbW9udGg6ICdudW1lcmljJywgZGF5OiAnbnVtZXJpYycgfSk7XG4gICAgbGV0IHJlbmRlckFycmF5ID0gW107XG4gICAgaWYgKHNob3dNb250aEZpcnN0KSB7XG4gICAgICByZW5kZXJBcnJheSA9IFtcbiAgICAgICAgdGhpcy5yZW5kZXJNb250aFBpY2tlckNvbHVtbihtb250aHMpLFxuICAgICAgICB0aGlzLnJlbmRlckRheVBpY2tlckNvbHVtbihkYXlzKSxcbiAgICAgICAgdGhpcy5yZW5kZXJZZWFyUGlja2VyQ29sdW1uKHllYXJzKSxcbiAgICAgIF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVuZGVyQXJyYXkgPSBbXG4gICAgICAgIHRoaXMucmVuZGVyRGF5UGlja2VyQ29sdW1uKGRheXMpLFxuICAgICAgICB0aGlzLnJlbmRlck1vbnRoUGlja2VyQ29sdW1uKG1vbnRocyksXG4gICAgICAgIHRoaXMucmVuZGVyWWVhclBpY2tlckNvbHVtbih5ZWFycyksXG4gICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gcmVuZGVyQXJyYXk7XG4gIH1cbiAgcmVuZGVyRGF5UGlja2VyQ29sdW1uKGRheXMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGRheXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IHsgd29ya2luZ1BhcnRzIH0gPSB0aGlzO1xuICAgIGNvbnN0IGFjdGl2ZVBhcnQgPSB0aGlzLmdldERlZmF1bHRQYXJ0KCk7XG4gICAgcmV0dXJuIChoKFwiaW9uLXBpY2tlci1jb2x1bW4taW50ZXJuYWxcIiwgeyBjbGFzczogXCJkYXktY29sdW1uXCIsIGNvbG9yOiB0aGlzLmNvbG9yLCBpdGVtczogZGF5cywgdmFsdWU6IChfYSA9ICh3b3JraW5nUGFydHMuZGF5ICE9PSBudWxsID8gd29ya2luZ1BhcnRzLmRheSA6IHRoaXMudG9kYXlQYXJ0cy5kYXkpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQsIG9uSW9uQ2hhbmdlOiAoZXYpID0+IHtcbiAgICAgICAgLy8gVE9ETyhGVy0xODIzKSBSZW1vdmUgdGhpcyB3aGVuIGlPUyAxNCBzdXBwb3J0IGlzIGRyb3BwZWQuXG4gICAgICAgIC8vIER1ZSB0byBhIFNhZmFyaSAxNCBpc3N1ZSB3ZSBuZWVkIHRvIGRlc3Ryb3lcbiAgICAgICAgLy8gdGhlIHNjcm9sbCBsaXN0ZW5lciBiZWZvcmUgd2UgdXBkYXRlIHN0YXRlXG4gICAgICAgIC8vIGFuZCB0cmlnZ2VyIGEgcmUtcmVuZGVyLlxuICAgICAgICBpZiAodGhpcy5kZXN0cm95Q2FsZW5kYXJMaXN0ZW5lcikge1xuICAgICAgICAgIHRoaXMuZGVzdHJveUNhbGVuZGFyTGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFdvcmtpbmdQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHdvcmtpbmdQYXJ0cyksIHsgZGF5OiBldi5kZXRhaWwudmFsdWUgfSkpO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZVBhcnRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWN0aXZlUGFydCksIHsgZGF5OiBldi5kZXRhaWwudmFsdWUgfSkpO1xuICAgICAgICAvLyBXZSBjYW4gcmUtYXR0YWNoIHRoZSBzY3JvbGwgbGlzdGVuZXIgYWZ0ZXJcbiAgICAgICAgLy8gdGhlIHdvcmtpbmcgcGFydHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUNhbGVuZGFyTGlzdGVuZXIoKTtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9IH0pKTtcbiAgfVxuICByZW5kZXJNb250aFBpY2tlckNvbHVtbihtb250aHMpIHtcbiAgICBpZiAobW9udGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCB7IHdvcmtpbmdQYXJ0cyB9ID0gdGhpcztcbiAgICBjb25zdCBhY3RpdmVQYXJ0ID0gdGhpcy5nZXREZWZhdWx0UGFydCgpO1xuICAgIHJldHVybiAoaChcImlvbi1waWNrZXItY29sdW1uLWludGVybmFsXCIsIHsgY2xhc3M6IFwibW9udGgtY29sdW1uXCIsIGNvbG9yOiB0aGlzLmNvbG9yLCBpdGVtczogbW9udGhzLCB2YWx1ZTogd29ya2luZ1BhcnRzLm1vbnRoLCBvbklvbkNoYW5nZTogKGV2KSA9PiB7XG4gICAgICAgIC8vIFRPRE8oRlctMTgyMykgUmVtb3ZlIHRoaXMgd2hlbiBpT1MgMTQgc3VwcG9ydCBpcyBkcm9wcGVkLlxuICAgICAgICAvLyBEdWUgdG8gYSBTYWZhcmkgMTQgaXNzdWUgd2UgbmVlZCB0byBkZXN0cm95XG4gICAgICAgIC8vIHRoZSBzY3JvbGwgbGlzdGVuZXIgYmVmb3JlIHdlIHVwZGF0ZSBzdGF0ZVxuICAgICAgICAvLyBhbmQgdHJpZ2dlciBhIHJlLXJlbmRlci5cbiAgICAgICAgaWYgKHRoaXMuZGVzdHJveUNhbGVuZGFyTGlzdGVuZXIpIHtcbiAgICAgICAgICB0aGlzLmRlc3Ryb3lDYWxlbmRhckxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRXb3JraW5nUGFydHMoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB3b3JraW5nUGFydHMpLCB7IG1vbnRoOiBldi5kZXRhaWwudmFsdWUgfSkpO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZVBhcnRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWN0aXZlUGFydCksIHsgbW9udGg6IGV2LmRldGFpbC52YWx1ZSB9KSk7XG4gICAgICAgIC8vIFdlIGNhbiByZS1hdHRhY2ggdGhlIHNjcm9sbCBsaXN0ZW5lciBhZnRlclxuICAgICAgICAvLyB0aGUgd29ya2luZyBwYXJ0cyBoYXZlIGJlZW4gdXBkYXRlZC5cbiAgICAgICAgdGhpcy5pbml0aWFsaXplQ2FsZW5kYXJMaXN0ZW5lcigpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0gfSkpO1xuICB9XG4gIHJlbmRlclllYXJQaWNrZXJDb2x1bW4oeWVhcnMpIHtcbiAgICBpZiAoeWVhcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IHsgd29ya2luZ1BhcnRzIH0gPSB0aGlzO1xuICAgIGNvbnN0IGFjdGl2ZVBhcnQgPSB0aGlzLmdldERlZmF1bHRQYXJ0KCk7XG4gICAgcmV0dXJuIChoKFwiaW9uLXBpY2tlci1jb2x1bW4taW50ZXJuYWxcIiwgeyBjbGFzczogXCJ5ZWFyLWNvbHVtblwiLCBjb2xvcjogdGhpcy5jb2xvciwgaXRlbXM6IHllYXJzLCB2YWx1ZTogd29ya2luZ1BhcnRzLnllYXIsIG9uSW9uQ2hhbmdlOiAoZXYpID0+IHtcbiAgICAgICAgLy8gVE9ETyhGVy0xODIzKSBSZW1vdmUgdGhpcyB3aGVuIGlPUyAxNCBzdXBwb3J0IGlzIGRyb3BwZWQuXG4gICAgICAgIC8vIER1ZSB0byBhIFNhZmFyaSAxNCBpc3N1ZSB3ZSBuZWVkIHRvIGRlc3Ryb3lcbiAgICAgICAgLy8gdGhlIHNjcm9sbCBsaXN0ZW5lciBiZWZvcmUgd2UgdXBkYXRlIHN0YXRlXG4gICAgICAgIC8vIGFuZCB0cmlnZ2VyIGEgcmUtcmVuZGVyLlxuICAgICAgICBpZiAodGhpcy5kZXN0cm95Q2FsZW5kYXJMaXN0ZW5lcikge1xuICAgICAgICAgIHRoaXMuZGVzdHJveUNhbGVuZGFyTGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFdvcmtpbmdQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHdvcmtpbmdQYXJ0cyksIHsgeWVhcjogZXYuZGV0YWlsLnZhbHVlIH0pKTtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFjdGl2ZVBhcnQpLCB7IHllYXI6IGV2LmRldGFpbC52YWx1ZSB9KSk7XG4gICAgICAgIC8vIFdlIGNhbiByZS1hdHRhY2ggdGhlIHNjcm9sbCBsaXN0ZW5lciBhZnRlclxuICAgICAgICAvLyB0aGUgd29ya2luZyBwYXJ0cyBoYXZlIGJlZW4gdXBkYXRlZC5cbiAgICAgICAgdGhpcy5pbml0aWFsaXplQ2FsZW5kYXJMaXN0ZW5lcigpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0gfSkpO1xuICB9XG4gIHJlbmRlclRpbWVQaWNrZXJDb2x1bW5zKGZvcmNlUHJlc2VudGF0aW9uKSB7XG4gICAgaWYgKFsnZGF0ZScsICdtb250aCcsICdtb250aC15ZWFyJywgJ3llYXInXS5pbmNsdWRlcyhmb3JjZVByZXNlbnRhdGlvbikpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVJc0RlZmluZWQgPSB0aGlzLnZhbHVlICE9PSBudWxsICYmIHRoaXMudmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICBjb25zdCB7IGhvdXJzRGF0YSwgbWludXRlc0RhdGEsIGRheVBlcmlvZERhdGEgfSA9IGdldFRpbWVDb2x1bW5zRGF0YSh0aGlzLmxvY2FsZSwgdGhpcy53b3JraW5nUGFydHMsIHRoaXMuaG91ckN5Y2xlLCB2YWx1ZUlzRGVmaW5lZCA/IHRoaXMubWluUGFydHMgOiB1bmRlZmluZWQsIHZhbHVlSXNEZWZpbmVkID8gdGhpcy5tYXhQYXJ0cyA6IHVuZGVmaW5lZCwgdGhpcy5wYXJzZWRIb3VyVmFsdWVzLCB0aGlzLnBhcnNlZE1pbnV0ZVZhbHVlcyk7XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMucmVuZGVySG91clBpY2tlckNvbHVtbihob3Vyc0RhdGEpLFxuICAgICAgdGhpcy5yZW5kZXJNaW51dGVQaWNrZXJDb2x1bW4obWludXRlc0RhdGEpLFxuICAgICAgdGhpcy5yZW5kZXJEYXlQZXJpb2RQaWNrZXJDb2x1bW4oZGF5UGVyaW9kRGF0YSksXG4gICAgXTtcbiAgfVxuICByZW5kZXJIb3VyUGlja2VyQ29sdW1uKGhvdXJzRGF0YSkge1xuICAgIGNvbnN0IHsgd29ya2luZ1BhcnRzIH0gPSB0aGlzO1xuICAgIGlmIChob3Vyc0RhdGEubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IGFjdGl2ZVBhcnQgPSB0aGlzLmdldERlZmF1bHRQYXJ0KCk7XG4gICAgcmV0dXJuIChoKFwiaW9uLXBpY2tlci1jb2x1bW4taW50ZXJuYWxcIiwgeyBjb2xvcjogdGhpcy5jb2xvciwgdmFsdWU6IGFjdGl2ZVBhcnQuaG91ciwgaXRlbXM6IGhvdXJzRGF0YSwgbnVtZXJpY0lucHV0OiB0cnVlLCBvbklvbkNoYW5nZTogKGV2KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0V29ya2luZ1BhcnRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgd29ya2luZ1BhcnRzKSwgeyBob3VyOiBldi5kZXRhaWwudmFsdWUgfSkpO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZVBhcnRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWN0aXZlUGFydCksIHsgaG91cjogZXYuZGV0YWlsLnZhbHVlIH0pKTtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9IH0pKTtcbiAgfVxuICByZW5kZXJNaW51dGVQaWNrZXJDb2x1bW4obWludXRlc0RhdGEpIHtcbiAgICBjb25zdCB7IHdvcmtpbmdQYXJ0cyB9ID0gdGhpcztcbiAgICBpZiAobWludXRlc0RhdGEubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IGFjdGl2ZVBhcnQgPSB0aGlzLmdldERlZmF1bHRQYXJ0KCk7XG4gICAgcmV0dXJuIChoKFwiaW9uLXBpY2tlci1jb2x1bW4taW50ZXJuYWxcIiwgeyBjb2xvcjogdGhpcy5jb2xvciwgdmFsdWU6IGFjdGl2ZVBhcnQubWludXRlLCBpdGVtczogbWludXRlc0RhdGEsIG51bWVyaWNJbnB1dDogdHJ1ZSwgb25Jb25DaGFuZ2U6IChldikgPT4ge1xuICAgICAgICB0aGlzLnNldFdvcmtpbmdQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHdvcmtpbmdQYXJ0cyksIHsgbWludXRlOiBldi5kZXRhaWwudmFsdWUgfSkpO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZVBhcnRzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWN0aXZlUGFydCksIHsgbWludXRlOiBldi5kZXRhaWwudmFsdWUgfSkpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0gfSkpO1xuICB9XG4gIHJlbmRlckRheVBlcmlvZFBpY2tlckNvbHVtbihkYXlQZXJpb2REYXRhKSB7XG4gICAgY29uc3QgeyB3b3JraW5nUGFydHMgfSA9IHRoaXM7XG4gICAgaWYgKGRheVBlcmlvZERhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGFjdGl2ZVBhcnQgPSB0aGlzLmdldERlZmF1bHRQYXJ0KCk7XG4gICAgY29uc3QgaXNEYXlQZXJpb2RSVEwgPSBpc0xvY2FsZURheVBlcmlvZFJUTCh0aGlzLmxvY2FsZSk7XG4gICAgcmV0dXJuIChoKFwiaW9uLXBpY2tlci1jb2x1bW4taW50ZXJuYWxcIiwgeyBzdHlsZTogaXNEYXlQZXJpb2RSVEwgPyB7IG9yZGVyOiAnLTEnIH0gOiB7fSwgY29sb3I6IHRoaXMuY29sb3IsIHZhbHVlOiBhY3RpdmVQYXJ0LmFtcG0sIGl0ZW1zOiBkYXlQZXJpb2REYXRhLCBvbklvbkNoYW5nZTogKGV2KSA9PiB7XG4gICAgICAgIGNvbnN0IGhvdXIgPSBjYWxjdWxhdGVIb3VyRnJvbUFNUE0od29ya2luZ1BhcnRzLCBldi5kZXRhaWwudmFsdWUpO1xuICAgICAgICB0aGlzLnNldFdvcmtpbmdQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHdvcmtpbmdQYXJ0cyksIHsgYW1wbTogZXYuZGV0YWlsLnZhbHVlLCBob3VyIH0pKTtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFjdGl2ZVBhcnQpLCB7IGFtcG06IGV2LmRldGFpbC52YWx1ZSwgaG91ciB9KSk7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSB9KSk7XG4gIH1cbiAgcmVuZGVyV2hlZWxWaWV3KGZvcmNlUHJlc2VudGF0aW9uKSB7XG4gICAgY29uc3QgeyBsb2NhbGUgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2hvd01vbnRoRmlyc3QgPSBpc01vbnRoRmlyc3RMb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCBjb2x1bW5PcmRlciA9IHNob3dNb250aEZpcnN0ID8gJ21vbnRoLWZpcnN0JyA6ICd5ZWFyLWZpcnN0JztcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczoge1xuICAgICAgICBbYHdoZWVsLW9yZGVyLSR7Y29sdW1uT3JkZXJ9YF06IHRydWUsXG4gICAgICB9IH0sIHRoaXMucmVuZGVyV2hlZWxQaWNrZXIoZm9yY2VQcmVzZW50YXRpb24pKSk7XG4gIH1cbiAgLyoqXG4gICAqIEdyaWQgUmVuZGVyIE1ldGhvZHNcbiAgICovXG4gIHJlbmRlckNhbGVuZGFySGVhZGVyKG1vZGUpIHtcbiAgICBjb25zdCBleHBhbmRlZEljb24gPSBtb2RlID09PSAnaW9zJyA/IGNoZXZyb25Eb3duIDogY2FyZXRVcFNoYXJwO1xuICAgIGNvbnN0IGNvbGxhcHNlZEljb24gPSBtb2RlID09PSAnaW9zJyA/IGNoZXZyb25Gb3J3YXJkIDogY2FyZXREb3duU2hhcnA7XG4gICAgY29uc3QgcHJldk1vbnRoRGlzYWJsZWQgPSBpc1ByZXZNb250aERpc2FibGVkKHRoaXMud29ya2luZ1BhcnRzLCB0aGlzLm1pblBhcnRzLCB0aGlzLm1heFBhcnRzKTtcbiAgICBjb25zdCBuZXh0TW9udGhEaXNhYmxlZCA9IGlzTmV4dE1vbnRoRGlzYWJsZWQodGhpcy53b3JraW5nUGFydHMsIHRoaXMubWF4UGFydHMpO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImNhbGVuZGFyLWhlYWRlclwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJjYWxlbmRhci1hY3Rpb24tYnV0dG9uc1wiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJjYWxlbmRhci1tb250aC15ZWFyXCIgfSwgaChcImlvbi1pdGVtXCIsIHsgYnV0dG9uOiB0cnVlLCBkZXRhaWw6IGZhbHNlLCBsaW5lczogXCJub25lXCIsIG9uQ2xpY2s6ICgpID0+IHRoaXMudG9nZ2xlTW9udGhBbmRZZWFyVmlldygpIH0sIGgoXCJpb24tbGFiZWxcIiwgbnVsbCwgZ2V0TW9udGhBbmRZZWFyKHRoaXMubG9jYWxlLCB0aGlzLndvcmtpbmdQYXJ0cyksICcgJywgaChcImlvbi1pY29uXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgaWNvbjogdGhpcy5zaG93TW9udGhBbmRZZWFyID8gZXhwYW5kZWRJY29uIDogY29sbGFwc2VkSWNvbiwgbGF6eTogZmFsc2UgfSkpKSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJjYWxlbmRhci1uZXh0LXByZXZcIiB9LCBoKFwiaW9uLWJ1dHRvbnNcIiwgbnVsbCwgaChcImlvbi1idXR0b25cIiwgeyBcImFyaWEtbGFiZWxcIjogXCJwcmV2aW91cyBtb250aFwiLCBkaXNhYmxlZDogcHJldk1vbnRoRGlzYWJsZWQsIG9uQ2xpY2s6ICgpID0+IHRoaXMucHJldk1vbnRoKCkgfSwgaChcImlvbi1pY29uXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgc2xvdDogXCJpY29uLW9ubHlcIiwgaWNvbjogY2hldnJvbkJhY2ssIGxhenk6IGZhbHNlLCBmbGlwUnRsOiB0cnVlIH0pKSwgaChcImlvbi1idXR0b25cIiwgeyBcImFyaWEtbGFiZWxcIjogXCJuZXh0IG1vbnRoXCIsIGRpc2FibGVkOiBuZXh0TW9udGhEaXNhYmxlZCwgb25DbGljazogKCkgPT4gdGhpcy5uZXh0TW9udGgoKSB9LCBoKFwiaW9uLWljb25cIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBzbG90OiBcImljb24tb25seVwiLCBpY29uOiBjaGV2cm9uRm9yd2FyZCwgbGF6eTogZmFsc2UsIGZsaXBSdGw6IHRydWUgfSkpKSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiY2FsZW5kYXItZGF5cy1vZi13ZWVrXCIgfSwgZ2V0RGF5c09mV2Vlayh0aGlzLmxvY2FsZSwgbW9kZSwgdGhpcy5maXJzdERheU9mV2VlayAlIDcpLm1hcCgoZCkgPT4ge1xuICAgICAgcmV0dXJuIGgoXCJkaXZcIiwgeyBjbGFzczogXCJkYXktb2Ytd2Vla1wiIH0sIGQpO1xuICAgIH0pKSkpO1xuICB9XG4gIHJlbmRlck1vbnRoKG1vbnRoLCB5ZWFyKSB7XG4gICAgY29uc3QgeWVhckFsbG93ZWQgPSB0aGlzLnBhcnNlZFllYXJWYWx1ZXMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnBhcnNlZFllYXJWYWx1ZXMuaW5jbHVkZXMoeWVhcik7XG4gICAgY29uc3QgbW9udGhBbGxvd2VkID0gdGhpcy5wYXJzZWRNb250aFZhbHVlcyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMucGFyc2VkTW9udGhWYWx1ZXMuaW5jbHVkZXMobW9udGgpO1xuICAgIGNvbnN0IGlzQ2FsTW9udGhEaXNhYmxlZCA9ICF5ZWFyQWxsb3dlZCB8fCAhbW9udGhBbGxvd2VkO1xuICAgIGNvbnN0IHN3aXBlRGlzYWJsZWQgPSBpc01vbnRoRGlzYWJsZWQoe1xuICAgICAgbW9udGgsXG4gICAgICB5ZWFyLFxuICAgICAgZGF5OiBudWxsLFxuICAgIH0sIHtcbiAgICAgIC8vIFRoZSBkYXkgaXMgbm90IHVzZWQgd2hlbiBjaGVja2luZyBpZiBhIG1vbnRoIGlzIGRpc2FibGVkLlxuICAgICAgLy8gVXNlcnMgc2hvdWxkIGJlIGFibGUgdG8gYWNjZXNzIHRoZSBtaW4gb3IgbWF4IG1vbnRoLCBldmVuIGlmIHRoZVxuICAgICAgLy8gbWluL21heCBkYXRlIGlzIG91dCBvZiBib3VuZHMgKGUuZy4gbWluIGlzIHNldCB0byBGZWIgMTUsIEZlYiBzaG91bGQgbm90IGJlIGRpc2FibGVkKS5cbiAgICAgIG1pblBhcnRzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMubWluUGFydHMpLCB7IGRheTogbnVsbCB9KSxcbiAgICAgIG1heFBhcnRzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMubWF4UGFydHMpLCB7IGRheTogbnVsbCB9KSxcbiAgICB9KTtcbiAgICAvLyBUaGUgd29ya2luZyBtb250aCBzaG91bGQgbmV2ZXIgaGF2ZSBzd2lwZSBkaXNhYmxlZC5cbiAgICAvLyBPdGhlcndpc2UgdGhlIENTUyBzY3JvbGwgc25hcCB3aWxsIG5vdCB3b3JrIGFuZCB0aGUgdXNlclxuICAgIC8vIGNhbiBmcmVlLXNjcm9sbCB0aGUgY2FsZW5kYXIuXG4gICAgY29uc3QgaXNXb3JraW5nTW9udGggPSB0aGlzLndvcmtpbmdQYXJ0cy5tb250aCA9PT0gbW9udGggJiYgdGhpcy53b3JraW5nUGFydHMueWVhciA9PT0geWVhcjtcbiAgICBjb25zdCBhY3RpdmVQYXJ0ID0gdGhpcy5nZXREZWZhdWx0UGFydCgpO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IFwiYXJpYS1oaWRkZW5cIjogIWlzV29ya2luZ01vbnRoID8gJ3RydWUnIDogbnVsbCwgY2xhc3M6IHtcbiAgICAgICAgJ2NhbGVuZGFyLW1vbnRoJzogdHJ1ZSxcbiAgICAgICAgLy8gUHJldmVudHMgc2Nyb2xsIHNuYXAgc3dpcGUgZ2VzdHVyZXMgZm9yIG1vbnRocyBvdXRzaWRlIG9mIHRoZSBtaW4vbWF4IGJvdW5kc1xuICAgICAgICAnY2FsZW5kYXItbW9udGgtZGlzYWJsZWQnOiAhaXNXb3JraW5nTW9udGggJiYgc3dpcGVEaXNhYmxlZCxcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImNhbGVuZGFyLW1vbnRoLWdyaWRcIiB9LCBnZXREYXlzT2ZNb250aChtb250aCwgeWVhciwgdGhpcy5maXJzdERheU9mV2VlayAlIDcpLm1hcCgoZGF0ZU9iamVjdCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHsgZGF5LCBkYXlPZldlZWsgfSA9IGRhdGVPYmplY3Q7XG4gICAgICBjb25zdCB7IGlzRGF0ZUVuYWJsZWQsIG11bHRpcGxlIH0gPSB0aGlzO1xuICAgICAgY29uc3QgcmVmZXJlbmNlUGFydHMgPSB7IG1vbnRoLCBkYXksIHllYXIgfTtcbiAgICAgIGNvbnN0IHsgaXNBY3RpdmUsIGlzVG9kYXksIGFyaWFMYWJlbCwgYXJpYVNlbGVjdGVkLCBkaXNhYmxlZCwgdGV4dCB9ID0gZ2V0Q2FsZW5kYXJEYXlTdGF0ZSh0aGlzLmxvY2FsZSwgcmVmZXJlbmNlUGFydHMsIHRoaXMuYWN0aXZlUGFydHNDbG9uZSwgdGhpcy50b2RheVBhcnRzLCB0aGlzLm1pblBhcnRzLCB0aGlzLm1heFBhcnRzLCB0aGlzLnBhcnNlZERheVZhbHVlcyk7XG4gICAgICBsZXQgaXNDYWxEYXlEaXNhYmxlZCA9IGlzQ2FsTW9udGhEaXNhYmxlZCB8fCBkaXNhYmxlZDtcbiAgICAgIGlmICghaXNDYWxEYXlEaXNhYmxlZCAmJiBpc0RhdGVFbmFibGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgYGlzRGF0ZUVuYWJsZWRgIGltcGxlbWVudGF0aW9uIGlzIHRyeS1jYXRjaCB3cmFwcGVkXG4gICAgICAgICAgICogdG8gcHJldmVudCBleGNlcHRpb25zIGluIHRoZSB1c2VyJ3MgZnVuY3Rpb24gZnJvbVxuICAgICAgICAgICAqIGludGVycnVwdGluZyB0aGUgY2FsZW5kYXIgcmVuZGVyaW5nLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGlzQ2FsRGF5RGlzYWJsZWQgPSAhaXNEYXRlRW5hYmxlZChjb252ZXJ0RGF0YVRvSVNPKHJlZmVyZW5jZVBhcnRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICBwcmludElvbkVycm9yKCdFeGNlcHRpb24gdGhyb3duIGZyb20gcHJvdmlkZWQgYGlzRGF0ZUVuYWJsZWRgIGZ1bmN0aW9uLiBQbGVhc2UgY2hlY2sgeW91ciBmdW5jdGlvbiBhbmQgdHJ5IGFnYWluLicsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gKGgoXCJidXR0b25cIiwgeyB0YWJpbmRleDogXCItMVwiLCBcImRhdGEtZGF5XCI6IGRheSwgXCJkYXRhLW1vbnRoXCI6IG1vbnRoLCBcImRhdGEteWVhclwiOiB5ZWFyLCBcImRhdGEtaW5kZXhcIjogaW5kZXgsIFwiZGF0YS1kYXktb2Ytd2Vla1wiOiBkYXlPZldlZWssIGRpc2FibGVkOiBpc0NhbERheURpc2FibGVkLCBjbGFzczoge1xuICAgICAgICAgICdjYWxlbmRhci1kYXktcGFkZGluZyc6IGRheSA9PT0gbnVsbCxcbiAgICAgICAgICAnY2FsZW5kYXItZGF5JzogdHJ1ZSxcbiAgICAgICAgICAnY2FsZW5kYXItZGF5LWFjdGl2ZSc6IGlzQWN0aXZlLFxuICAgICAgICAgICdjYWxlbmRhci1kYXktdG9kYXknOiBpc1RvZGF5LFxuICAgICAgICB9LCBcImFyaWEtc2VsZWN0ZWRcIjogYXJpYVNlbGVjdGVkLCBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgaWYgKGRheSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldFdvcmtpbmdQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMud29ya2luZ1BhcnRzKSwgeyBtb250aCxcbiAgICAgICAgICAgIGRheSxcbiAgICAgICAgICAgIHllYXIgfSkpO1xuICAgICAgICAgIC8vIG11bHRpcGxlIG9ubHkgbmVlZHMgZGF0ZSBpbmZvLCBzbyB3ZSBjYW4gd2lwZSBvdXQgb3RoZXIgZmllbGRzIGxpa2UgdGltZVxuICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVQYXJ0cyh7XG4gICAgICAgICAgICAgIG1vbnRoLFxuICAgICAgICAgICAgICBkYXksXG4gICAgICAgICAgICAgIHllYXIsXG4gICAgICAgICAgICB9LCBpc0FjdGl2ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVQYXJ0cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFjdGl2ZVBhcnQpLCB7IG1vbnRoLFxuICAgICAgICAgICAgICBkYXksXG4gICAgICAgICAgICAgIHllYXIgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB9LCB0ZXh0KSk7XG4gICAgfSkpKSk7XG4gIH1cbiAgcmVuZGVyQ2FsZW5kYXJCb2R5KCkge1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImNhbGVuZGFyLWJvZHkgaW9uLWZvY3VzYWJsZVwiLCByZWY6IChlbCkgPT4gKHRoaXMuY2FsZW5kYXJCb2R5UmVmID0gZWwpLCB0YWJpbmRleDogXCIwXCIgfSwgZ2VuZXJhdGVNb250aHModGhpcy53b3JraW5nUGFydHMpLm1hcCgoeyBtb250aCwgeWVhciB9KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJNb250aChtb250aCwgeWVhcik7XG4gICAgfSkpKTtcbiAgfVxuICByZW5kZXJDYWxlbmRhcihtb2RlKSB7XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiZGF0ZXRpbWUtY2FsZW5kYXJcIiwga2V5OiBcImRhdGV0aW1lLWNhbGVuZGFyXCIgfSwgdGhpcy5yZW5kZXJDYWxlbmRhckhlYWRlcihtb2RlKSwgdGhpcy5yZW5kZXJDYWxlbmRhckJvZHkoKSkpO1xuICB9XG4gIHJlbmRlclRpbWVMYWJlbCgpIHtcbiAgICBjb25zdCBoYXNTbG90dGVkVGltZUxhYmVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCdbc2xvdD1cInRpbWUtbGFiZWxcIl0nKSAhPT0gbnVsbDtcbiAgICBpZiAoIWhhc1Nsb3R0ZWRUaW1lTGFiZWwgJiYgIXRoaXMuc2hvd0RlZmF1bHRUaW1lTGFiZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGgoXCJzbG90XCIsIHsgbmFtZTogXCJ0aW1lLWxhYmVsXCIgfSwgXCJUaW1lXCIpO1xuICB9XG4gIHJlbmRlclRpbWVPdmVybGF5KCkge1xuICAgIGNvbnN0IHVzZTI0SG91ciA9IGlzMjRIb3VyKHRoaXMubG9jYWxlLCB0aGlzLmhvdXJDeWNsZSk7XG4gICAgY29uc3QgYWN0aXZlUGFydCA9IHRoaXMuZ2V0RGVmYXVsdFBhcnQoKTtcbiAgICByZXR1cm4gW1xuICAgICAgaChcImRpdlwiLCB7IGNsYXNzOiBcInRpbWUtaGVhZGVyXCIgfSwgdGhpcy5yZW5kZXJUaW1lTGFiZWwoKSksXG4gICAgICBoKFwiYnV0dG9uXCIsIHsgY2xhc3M6IHtcbiAgICAgICAgICAndGltZS1ib2R5JzogdHJ1ZSxcbiAgICAgICAgICAndGltZS1ib2R5LWFjdGl2ZSc6IHRoaXMuaXNUaW1lUG9wb3Zlck9wZW4sXG4gICAgICAgIH0sIFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsIFwiYXJpYS1oYXNwb3B1cFwiOiBcInRydWVcIiwgb25DbGljazogYXN5bmMgKGV2KSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBwb3BvdmVyUmVmIH0gPSB0aGlzO1xuICAgICAgICAgIGlmIChwb3BvdmVyUmVmKSB7XG4gICAgICAgICAgICB0aGlzLmlzVGltZVBvcG92ZXJPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHBvcG92ZXJSZWYucHJlc2VudChuZXcgQ3VzdG9tRXZlbnQoJ2lvblNoYWRvd1RhcmdldCcsIHtcbiAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgaW9uU2hhZG93VGFyZ2V0OiBldi50YXJnZXQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBhd2FpdCBwb3BvdmVyUmVmLm9uV2lsbERpc21pc3MoKTtcbiAgICAgICAgICAgIHRoaXMuaXNUaW1lUG9wb3Zlck9wZW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gfSwgZ2V0TG9jYWxpemVkVGltZSh0aGlzLmxvY2FsZSwgYWN0aXZlUGFydCwgdXNlMjRIb3VyKSksXG4gICAgICBoKFwiaW9uLXBvcG92ZXJcIiwgeyBhbGlnbm1lbnQ6IFwiY2VudGVyXCIsIHRyYW5zbHVjZW50OiB0cnVlLCBvdmVybGF5SW5kZXg6IDEsIGFycm93OiBmYWxzZSwgb25XaWxsUHJlc2VudDogKGV2KSA9PiB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogSW50ZXJzZWN0aW9uIE9ic2VydmVycyBkbyBub3QgY29uc2lzdGVudGx5IGZpcmUgYmV0d2VlbiBCbGluayBhbmQgV2Via2l0XG4gICAgICAgICAgICogd2hlbiB0b2dnbGluZyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgcG9wb3ZlciBhbmQgdHJ5aW5nIHRvIHNjcm9sbCB0aGUgcGlja2VyXG4gICAgICAgICAgICogY29sdW1uIHRvIHRoZSBjb3JyZWN0IHRpbWUgdmFsdWUuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBUaGlzIHdpbGwgY29ycmVjdGx5IHNjcm9sbCB0aGUgZWxlbWVudCBwb3NpdGlvbiB0byB0aGUgY29ycmVjdCB0aW1lIHZhbHVlLFxuICAgICAgICAgICAqIGJlZm9yZSB0aGUgcG9wb3ZlciBpcyBmdWxseSBwcmVzZW50ZWQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3QgY29scyA9IGV2LnRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKCdpb24tcGlja2VyLWNvbHVtbi1pbnRlcm5hbCcpO1xuICAgICAgICAgIC8vIFRPRE8gKEZXLTYxNSk6IFBvdGVudGlhbGx5IHJlbW92ZSB0aGlzIHdoZW4gaW50ZXJzZWN0aW9uIG9ic2VydmVycyBhcmUgZml4ZWQgaW4gcGlja2VyIGNvbHVtblxuICAgICAgICAgIGNvbHMuZm9yRWFjaCgoY29sKSA9PiBjb2wuc2Nyb2xsQWN0aXZlSXRlbUludG9WaWV3KCkpO1xuICAgICAgICB9LCBzdHlsZToge1xuICAgICAgICAgICctLW9mZnNldC15JzogJy0xMHB4JyxcbiAgICAgICAgICAnLS1taW4td2lkdGgnOiAnZml0LWNvbnRlbnQnLFxuICAgICAgICB9LFxuICAgICAgICAvLyBBbGxvdyBuYXRpdmUgYnJvd3NlciBrZXlib2FyZCBldmVudHMgdG8gc3VwcG9ydCB1cC9kb3duL2hvbWUvZW5kIGtleVxuICAgICAgICAvLyBuYXZpZ2F0aW9uIHdpdGhpbiB0aGUgdGltZSBwaWNrZXIuXG4gICAgICAgIGtleWJvYXJkRXZlbnRzOiB0cnVlLCByZWY6IChlbCkgPT4gKHRoaXMucG9wb3ZlclJlZiA9IGVsKSB9LCB0aGlzLnJlbmRlcldoZWVsUGlja2VyKCd0aW1lJykpLFxuICAgIF07XG4gIH1cbiAgcmVuZGVyQ2FsZW5kYXJWaWV3SGVhZGVyKCkge1xuICAgIGNvbnN0IGhhc1Nsb3R0ZWRUaXRsZSA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignW3Nsb3Q9XCJ0aXRsZVwiXScpICE9PSBudWxsO1xuICAgIGlmICghaGFzU2xvdHRlZFRpdGxlICYmICF0aGlzLnNob3dEZWZhdWx0VGl0bGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBhY3RpdmVQYXJ0cywgbXVsdGlwbGUsIHRpdGxlU2VsZWN0ZWREYXRlc0Zvcm1hdHRlciB9ID0gdGhpcztcbiAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShhY3RpdmVQYXJ0cyk7XG4gICAgbGV0IGhlYWRlclRleHQ7XG4gICAgaWYgKG11bHRpcGxlICYmIGlzQXJyYXkgJiYgYWN0aXZlUGFydHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICBoZWFkZXJUZXh0ID0gYCR7YWN0aXZlUGFydHMubGVuZ3RofSBkYXlzYDsgLy8gZGVmYXVsdC9mYWxsYmFjayBmb3IgbXVsdGlwbGUgc2VsZWN0aW9uXG4gICAgICBpZiAodGl0bGVTZWxlY3RlZERhdGVzRm9ybWF0dGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBoZWFkZXJUZXh0ID0gdGl0bGVTZWxlY3RlZERhdGVzRm9ybWF0dGVyKGNvbnZlcnREYXRhVG9JU08oYWN0aXZlUGFydHMpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgIHByaW50SW9uRXJyb3IoJ0V4Y2VwdGlvbiBpbiBwcm92aWRlZCBgdGl0bGVTZWxlY3RlZERhdGVzRm9ybWF0dGVyYDogJywgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBmb3IgZXhhY3RseSAxIGRheSBzZWxlY3RlZCAobXVsdGlwbGUgc2V0IG9yIG5vdCksIHNob3cgYSBmb3JtYXR0ZWQgdmVyc2lvbiBvZiB0aGF0XG4gICAgICBoZWFkZXJUZXh0ID0gZ2V0TW9udGhBbmREYXkodGhpcy5sb2NhbGUsIHRoaXMuZ2V0RGVmYXVsdFBhcnQoKSk7XG4gICAgfVxuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImRhdGV0aW1lLWhlYWRlclwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJkYXRldGltZS10aXRsZVwiIH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJ0aXRsZVwiIH0sIFwiU2VsZWN0IERhdGVcIikpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiZGF0ZXRpbWUtc2VsZWN0ZWQtZGF0ZVwiIH0sIGhlYWRlclRleHQpKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlciB0aW1lIHBpY2tlciBpbnNpZGUgb2YgZGF0ZXRpbWUuXG4gICAqIERvIG5vdCBwYXNzIGNvbG9yIHByb3AgdG8gc2VnbWVudCBvblxuICAgKiBpT1MgbW9kZS4gTUQgc2VnbWVudCBoYXMgYmVlbiBjdXN0b21pemVkIGFuZFxuICAgKiBzaG91bGQgdGFrZSBvbiB0aGUgY29sb3IgcHJvcCwgYnV0IGlPU1xuICAgKiBzaG91bGQganVzdCBiZSB0aGUgZGVmYXVsdCBzZWdtZW50LlxuICAgKi9cbiAgcmVuZGVyVGltZSgpIHtcbiAgICBjb25zdCB7IHByZXNlbnRhdGlvbiB9ID0gdGhpcztcbiAgICBjb25zdCB0aW1lT25seVByZXNlbnRhdGlvbiA9IHByZXNlbnRhdGlvbiA9PT0gJ3RpbWUnO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImRhdGV0aW1lLXRpbWVcIiB9LCB0aW1lT25seVByZXNlbnRhdGlvbiA/IHRoaXMucmVuZGVyV2hlZWxQaWNrZXIoKSA6IHRoaXMucmVuZGVyVGltZU92ZXJsYXkoKSkpO1xuICB9XG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBtb250aC95ZWFyIHBpY2tlciB0aGF0IGlzXG4gICAqIGRpc3BsYXllZCBvbiB0aGUgY2FsZW5kYXIgZ3JpZC5cbiAgICogVGhlIC5kYXRldGltZS15ZWFyIGNsYXNzIGhhcyBhZGRpdGlvbmFsXG4gICAqIHN0eWxlcyB0aGF0IGxldCB1cyBzaG93L2hpZGUgdGhlXG4gICAqIHBpY2tlciB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGVcbiAgICogdG9nZ2xlIGluIHRoZSBjYWxlbmRhciBoZWFkZXIuXG4gICAqL1xuICByZW5kZXJDYWxlbmRhclZpZXdNb250aFllYXJQaWNrZXIoKSB7XG4gICAgcmV0dXJuIGgoXCJkaXZcIiwgeyBjbGFzczogXCJkYXRldGltZS15ZWFyXCIgfSwgdGhpcy5yZW5kZXJXaGVlbFZpZXcoJ21vbnRoLXllYXInKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlciBlbnRyeSBwb2ludFxuICAgKiBBbGwgcHJlc2VudGF0aW9uIHR5cGVzIGFyZSByZW5kZXJlZCBmcm9tIGhlcmUuXG4gICAqL1xuICByZW5kZXJEYXRldGltZShtb2RlKSB7XG4gICAgY29uc3QgeyBwcmVzZW50YXRpb24sIHByZWZlcldoZWVsIH0gPSB0aGlzO1xuICAgIC8qKlxuICAgICAqIENlcnRhaW4gcHJlc2VudGF0aW9uIHR5cGVzIGhhdmUgc2VwYXJhdGUgZ3JpZCBhbmQgd2hlZWwgZGlzcGxheXMuXG4gICAgICogSWYgcHJlZmVyV2hlZWwgaXMgdHJ1ZSB0aGVuIHdlIHNob3VsZCBzaG93IGEgd2hlZWwgcGlja2VyIGluc3RlYWQuXG4gICAgICovXG4gICAgY29uc3QgaGFzV2hlZWxWYXJpYW50ID0gcHJlc2VudGF0aW9uID09PSAnZGF0ZScgfHwgcHJlc2VudGF0aW9uID09PSAnZGF0ZS10aW1lJyB8fCBwcmVzZW50YXRpb24gPT09ICd0aW1lLWRhdGUnO1xuICAgIGlmIChwcmVmZXJXaGVlbCAmJiBoYXNXaGVlbFZhcmlhbnQpIHtcbiAgICAgIHJldHVybiBbdGhpcy5yZW5kZXJXaGVlbFZpZXcoKSwgdGhpcy5yZW5kZXJGb290ZXIoKV07XG4gICAgfVxuICAgIHN3aXRjaCAocHJlc2VudGF0aW9uKSB7XG4gICAgICBjYXNlICdkYXRlLXRpbWUnOlxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHRoaXMucmVuZGVyQ2FsZW5kYXJWaWV3SGVhZGVyKCksXG4gICAgICAgICAgdGhpcy5yZW5kZXJDYWxlbmRhcihtb2RlKSxcbiAgICAgICAgICB0aGlzLnJlbmRlckNhbGVuZGFyVmlld01vbnRoWWVhclBpY2tlcigpLFxuICAgICAgICAgIHRoaXMucmVuZGVyVGltZSgpLFxuICAgICAgICAgIHRoaXMucmVuZGVyRm9vdGVyKCksXG4gICAgICAgIF07XG4gICAgICBjYXNlICd0aW1lLWRhdGUnOlxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHRoaXMucmVuZGVyQ2FsZW5kYXJWaWV3SGVhZGVyKCksXG4gICAgICAgICAgdGhpcy5yZW5kZXJUaW1lKCksXG4gICAgICAgICAgdGhpcy5yZW5kZXJDYWxlbmRhcihtb2RlKSxcbiAgICAgICAgICB0aGlzLnJlbmRlckNhbGVuZGFyVmlld01vbnRoWWVhclBpY2tlcigpLFxuICAgICAgICAgIHRoaXMucmVuZGVyRm9vdGVyKCksXG4gICAgICAgIF07XG4gICAgICBjYXNlICd0aW1lJzpcbiAgICAgICAgcmV0dXJuIFt0aGlzLnJlbmRlclRpbWUoKSwgdGhpcy5yZW5kZXJGb290ZXIoKV07XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICBjYXNlICdtb250aC15ZWFyJzpcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICByZXR1cm4gW3RoaXMucmVuZGVyV2hlZWxWaWV3KCksIHRoaXMucmVuZGVyRm9vdGVyKCldO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB0aGlzLnJlbmRlckNhbGVuZGFyVmlld0hlYWRlcigpLFxuICAgICAgICAgIHRoaXMucmVuZGVyQ2FsZW5kYXIobW9kZSksXG4gICAgICAgICAgdGhpcy5yZW5kZXJDYWxlbmRhclZpZXdNb250aFllYXJQaWNrZXIoKSxcbiAgICAgICAgICB0aGlzLnJlbmRlckZvb3RlcigpLFxuICAgICAgICBdO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSwgZGlzYWJsZWQsIGVsLCBjb2xvciwgaXNQcmVzZW50ZWQsIHJlYWRvbmx5LCBzaG93TW9udGhBbmRZZWFyLCBwcmVmZXJXaGVlbCwgcHJlc2VudGF0aW9uLCBzaXplLCB9ID0gdGhpcztcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCBpc01vbnRoQW5kWWVhclByZXNlbnRhdGlvbiA9IHByZXNlbnRhdGlvbiA9PT0gJ3llYXInIHx8IHByZXNlbnRhdGlvbiA9PT0gJ21vbnRoJyB8fCBwcmVzZW50YXRpb24gPT09ICdtb250aC15ZWFyJztcbiAgICBjb25zdCBzaG91bGRTaG93TW9udGhBbmRZZWFyID0gc2hvd01vbnRoQW5kWWVhciB8fCBpc01vbnRoQW5kWWVhclByZXNlbnRhdGlvbjtcbiAgICBjb25zdCBtb250aFllYXJQaWNrZXJPcGVuID0gc2hvd01vbnRoQW5kWWVhciAmJiAhaXNNb250aEFuZFllYXJQcmVzZW50YXRpb247XG4gICAgY29uc3QgaGFzRGF0ZVByZXNlbnRhdGlvbiA9IHByZXNlbnRhdGlvbiA9PT0gJ2RhdGUnIHx8IHByZXNlbnRhdGlvbiA9PT0gJ2RhdGUtdGltZScgfHwgcHJlc2VudGF0aW9uID09PSAndGltZS1kYXRlJztcbiAgICBjb25zdCBoYXNXaGVlbFZhcmlhbnQgPSBoYXNEYXRlUHJlc2VudGF0aW9uICYmIHByZWZlcldoZWVsO1xuICAgIGNvbnN0IGhhc0dyaWQgPSBoYXNEYXRlUHJlc2VudGF0aW9uICYmICFwcmVmZXJXaGVlbDtcbiAgICByZW5kZXJIaWRkZW5JbnB1dCh0cnVlLCBlbCwgbmFtZSwgZm9ybWF0VmFsdWUodmFsdWUpLCBkaXNhYmxlZCk7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgXCJhcmlhLWRpc2FibGVkXCI6IGRpc2FibGVkID8gJ3RydWUnIDogbnVsbCwgb25Gb2N1czogdGhpcy5vbkZvY3VzLCBvbkJsdXI6IHRoaXMub25CbHVyLCBjbGFzczogT2JqZWN0LmFzc2lnbih7fSwgY3JlYXRlQ29sb3JDbGFzc2VzKGNvbG9yLCB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgWydkYXRldGltZS1wcmVzZW50ZWQnXTogaXNQcmVzZW50ZWQsXG4gICAgICAgIFsnZGF0ZXRpbWUtcmVhZG9ubHknXTogcmVhZG9ubHksXG4gICAgICAgIFsnZGF0ZXRpbWUtZGlzYWJsZWQnXTogZGlzYWJsZWQsXG4gICAgICAgICdzaG93LW1vbnRoLWFuZC15ZWFyJzogc2hvdWxkU2hvd01vbnRoQW5kWWVhcixcbiAgICAgICAgJ21vbnRoLXllYXItcGlja2VyLW9wZW4nOiBtb250aFllYXJQaWNrZXJPcGVuLFxuICAgICAgICBbYGRhdGV0aW1lLXByZXNlbnRhdGlvbi0ke3ByZXNlbnRhdGlvbn1gXTogdHJ1ZSxcbiAgICAgICAgW2BkYXRldGltZS1zaXplLSR7c2l6ZX1gXTogdHJ1ZSxcbiAgICAgICAgW2BkYXRldGltZS1wcmVmZXItd2hlZWxgXTogaGFzV2hlZWxWYXJpYW50LFxuICAgICAgICBbYGRhdGV0aW1lLWdyaWRgXTogaGFzR3JpZCxcbiAgICAgIH0pKSB9LCB0aGlzLnJlbmRlckRhdGV0aW1lKG1vZGUpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwiZGlzYWJsZWRcIjogW1wiZGlzYWJsZWRDaGFuZ2VkXCJdLFxuICAgIFwibWluXCI6IFtcIm1pbkNoYW5nZWRcIl0sXG4gICAgXCJtYXhcIjogW1wibWF4Q2hhbmdlZFwiXSxcbiAgICBcInllYXJWYWx1ZXNcIjogW1wieWVhclZhbHVlc0NoYW5nZWRcIl0sXG4gICAgXCJtb250aFZhbHVlc1wiOiBbXCJtb250aFZhbHVlc0NoYW5nZWRcIl0sXG4gICAgXCJkYXlWYWx1ZXNcIjogW1wiZGF5VmFsdWVzQ2hhbmdlZFwiXSxcbiAgICBcImhvdXJWYWx1ZXNcIjogW1wiaG91clZhbHVlc0NoYW5nZWRcIl0sXG4gICAgXCJtaW51dGVWYWx1ZXNcIjogW1wibWludXRlVmFsdWVzQ2hhbmdlZFwiXSxcbiAgICBcImFjdGl2ZVBhcnRzXCI6IFtcImFjdGl2ZVBhcnRzQ2hhbmdlZFwiXSxcbiAgICBcInZhbHVlXCI6IFtcInZhbHVlQ2hhbmdlZFwiXVxuICB9OyB9XG59O1xubGV0IGRhdGV0aW1lSWRzID0gMDtcbkRhdGV0aW1lLnN0eWxlID0ge1xuICBpb3M6IGRhdGV0aW1lSW9zQ3NzLFxuICBtZDogZGF0ZXRpbWVNZENzc1xufTtcblxuLyoqXG4gKiBpT1MgUGlja2VyIEVudGVyIEFuaW1hdGlvblxuICovXG5jb25zdCBpb3NFbnRlckFuaW1hdGlvbiA9IChiYXNlRWwpID0+IHtcbiAgY29uc3QgYmFzZUFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCBiYWNrZHJvcEFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCB3cmFwcGVyQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGJhY2tkcm9wQW5pbWF0aW9uXG4gICAgLmFkZEVsZW1lbnQoYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1iYWNrZHJvcCcpKVxuICAgIC5mcm9tVG8oJ29wYWNpdHknLCAwLjAxLCAndmFyKC0tYmFja2Ryb3Atb3BhY2l0eSknKVxuICAgIC5iZWZvcmVTdHlsZXMoe1xuICAgICdwb2ludGVyLWV2ZW50cyc6ICdub25lJyxcbiAgfSlcbiAgICAuYWZ0ZXJDbGVhclN0eWxlcyhbJ3BvaW50ZXItZXZlbnRzJ10pO1xuICB3cmFwcGVyQW5pbWF0aW9uXG4gICAgLmFkZEVsZW1lbnQoYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5waWNrZXItd3JhcHBlcicpKVxuICAgIC5mcm9tVG8oJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVZKDEwMCUpJywgJ3RyYW5zbGF0ZVkoMCUpJyk7XG4gIHJldHVybiBiYXNlQW5pbWF0aW9uXG4gICAgLmFkZEVsZW1lbnQoYmFzZUVsKVxuICAgIC5lYXNpbmcoJ2N1YmljLWJlemllciguMzYsLjY2LC4wNCwxKScpXG4gICAgLmR1cmF0aW9uKDQwMClcbiAgICAuYWRkQW5pbWF0aW9uKFtiYWNrZHJvcEFuaW1hdGlvbiwgd3JhcHBlckFuaW1hdGlvbl0pO1xufTtcblxuLyoqXG4gKiBpT1MgUGlja2VyIExlYXZlIEFuaW1hdGlvblxuICovXG5jb25zdCBpb3NMZWF2ZUFuaW1hdGlvbiA9IChiYXNlRWwpID0+IHtcbiAgY29uc3QgYmFzZUFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCBiYWNrZHJvcEFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCB3cmFwcGVyQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGJhY2tkcm9wQW5pbWF0aW9uXG4gICAgLmFkZEVsZW1lbnQoYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1iYWNrZHJvcCcpKVxuICAgIC5mcm9tVG8oJ29wYWNpdHknLCAndmFyKC0tYmFja2Ryb3Atb3BhY2l0eSknLCAwLjAxKTtcbiAgd3JhcHBlckFuaW1hdGlvblxuICAgIC5hZGRFbGVtZW50KGJhc2VFbC5xdWVyeVNlbGVjdG9yKCcucGlja2VyLXdyYXBwZXInKSlcbiAgICAuZnJvbVRvKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWSgwJSknLCAndHJhbnNsYXRlWSgxMDAlKScpO1xuICByZXR1cm4gYmFzZUFuaW1hdGlvblxuICAgIC5hZGRFbGVtZW50KGJhc2VFbClcbiAgICAuZWFzaW5nKCdjdWJpYy1iZXppZXIoLjM2LC42NiwuMDQsMSknKVxuICAgIC5kdXJhdGlvbig0MDApXG4gICAgLmFkZEFuaW1hdGlvbihbYmFja2Ryb3BBbmltYXRpb24sIHdyYXBwZXJBbmltYXRpb25dKTtcbn07XG5cbmNvbnN0IHBpY2tlcklvc0NzcyA9IFwiLnNjLWlvbi1waWNrZXItaW9zLWh7LS1ib3JkZXItcmFkaXVzOjA7LS1ib3JkZXItc3R5bGU6c29saWQ7LS1taW4td2lkdGg6YXV0bzstLXdpZHRoOjEwMCU7LS1tYXgtd2lkdGg6NTAwcHg7LS1taW4taGVpZ2h0OmF1dG87LS1tYXgtaGVpZ2h0OmF1dG87LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7bGVmdDowO3RvcDowO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvdXRsaW5lOm5vbmU7Zm9udC1mYW1pbHk6dmFyKC0taW9uLWZvbnQtZmFtaWx5LCBpbmhlcml0KTtjb250YWluOnN0cmljdDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7ei1pbmRleDoxMDAxfVtkaXI9cnRsXS5zYy1pb24tcGlja2VyLWlvcy1oLFtkaXI9cnRsXSAuc2MtaW9uLXBpY2tlci1pb3MtaHtsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O3JpZ2h0OjB9Lm92ZXJsYXktaGlkZGVuLnNjLWlvbi1waWNrZXItaW9zLWh7ZGlzcGxheTpub25lfS5waWNrZXItd3JhcHBlci5zYy1pb24tcGlja2VyLWlvc3tib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG87bWFyZ2luLXRvcDphdXRvO21hcmdpbi1ib3R0b206YXV0bzstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMTAwJSwgIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMTAwJSwgIDApO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmFic29sdXRlOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOnZhcigtLXdpZHRoKTttaW4td2lkdGg6dmFyKC0tbWluLXdpZHRoKTttYXgtd2lkdGg6dmFyKC0tbWF4LXdpZHRoKTtoZWlnaHQ6dmFyKC0taGVpZ2h0KTttaW4taGVpZ2h0OnZhcigtLW1pbi1oZWlnaHQpO21heC1oZWlnaHQ6dmFyKC0tbWF4LWhlaWdodCk7Ym9yZGVyLXdpZHRoOnZhcigtLWJvcmRlci13aWR0aCk7Ym9yZGVyLXN0eWxlOnZhcigtLWJvcmRlci1zdHlsZSk7Ym9yZGVyLWNvbG9yOnZhcigtLWJvcmRlci1jb2xvcik7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtjb250YWluOnN0cmljdDtvdmVyZmxvdzpoaWRkZW47ei1pbmRleDoxMH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5waWNrZXItd3JhcHBlci5zYy1pb24tcGlja2VyLWlvc3ttYXJnaW4tbGVmdDp1bnNldDttYXJnaW4tcmlnaHQ6dW5zZXQ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6YXV0bzttYXJnaW4taW5saW5lLXN0YXJ0OmF1dG87LXdlYmtpdC1tYXJnaW4tZW5kOmF1dG87bWFyZ2luLWlubGluZS1lbmQ6YXV0b319LnBpY2tlci10b29sYmFyLnNjLWlvbi1waWNrZXItaW9ze3dpZHRoOjEwMCU7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjb250YWluOnN0cmljdDt6LWluZGV4OjF9LnBpY2tlci1idXR0b24uc2MtaW9uLXBpY2tlci1pb3N7Ym9yZGVyOjA7Zm9udC1mYW1pbHk6aW5oZXJpdH0ucGlja2VyLWJ1dHRvbi5zYy1pb24tcGlja2VyLWlvczphY3RpdmUsLnBpY2tlci1idXR0b24uc2MtaW9uLXBpY2tlci1pb3M6Zm9jdXN7b3V0bGluZTpub25lfS5waWNrZXItY29sdW1ucy5zYy1pb24tcGlja2VyLWlvc3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbi1ib3R0b206dmFyKC0taW9uLXNhZmUtYXJlYS1ib3R0b20sIDApO2NvbnRhaW46c3RyaWN0O2RpcmVjdGlvbjpsdHI7b3ZlcmZsb3c6aGlkZGVufS5waWNrZXItYWJvdmUtaGlnaGxpZ2h0LnNjLWlvbi1waWNrZXItaW9zLC5waWNrZXItYmVsb3ctaGlnaGxpZ2h0LnNjLWlvbi1waWNrZXItaW9ze2Rpc3BsYXk6bm9uZTtwb2ludGVyLWV2ZW50czpub25lfS5zYy1pb24tcGlja2VyLWlvcy1oey0tYmFja2dyb3VuZDp2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZik7LS1ib3JkZXItd2lkdGg6MXB4IDAgMDstLWJvcmRlci1jb2xvcjp2YXIoLS1pb24taXRlbS1ib3JkZXItY29sb3IsIHZhcigtLWlvbi1ib3JkZXItY29sb3IsIHZhcigtLWlvbi1jb2xvci1zdGVwLTI1MCwgI2M4YzdjYykpKTstLWhlaWdodDoyNjBweDstLWJhY2tkcm9wLW9wYWNpdHk6dmFyKC0taW9uLWJhY2tkcm9wLW9wYWNpdHksIDAuMjYpO2NvbG9yOnZhcigtLWlvbi1pdGVtLWNvbG9yLCB2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCkpfS5waWNrZXItdG9vbGJhci5zYy1pb24tcGlja2VyLWlvc3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtoZWlnaHQ6NDRweDtib3JkZXItYm90dG9tOjAuNTVweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpfS5waWNrZXItdG9vbGJhci1idXR0b24uc2MtaW9uLXBpY2tlci1pb3N7LW1zLWZsZXg6MTtmbGV4OjE7dGV4dC1hbGlnbjplbmR9LnBpY2tlci10b29sYmFyLWJ1dHRvbi5zYy1pb24tcGlja2VyLWlvczpsYXN0LWNoaWxkIC5waWNrZXItYnV0dG9uLnNjLWlvbi1waWNrZXItaW9ze2ZvbnQtd2VpZ2h0OjYwMH0ucGlja2VyLXRvb2xiYXItYnV0dG9uLnNjLWlvbi1waWNrZXItaW9zOmZpcnN0LWNoaWxke2ZvbnQtd2VpZ2h0Om5vcm1hbDt0ZXh0LWFsaWduOnN0YXJ0fS5waWNrZXItYnV0dG9uLnNjLWlvbi1waWNrZXItaW9zLC5waWNrZXItYnV0dG9uLmlvbi1hY3RpdmF0ZWQuc2MtaW9uLXBpY2tlci1pb3N7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO3BhZGRpbmctbGVmdDoxZW07cGFkZGluZy1yaWdodDoxZW07cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO2hlaWdodDo0NHB4O2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y29sb3I6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMzODgwZmYpO2ZvbnQtc2l6ZToxNnB4fUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7LnBpY2tlci1idXR0b24uc2MtaW9uLXBpY2tlci1pb3MsLnBpY2tlci1idXR0b24uaW9uLWFjdGl2YXRlZC5zYy1pb24tcGlja2VyLWlvc3twYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6MWVtO3BhZGRpbmctaW5saW5lLXN0YXJ0OjFlbTstd2Via2l0LXBhZGRpbmctZW5kOjFlbTtwYWRkaW5nLWlubGluZS1lbmQ6MWVtfX0ucGlja2VyLWNvbHVtbnMuc2MtaW9uLXBpY2tlci1pb3N7aGVpZ2h0OjIxNXB4Oy13ZWJraXQtcGVyc3BlY3RpdmU6MTAwMHB4O3BlcnNwZWN0aXZlOjEwMDBweH0ucGlja2VyLWFib3ZlLWhpZ2hsaWdodC5zYy1pb24tcGlja2VyLWlvc3tsZWZ0OjA7dG9wOjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICA5MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICA5MHB4KTtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjgxcHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGNvbG9yLXN0b3AoMjAlLCB2YXIoLS1iYWNrZ3JvdW5kLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZikpKSwgdG8ocmdiYSh2YXIoLS1iYWNrZ3JvdW5kLXJnYiwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3ItcmdiLCAyNTUsIDI1NSwgMjU1KSksIDAuOCkpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHZhcigtLWJhY2tncm91bmQsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKSkgMjAlLCByZ2JhKHZhcigtLWJhY2tncm91bmQtcmdiLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1yZ2IsIDI1NSwgMjU1LCAyNTUpKSwgMC44KSAxMDAlKTt6LWluZGV4OjEwfVtkaXI9cnRsXS5zYy1pb24tcGlja2VyLWlvcyAucGlja2VyLWFib3ZlLWhpZ2hsaWdodC5zYy1pb24tcGlja2VyLWlvcyxbZGlyPXJ0bF0uc2MtaW9uLXBpY2tlci1pb3MtaCAucGlja2VyLWFib3ZlLWhpZ2hsaWdodC5zYy1pb24tcGlja2VyLWlvcyxbZGlyPXJ0bF0gLnNjLWlvbi1waWNrZXItaW9zLWggLnBpY2tlci1hYm92ZS1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1pb3N7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfS5waWNrZXItYmVsb3ctaGlnaGxpZ2h0LnNjLWlvbi1waWNrZXItaW9ze2xlZnQ6MDt0b3A6MTE1cHg7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICA5MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICA5MHB4KTtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjExOXB4O2JvcmRlci10b3A6MXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvcik7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCBib3R0b20sIGxlZnQgdG9wLCBjb2xvci1zdG9wKDMwJSwgdmFyKC0tYmFja2dyb3VuZCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpKSksIHRvKHJnYmEodmFyKC0tYmFja2dyb3VuZC1yZ2IsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXJnYiwgMjU1LCAyNTUsIDI1NSkpLCAwLjgpKSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQodG8gdG9wLCB2YXIoLS1iYWNrZ3JvdW5kLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZikpIDMwJSwgcmdiYSh2YXIoLS1iYWNrZ3JvdW5kLXJnYiwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3ItcmdiLCAyNTUsIDI1NSwgMjU1KSksIDAuOCkgMTAwJSk7ei1pbmRleDoxMX1bZGlyPXJ0bF0uc2MtaW9uLXBpY2tlci1pb3MgLnBpY2tlci1iZWxvdy1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1pb3MsW2Rpcj1ydGxdLnNjLWlvbi1waWNrZXItaW9zLWggLnBpY2tlci1iZWxvdy1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1pb3MsW2Rpcj1ydGxdIC5zYy1pb24tcGlja2VyLWlvcy1oIC5waWNrZXItYmVsb3ctaGlnaGxpZ2h0LnNjLWlvbi1waWNrZXItaW9ze2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7cmlnaHQ6MH1cIjtcblxuY29uc3QgcGlja2VyTWRDc3MgPSBcIi5zYy1pb24tcGlja2VyLW1kLWh7LS1ib3JkZXItcmFkaXVzOjA7LS1ib3JkZXItc3R5bGU6c29saWQ7LS1taW4td2lkdGg6YXV0bzstLXdpZHRoOjEwMCU7LS1tYXgtd2lkdGg6NTAwcHg7LS1taW4taGVpZ2h0OmF1dG87LS1tYXgtaGVpZ2h0OmF1dG87LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7bGVmdDowO3RvcDowO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvdXRsaW5lOm5vbmU7Zm9udC1mYW1pbHk6dmFyKC0taW9uLWZvbnQtZmFtaWx5LCBpbmhlcml0KTtjb250YWluOnN0cmljdDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7ei1pbmRleDoxMDAxfVtkaXI9cnRsXS5zYy1pb24tcGlja2VyLW1kLWgsW2Rpcj1ydGxdIC5zYy1pb24tcGlja2VyLW1kLWh7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfS5vdmVybGF5LWhpZGRlbi5zYy1pb24tcGlja2VyLW1kLWh7ZGlzcGxheTpub25lfS5waWNrZXItd3JhcHBlci5zYy1pb24tcGlja2VyLW1ke2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0bzttYXJnaW4tdG9wOmF1dG87bWFyZ2luLWJvdHRvbTphdXRvOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAxMDAlLCAgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAxMDAlLCAgMCk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6dmFyKC0td2lkdGgpO21pbi13aWR0aDp2YXIoLS1taW4td2lkdGgpO21heC13aWR0aDp2YXIoLS1tYXgtd2lkdGgpO2hlaWdodDp2YXIoLS1oZWlnaHQpO21pbi1oZWlnaHQ6dmFyKC0tbWluLWhlaWdodCk7bWF4LWhlaWdodDp2YXIoLS1tYXgtaGVpZ2h0KTtib3JkZXItd2lkdGg6dmFyKC0tYm9yZGVyLXdpZHRoKTtib3JkZXItc3R5bGU6dmFyKC0tYm9yZGVyLXN0eWxlKTtib3JkZXItY29sb3I6dmFyKC0tYm9yZGVyLWNvbG9yKTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2NvbnRhaW46c3RyaWN0O292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjEwfUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7LnBpY2tlci13cmFwcGVyLnNjLWlvbi1waWNrZXItbWR7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OmF1dG87bWFyZ2luLWlubGluZS1zdGFydDphdXRvOy13ZWJraXQtbWFyZ2luLWVuZDphdXRvO21hcmdpbi1pbmxpbmUtZW5kOmF1dG99fS5waWNrZXItdG9vbGJhci5zYy1pb24tcGlja2VyLW1ke3dpZHRoOjEwMCU7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjb250YWluOnN0cmljdDt6LWluZGV4OjF9LnBpY2tlci1idXR0b24uc2MtaW9uLXBpY2tlci1tZHtib3JkZXI6MDtmb250LWZhbWlseTppbmhlcml0fS5waWNrZXItYnV0dG9uLnNjLWlvbi1waWNrZXItbWQ6YWN0aXZlLC5waWNrZXItYnV0dG9uLnNjLWlvbi1waWNrZXItbWQ6Zm9jdXN7b3V0bGluZTpub25lfS5waWNrZXItY29sdW1ucy5zYy1pb24tcGlja2VyLW1ke2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7bWFyZ2luLWJvdHRvbTp2YXIoLS1pb24tc2FmZS1hcmVhLWJvdHRvbSwgMCk7Y29udGFpbjpzdHJpY3Q7ZGlyZWN0aW9uOmx0cjtvdmVyZmxvdzpoaWRkZW59LnBpY2tlci1hYm92ZS1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1tZCwucGlja2VyLWJlbG93LWhpZ2hsaWdodC5zYy1pb24tcGlja2VyLW1ke2Rpc3BsYXk6bm9uZTtwb2ludGVyLWV2ZW50czpub25lfS5zYy1pb24tcGlja2VyLW1kLWh7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKTstLWJvcmRlci13aWR0aDowLjU1cHggMCAwOy0tYm9yZGVyLWNvbG9yOnZhcigtLWlvbi1pdGVtLWJvcmRlci1jb2xvciwgdmFyKC0taW9uLWJvcmRlci1jb2xvciwgdmFyKC0taW9uLWNvbG9yLXN0ZXAtMTUwLCByZ2JhKDAsIDAsIDAsIDAuMTMpKSkpOy0taGVpZ2h0OjI2MHB4Oy0tYmFja2Ryb3Atb3BhY2l0eTp2YXIoLS1pb24tYmFja2Ryb3Atb3BhY2l0eSwgMC4yNik7Y29sb3I6dmFyKC0taW9uLWl0ZW0tY29sb3IsIHZhcigtLWlvbi10ZXh0LWNvbG9yLCAjMDAwKSl9LnBpY2tlci10b29sYmFyLnNjLWlvbi1waWNrZXItbWR7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtcGFjazplbmQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO2hlaWdodDo0NHB4fS5waWNrZXItYnV0dG9uLnNjLWlvbi1waWNrZXItbWQsLnBpY2tlci1idXR0b24uaW9uLWFjdGl2YXRlZC5zYy1pb24tcGlja2VyLW1ke21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDtwYWRkaW5nLWxlZnQ6MS4xZW07cGFkZGluZy1yaWdodDoxLjFlbTtwYWRkaW5nLXRvcDowO3BhZGRpbmctYm90dG9tOjA7aGVpZ2h0OjQ0cHg7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjb2xvcjp2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzM4ODBmZik7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6NTAwO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmV9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXsucGlja2VyLWJ1dHRvbi5zYy1pb24tcGlja2VyLW1kLC5waWNrZXItYnV0dG9uLmlvbi1hY3RpdmF0ZWQuc2MtaW9uLXBpY2tlci1tZHtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6MS4xZW07cGFkZGluZy1pbmxpbmUtc3RhcnQ6MS4xZW07LXdlYmtpdC1wYWRkaW5nLWVuZDoxLjFlbTtwYWRkaW5nLWlubGluZS1lbmQ6MS4xZW19fS5waWNrZXItY29sdW1ucy5zYy1pb24tcGlja2VyLW1ke2hlaWdodDoyMTZweDstd2Via2l0LXBlcnNwZWN0aXZlOjE4MDBweDtwZXJzcGVjdGl2ZToxODAwcHh9LnBpY2tlci1hYm92ZS1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1tZHtsZWZ0OjA7dG9wOjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICA5MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICA5MHB4KTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDo4MXB4O2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHZhcigtLWlvbi1pdGVtLWJvcmRlci1jb2xvciwgdmFyKC0taW9uLWJvcmRlci1jb2xvciwgdmFyKC0taW9uLWNvbG9yLXN0ZXAtMTUwLCByZ2JhKDAsIDAsIDAsIDAuMTMpKSkpO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgY29sb3Itc3RvcCgyMCUsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKSksIHRvKHJnYmEodmFyKC0taW9uLWJhY2tncm91bmQtY29sb3ItcmdiLCAyNTUsIDI1NSwgMjU1KSwgMC44KSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpIDIwJSwgcmdiYSh2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1yZ2IsIDI1NSwgMjU1LCAyNTUpLCAwLjgpIDEwMCUpO3otaW5kZXg6MTB9W2Rpcj1ydGxdLnNjLWlvbi1waWNrZXItbWQgLnBpY2tlci1hYm92ZS1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1tZCxbZGlyPXJ0bF0uc2MtaW9uLXBpY2tlci1tZC1oIC5waWNrZXItYWJvdmUtaGlnaGxpZ2h0LnNjLWlvbi1waWNrZXItbWQsW2Rpcj1ydGxdIC5zYy1pb24tcGlja2VyLW1kLWggLnBpY2tlci1hYm92ZS1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1tZHtsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O3JpZ2h0OjB9LnBpY2tlci1iZWxvdy1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1tZHtsZWZ0OjA7dG9wOjExNXB4Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAwLCAgOTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAwLCAgOTBweCk7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTE5cHg7Ym9yZGVyLXRvcDoxcHggc29saWQgdmFyKC0taW9uLWl0ZW0tYm9yZGVyLWNvbG9yLCB2YXIoLS1pb24tYm9yZGVyLWNvbG9yLCB2YXIoLS1pb24tY29sb3Itc3RlcC0xNTAsIHJnYmEoMCwgMCwgMCwgMC4xMykpKSk7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCBib3R0b20sIGxlZnQgdG9wLCBjb2xvci1zdG9wKDMwJSwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpKSwgdG8ocmdiYSh2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1yZ2IsIDI1NSwgMjU1LCAyNTUpLCAwLjgpKSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQodG8gdG9wLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZikgMzAlLCByZ2JhKHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXJnYiwgMjU1LCAyNTUsIDI1NSksIDAuOCkgMTAwJSk7ei1pbmRleDoxMX1bZGlyPXJ0bF0uc2MtaW9uLXBpY2tlci1tZCAucGlja2VyLWJlbG93LWhpZ2hsaWdodC5zYy1pb24tcGlja2VyLW1kLFtkaXI9cnRsXS5zYy1pb24tcGlja2VyLW1kLWggLnBpY2tlci1iZWxvdy1oaWdobGlnaHQuc2MtaW9uLXBpY2tlci1tZCxbZGlyPXJ0bF0gLnNjLWlvbi1waWNrZXItbWQtaCAucGlja2VyLWJlbG93LWhpZ2hsaWdodC5zYy1pb24tcGlja2VyLW1ke2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7cmlnaHQ6MH1cIjtcblxuY29uc3QgUGlja2VyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmRpZFByZXNlbnQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblBpY2tlckRpZFByZXNlbnRcIiwgNyk7XG4gICAgdGhpcy53aWxsUHJlc2VudCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uUGlja2VyV2lsbFByZXNlbnRcIiwgNyk7XG4gICAgdGhpcy53aWxsRGlzbWlzcyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uUGlja2VyV2lsbERpc21pc3NcIiwgNyk7XG4gICAgdGhpcy5kaWREaXNtaXNzID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25QaWNrZXJEaWREaXNtaXNzXCIsIDcpO1xuICAgIHRoaXMucHJlc2VudGVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUga2V5Ym9hcmQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGRpc21pc3NlZCB3aGVuIHRoZSBvdmVybGF5IGlzIHByZXNlbnRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmtleWJvYXJkQ2xvc2UgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIGJ1dHRvbnMgdG8gYmUgZGlzcGxheWVkIGF0IHRoZSB0b3Agb2YgdGhlIHBpY2tlci5cbiAgICAgKi9cbiAgICB0aGlzLmJ1dHRvbnMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBjb2x1bW5zIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgcGlja2VyLlxuICAgICAqL1xuICAgIHRoaXMuY29sdW1ucyA9IFtdO1xuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgZGlzbWlzc2luZyB0aGUgcGlja2VyLlxuICAgICAqL1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgYSBiYWNrZHJvcCB3aWxsIGJlIGRpc3BsYXllZCBiZWhpbmQgdGhlIHBpY2tlci5cbiAgICAgKi9cbiAgICB0aGlzLnNob3dCYWNrZHJvcCA9IHRydWU7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgcGlja2VyIHdpbGwgYmUgZGlzbWlzc2VkIHdoZW4gdGhlIGJhY2tkcm9wIGlzIGNsaWNrZWQuXG4gICAgICovXG4gICAgdGhpcy5iYWNrZHJvcERpc21pc3MgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHBpY2tlciB3aWxsIGFuaW1hdGUuXG4gICAgICovXG4gICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vbkJhY2tkcm9wVGFwID0gKCkgPT4ge1xuICAgICAgdGhpcy5kaXNtaXNzKHVuZGVmaW5lZCwgQkFDS0RST1ApO1xuICAgIH07XG4gICAgdGhpcy5kaXNwYXRjaENhbmNlbEhhbmRsZXIgPSAoZXYpID0+IHtcbiAgICAgIGNvbnN0IHJvbGUgPSBldi5kZXRhaWwucm9sZTtcbiAgICAgIGlmIChpc0NhbmNlbChyb2xlKSkge1xuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSB0aGlzLmJ1dHRvbnMuZmluZCgoYikgPT4gYi5yb2xlID09PSAnY2FuY2VsJyk7XG4gICAgICAgIHRoaXMuY2FsbEJ1dHRvbkhhbmRsZXIoY2FuY2VsQnV0dG9uKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHByZXBhcmVPdmVybGF5KHRoaXMuZWwpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVzZW50IHRoZSBwaWNrZXIgb3ZlcmxheSBhZnRlciBpdCBoYXMgYmVlbiBjcmVhdGVkLlxuICAgKi9cbiAgYXN5bmMgcHJlc2VudCgpIHtcbiAgICBhd2FpdCBwcmVzZW50KHRoaXMsICdwaWNrZXJFbnRlcicsIGlvc0VudGVyQW5pbWF0aW9uLCBpb3NFbnRlckFuaW1hdGlvbiwgdW5kZWZpbmVkKTtcbiAgICBpZiAodGhpcy5kdXJhdGlvbiA+IDApIHtcbiAgICAgIHRoaXMuZHVyYXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmRpc21pc3MoKSwgdGhpcy5kdXJhdGlvbik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEaXNtaXNzIHRoZSBwaWNrZXIgb3ZlcmxheSBhZnRlciBpdCBoYXMgYmVlbiBwcmVzZW50ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIEFueSBkYXRhIHRvIGVtaXQgaW4gdGhlIGRpc21pc3MgZXZlbnRzLlxuICAgKiBAcGFyYW0gcm9sZSBUaGUgcm9sZSBvZiB0aGUgZWxlbWVudCB0aGF0IGlzIGRpc21pc3NpbmcgdGhlIHBpY2tlci5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIGluIGEgYnV0dG9uIGhhbmRsZXIgZm9yIGRldGVybWluaW5nIHdoaWNoIGJ1dHRvbiB3YXNcbiAgICogY2xpY2tlZCB0byBkaXNtaXNzIHRoZSBwaWNrZXIuXG4gICAqIFNvbWUgZXhhbXBsZXMgaW5jbHVkZTogYGBcImNhbmNlbFwiYCwgYFwiZGVzdHJ1Y3RpdmVcImAsIFwic2VsZWN0ZWRcImAsIGFuZCBgXCJiYWNrZHJvcFwiYC5cbiAgICovXG4gIGRpc21pc3MoZGF0YSwgcm9sZSkge1xuICAgIGlmICh0aGlzLmR1cmF0aW9uVGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZHVyYXRpb25UaW1lb3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIGRpc21pc3ModGhpcywgZGF0YSwgcm9sZSwgJ3BpY2tlckxlYXZlJywgaW9zTGVhdmVBbmltYXRpb24sIGlvc0xlYXZlQW5pbWF0aW9uKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBwaWNrZXIgZGlkIGRpc21pc3MuXG4gICAqL1xuICBvbkRpZERpc21pc3MoKSB7XG4gICAgcmV0dXJuIGV2ZW50TWV0aG9kKHRoaXMuZWwsICdpb25QaWNrZXJEaWREaXNtaXNzJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcGlja2VyIHdpbGwgZGlzbWlzcy5cbiAgICovXG4gIG9uV2lsbERpc21pc3MoKSB7XG4gICAgcmV0dXJuIGV2ZW50TWV0aG9kKHRoaXMuZWwsICdpb25QaWNrZXJXaWxsRGlzbWlzcycpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbHVtbiB0aGF0IG1hdGNoZXMgdGhlIHNwZWNpZmllZCBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgY29sdW1uLlxuICAgKi9cbiAgZ2V0Q29sdW1uKG5hbWUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29sdW1ucy5maW5kKChjb2x1bW4pID0+IGNvbHVtbi5uYW1lID09PSBuYW1lKSk7XG4gIH1cbiAgYXN5bmMgYnV0dG9uQ2xpY2soYnV0dG9uKSB7XG4gICAgY29uc3Qgcm9sZSA9IGJ1dHRvbi5yb2xlO1xuICAgIGlmIChpc0NhbmNlbChyb2xlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlzbWlzcyh1bmRlZmluZWQsIHJvbGUpO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGREaXNtaXNzID0gYXdhaXQgdGhpcy5jYWxsQnV0dG9uSGFuZGxlcihidXR0b24pO1xuICAgIGlmIChzaG91bGREaXNtaXNzKSB7XG4gICAgICByZXR1cm4gdGhpcy5kaXNtaXNzKHRoaXMuZ2V0U2VsZWN0ZWQoKSwgYnV0dG9uLnJvbGUpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgYXN5bmMgY2FsbEJ1dHRvbkhhbmRsZXIoYnV0dG9uKSB7XG4gICAgaWYgKGJ1dHRvbikge1xuICAgICAgLy8gYSBoYW5kbGVyIGhhcyBiZWVuIHByb3ZpZGVkLCBleGVjdXRlIGl0XG4gICAgICAvLyBwYXNzIHRoZSBoYW5kbGVyIHRoZSB2YWx1ZXMgZnJvbSB0aGUgaW5wdXRzXG4gICAgICBjb25zdCBydG4gPSBhd2FpdCBzYWZlQ2FsbChidXR0b24uaGFuZGxlciwgdGhpcy5nZXRTZWxlY3RlZCgpKTtcbiAgICAgIGlmIChydG4gPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGlmIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGhhbmRsZXIgaXMgZmFsc2UgdGhlbiBkbyBub3QgZGlzbWlzc1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGdldFNlbGVjdGVkKCkge1xuICAgIGNvbnN0IHNlbGVjdGVkID0ge307XG4gICAgdGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkQ29sdW1uID0gY29sLnNlbGVjdGVkSW5kZXggIT09IHVuZGVmaW5lZCA/IGNvbC5vcHRpb25zW2NvbC5zZWxlY3RlZEluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIHNlbGVjdGVkW2NvbC5uYW1lXSA9IHtcbiAgICAgICAgdGV4dDogc2VsZWN0ZWRDb2x1bW4gPyBzZWxlY3RlZENvbHVtbi50ZXh0IDogdW5kZWZpbmVkLFxuICAgICAgICB2YWx1ZTogc2VsZWN0ZWRDb2x1bW4gPyBzZWxlY3RlZENvbHVtbi52YWx1ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgY29sdW1uSW5kZXg6IGluZGV4LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaHRtbEF0dHJpYnV0ZXMgfSA9IHRoaXM7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgcmV0dXJuIChoKEhvc3QsIE9iamVjdC5hc3NpZ24oeyBcImFyaWEtbW9kYWxcIjogXCJ0cnVlXCIsIHRhYmluZGV4OiBcIi0xXCIgfSwgaHRtbEF0dHJpYnV0ZXMsIHsgc3R5bGU6IHtcbiAgICAgICAgekluZGV4OiBgJHsyMDAwMCArIHRoaXMub3ZlcmxheUluZGV4fWAsXG4gICAgICB9LCBjbGFzczogT2JqZWN0LmFzc2lnbih7IFttb2RlXTogdHJ1ZSxcbiAgICAgICAgLy8gVXNlZCBpbnRlcm5hbGx5IGZvciBzdHlsaW5nXG4gICAgICAgIFtgcGlja2VyLSR7bW9kZX1gXTogdHJ1ZSwgJ292ZXJsYXktaGlkZGVuJzogdHJ1ZSB9LCBnZXRDbGFzc01hcCh0aGlzLmNzc0NsYXNzKSksIG9uSW9uQmFja2Ryb3BUYXA6IHRoaXMub25CYWNrZHJvcFRhcCwgb25Jb25QaWNrZXJXaWxsRGlzbWlzczogdGhpcy5kaXNwYXRjaENhbmNlbEhhbmRsZXIgfSksIGgoXCJpb24tYmFja2Ryb3BcIiwgeyB2aXNpYmxlOiB0aGlzLnNob3dCYWNrZHJvcCwgdGFwcGFibGU6IHRoaXMuYmFja2Ryb3BEaXNtaXNzIH0pLCBoKFwiZGl2XCIsIHsgdGFiaW5kZXg6IFwiMFwiIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicGlja2VyLXdyYXBwZXIgaW9uLW92ZXJsYXktd3JhcHBlclwiLCByb2xlOiBcImRpYWxvZ1wiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJwaWNrZXItdG9vbGJhclwiIH0sIHRoaXMuYnV0dG9ucy5tYXAoKGIpID0+IChoKFwiZGl2XCIsIHsgY2xhc3M6IGJ1dHRvbldyYXBwZXJDbGFzcyhiKSB9LCBoKFwiYnV0dG9uXCIsIHsgdHlwZTogXCJidXR0b25cIiwgb25DbGljazogKCkgPT4gdGhpcy5idXR0b25DbGljayhiKSwgY2xhc3M6IGJ1dHRvbkNsYXNzKGIpIH0sIGIudGV4dCkpKSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicGlja2VyLWNvbHVtbnNcIiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicGlja2VyLWFib3ZlLWhpZ2hsaWdodFwiIH0pLCB0aGlzLnByZXNlbnRlZCAmJiB0aGlzLmNvbHVtbnMubWFwKChjKSA9PiBoKFwiaW9uLXBpY2tlci1jb2x1bW5cIiwgeyBjb2w6IGMgfSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwicGlja2VyLWJlbG93LWhpZ2hsaWdodFwiIH0pKSksIGgoXCJkaXZcIiwgeyB0YWJpbmRleDogXCIwXCIgfSkpKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuY29uc3QgYnV0dG9uV3JhcHBlckNsYXNzID0gKGJ1dHRvbikgPT4ge1xuICByZXR1cm4ge1xuICAgIFtgcGlja2VyLXRvb2xiYXItJHtidXR0b24ucm9sZX1gXTogYnV0dG9uLnJvbGUgIT09IHVuZGVmaW5lZCxcbiAgICAncGlja2VyLXRvb2xiYXItYnV0dG9uJzogdHJ1ZSxcbiAgfTtcbn07XG5jb25zdCBidXR0b25DbGFzcyA9IChidXR0b24pID0+IHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyAncGlja2VyLWJ1dHRvbic6IHRydWUsICdpb24tYWN0aXZhdGFibGUnOiB0cnVlIH0sIGdldENsYXNzTWFwKGJ1dHRvbi5jc3NDbGFzcykpO1xufTtcblBpY2tlci5zdHlsZSA9IHtcbiAgaW9zOiBwaWNrZXJJb3NDc3MsXG4gIG1kOiBwaWNrZXJNZENzc1xufTtcblxuY29uc3QgcGlja2VyQ29sdW1uSW9zQ3NzID0gXCIucGlja2VyLWNvbHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleDoxO2ZsZXg6MTstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2hlaWdodDoxMDAlOy13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2NvbnRhaW46Y29udGVudH0ucGlja2VyLW9wdHN7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXg6MTtmbGV4OjE7bWF4LXdpZHRoOjEwMCV9LnBpY2tlci1vcHR7bGVmdDowO3RvcDowO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtib3JkZXI6MDt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDtjb250YWluOnN0cmljdDtvdmVyZmxvdzpoaWRkZW47d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfVtkaXI9cnRsXSAucGlja2VyLW9wdCw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgLnBpY2tlci1vcHR7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfS5waWNrZXItb3B0LnBpY2tlci1vcHQtZGlzYWJsZWR7cG9pbnRlci1ldmVudHM6bm9uZX0ucGlja2VyLW9wdC1kaXNhYmxlZHtvcGFjaXR5OjB9LnBpY2tlci1vcHRzLWxlZnR7LW1zLWZsZXgtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH0ucGlja2VyLW9wdHMtcmlnaHR7LW1zLWZsZXgtcGFjazplbmQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfS5waWNrZXItb3B0OmFjdGl2ZSwucGlja2VyLW9wdDpmb2N1c3tvdXRsaW5lOm5vbmV9LnBpY2tlci1wcmVmaXh7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXg6MTtmbGV4OjE7dGV4dC1hbGlnbjplbmQ7d2hpdGUtc3BhY2U6bm93cmFwfS5waWNrZXItc3VmZml4e3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4OjE7ZmxleDoxO3RleHQtYWxpZ246c3RhcnQ7d2hpdGUtc3BhY2U6bm93cmFwfS5waWNrZXItY29se3BhZGRpbmctbGVmdDo0cHg7cGFkZGluZy1yaWdodDo0cHg7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowOy13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkO3RyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5waWNrZXItY29se3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDo0cHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6NHB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6NHB4O3BhZGRpbmctaW5saW5lLWVuZDo0cHh9fS5waWNrZXItcHJlZml4LC5waWNrZXItc3VmZml4LC5waWNrZXItb3B0c3t0b3A6NzdweDstd2Via2l0LXRyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZDt0cmFuc2Zvcm0tc3R5bGU6cHJlc2VydmUtM2Q7Y29sb3I6aW5oZXJpdDtmb250LXNpemU6MjBweDtsaW5lLWhlaWdodDo0MnB4O3BvaW50ZXItZXZlbnRzOm5vbmV9LnBpY2tlci1vcHR7cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MDttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO2hlaWdodDo0NnB4Oy13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkO3RyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZDstd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y29sb3I6aW5oZXJpdDtmb250LXNpemU6MjBweDtsaW5lLWhlaWdodDo0MnB4Oy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47cG9pbnRlci1ldmVudHM6YXV0b31bZGlyPXJ0bF0gLnBpY2tlci1vcHQsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIC5waWNrZXItb3B0ey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjYWxjKDEwMCUgLSBjZW50ZXIpIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNhbGMoMTAwJSAtIGNlbnRlcikgY2VudGVyfVwiO1xuXG5jb25zdCBwaWNrZXJDb2x1bW5NZENzcyA9IFwiLnBpY2tlci1jb2x7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXg6MTtmbGV4OjE7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtoZWlnaHQ6MTAwJTstd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtjb250YWluOmNvbnRlbnR9LnBpY2tlci1vcHRze3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4OjE7ZmxleDoxO21heC13aWR0aDoxMDAlfS5waWNrZXItb3B0e2xlZnQ6MDt0b3A6MDtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7Ym9yZGVyOjA7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7Y29udGFpbjpzdHJpY3Q7b3ZlcmZsb3c6aGlkZGVuO3dpbGwtY2hhbmdlOnRyYW5zZm9ybX1bZGlyPXJ0bF0gLnBpY2tlci1vcHQsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIC5waWNrZXItb3B0e2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7cmlnaHQ6MH0ucGlja2VyLW9wdC5waWNrZXItb3B0LWRpc2FibGVke3BvaW50ZXItZXZlbnRzOm5vbmV9LnBpY2tlci1vcHQtZGlzYWJsZWR7b3BhY2l0eTowfS5waWNrZXItb3B0cy1sZWZ0ey1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9LnBpY2tlci1vcHRzLXJpZ2h0ey1tcy1mbGV4LXBhY2s6ZW5kO2p1c3RpZnktY29udGVudDpmbGV4LWVuZH0ucGlja2VyLW9wdDphY3RpdmUsLnBpY2tlci1vcHQ6Zm9jdXN7b3V0bGluZTpub25lfS5waWNrZXItcHJlZml4e3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4OjE7ZmxleDoxO3RleHQtYWxpZ246ZW5kO3doaXRlLXNwYWNlOm5vd3JhcH0ucGlja2VyLXN1ZmZpeHtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleDoxO2ZsZXg6MTt0ZXh0LWFsaWduOnN0YXJ0O3doaXRlLXNwYWNlOm5vd3JhcH0ucGlja2VyLWNvbHtwYWRkaW5nLWxlZnQ6OHB4O3BhZGRpbmctcmlnaHQ6OHB4O3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MDstd2Via2l0LXRyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZDt0cmFuc2Zvcm0tc3R5bGU6cHJlc2VydmUtM2R9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXsucGlja2VyLWNvbHtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6OHB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjhweDstd2Via2l0LXBhZGRpbmctZW5kOjhweDtwYWRkaW5nLWlubGluZS1lbmQ6OHB4fX0ucGlja2VyLXByZWZpeCwucGlja2VyLXN1ZmZpeCwucGlja2VyLW9wdHN7dG9wOjc3cHg7LXdlYmtpdC10cmFuc2Zvcm0tc3R5bGU6cHJlc2VydmUtM2Q7dHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkO2NvbG9yOmluaGVyaXQ7Zm9udC1zaXplOjIycHg7bGluZS1oZWlnaHQ6NDJweDtwb2ludGVyLWV2ZW50czpub25lfS5waWNrZXItb3B0e21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDtwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO2hlaWdodDo0M3B4Oy13ZWJraXQtdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjb2xvcjppbmhlcml0O2ZvbnQtc2l6ZToyMnB4O2xpbmUtaGVpZ2h0OjQycHg7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtwb2ludGVyLWV2ZW50czphdXRvfS5waWNrZXItcHJlZml4LC5waWNrZXItc3VmZml4LC5waWNrZXItb3B0LnBpY2tlci1vcHQtc2VsZWN0ZWR7Y29sb3I6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMzODgwZmYpfVwiO1xuXG5jb25zdCBQaWNrZXJDb2x1bW5DbXAgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW9uUGlja2VyQ29sQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25QaWNrZXJDb2xDaGFuZ2VcIiwgNyk7XG4gICAgdGhpcy5vcHRIZWlnaHQgPSAwO1xuICAgIHRoaXMucm90YXRlRmFjdG9yID0gMDtcbiAgICB0aGlzLnNjYWxlRmFjdG9yID0gMTtcbiAgICB0aGlzLnZlbG9jaXR5ID0gMDtcbiAgICB0aGlzLnkgPSAwO1xuICAgIHRoaXMubm9BbmltYXRlID0gdHJ1ZTtcbiAgfVxuICBjb2xDaGFuZ2VkKCkge1xuICAgIHRoaXMucmVmcmVzaCgpO1xuICB9XG4gIGFzeW5jIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIGxldCBwaWNrZXJSb3RhdGVGYWN0b3IgPSAwO1xuICAgIGxldCBwaWNrZXJTY2FsZUZhY3RvciA9IDAuODE7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgaWYgKG1vZGUgPT09ICdpb3MnKSB7XG4gICAgICBwaWNrZXJSb3RhdGVGYWN0b3IgPSAtMC40NjtcbiAgICAgIHBpY2tlclNjYWxlRmFjdG9yID0gMTtcbiAgICB9XG4gICAgdGhpcy5yb3RhdGVGYWN0b3IgPSBwaWNrZXJSb3RhdGVGYWN0b3I7XG4gICAgdGhpcy5zY2FsZUZhY3RvciA9IHBpY2tlclNjYWxlRmFjdG9yO1xuICAgIHRoaXMuZ2VzdHVyZSA9IChhd2FpdCBpbXBvcnQoJy4vaW5kZXgtZjhkOGFhNWEuanMnKSkuY3JlYXRlR2VzdHVyZSh7XG4gICAgICBlbDogdGhpcy5lbCxcbiAgICAgIGdlc3R1cmVOYW1lOiAncGlja2VyLXN3aXBlJyxcbiAgICAgIGdlc3R1cmVQcmlvcml0eTogMTAwLFxuICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBvblN0YXJ0OiAoZXYpID0+IHRoaXMub25TdGFydChldiksXG4gICAgICBvbk1vdmU6IChldikgPT4gdGhpcy5vbk1vdmUoZXYpLFxuICAgICAgb25FbmQ6IChldikgPT4gdGhpcy5vbkVuZChldiksXG4gICAgfSk7XG4gICAgdGhpcy5nZXN0dXJlLmVuYWJsZSgpO1xuICAgIHRoaXMudG1ySWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubm9BbmltYXRlID0gZmFsc2U7XG4gICAgICB0aGlzLnJlZnJlc2godHJ1ZSk7XG4gICAgfSwgMjUwKTtcbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIGNvbnN0IGNvbEVsID0gdGhpcy5vcHRzRWw7XG4gICAgaWYgKGNvbEVsKSB7XG4gICAgICAvLyBET00gUkVBRFxuICAgICAgLy8gV2UgcGVyZm9tIGEgRE9NIHJlYWQgb3ZlciBhIHJlbmRlcmVkIGl0ZW0sIHRoaXMgbmVlZHMgdG8gaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCByZW5kZXJcbiAgICAgIHRoaXMub3B0SGVpZ2h0ID0gY29sRWwuZmlyc3RFbGVtZW50Q2hpbGQgPyBjb2xFbC5maXJzdEVsZW1lbnRDaGlsZC5jbGllbnRIZWlnaHQgOiAwO1xuICAgIH1cbiAgICB0aGlzLnJlZnJlc2goKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJhZklkKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50bXJJZCk7XG4gICAgaWYgKHRoaXMuZ2VzdHVyZSkge1xuICAgICAgdGhpcy5nZXN0dXJlLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZ2VzdHVyZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgZW1pdENvbENoYW5nZSgpIHtcbiAgICB0aGlzLmlvblBpY2tlckNvbENoYW5nZS5lbWl0KHRoaXMuY29sKTtcbiAgfVxuICBzZXRTZWxlY3RlZChzZWxlY3RlZEluZGV4LCBkdXJhdGlvbikge1xuICAgIC8vIGlmIHRoZXJlIGlzIGEgc2VsZWN0ZWQgaW5kZXgsIHRoZW4gZmlndXJlIG91dCBpdCdzIHkgcG9zaXRpb25cbiAgICAvLyBpZiB0aGVyZSBpc24ndCBhIHNlbGVjdGVkIGluZGV4LCB0aGVuIGp1c3QgdXNlIHRoZSB0b3AgeSBwb3NpdGlvblxuICAgIGNvbnN0IHkgPSBzZWxlY3RlZEluZGV4ID4gLTEgPyAtKHNlbGVjdGVkSW5kZXggKiB0aGlzLm9wdEhlaWdodCkgOiAwO1xuICAgIHRoaXMudmVsb2NpdHkgPSAwO1xuICAgIC8vIHNldCB3aGF0IHkgcG9zaXRpb24gd2UncmUgYXRcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJhZklkKTtcbiAgICB0aGlzLnVwZGF0ZSh5LCBkdXJhdGlvbiwgdHJ1ZSk7XG4gICAgdGhpcy5lbWl0Q29sQ2hhbmdlKCk7XG4gIH1cbiAgdXBkYXRlKHksIGR1cmF0aW9uLCBzYXZlWSkge1xuICAgIGlmICghdGhpcy5vcHRzRWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZW5zdXJlIHdlJ3ZlIGdvdCBhIGdvb2Qgcm91bmQgbnVtYmVyIDopXG4gICAgbGV0IHRyYW5zbGF0ZVkgPSAwO1xuICAgIGxldCB0cmFuc2xhdGVaID0gMDtcbiAgICBjb25zdCB7IGNvbCwgcm90YXRlRmFjdG9yIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNlbGVjdGVkSW5kZXggPSAoY29sLnNlbGVjdGVkSW5kZXggPSB0aGlzLmluZGV4Rm9yWSgteSkpO1xuICAgIGNvbnN0IGR1cmF0aW9uU3RyID0gZHVyYXRpb24gPT09IDAgPyAnJyA6IGR1cmF0aW9uICsgJ21zJztcbiAgICBjb25zdCBzY2FsZVN0ciA9IGBzY2FsZSgke3RoaXMuc2NhbGVGYWN0b3J9KWA7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLm9wdHNFbC5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBidXR0b24gPSBjaGlsZHJlbltpXTtcbiAgICAgIGNvbnN0IG9wdCA9IGNvbC5vcHRpb25zW2ldO1xuICAgICAgY29uc3Qgb3B0T2Zmc2V0ID0gaSAqIHRoaXMub3B0SGVpZ2h0ICsgeTtcbiAgICAgIGxldCB0cmFuc2Zvcm0gPSAnJztcbiAgICAgIGlmIChyb3RhdGVGYWN0b3IgIT09IDApIHtcbiAgICAgICAgY29uc3Qgcm90YXRlWCA9IG9wdE9mZnNldCAqIHJvdGF0ZUZhY3RvcjtcbiAgICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVgpIDw9IDkwKSB7XG4gICAgICAgICAgdHJhbnNsYXRlWSA9IDA7XG4gICAgICAgICAgdHJhbnNsYXRlWiA9IDkwO1xuICAgICAgICAgIHRyYW5zZm9ybSA9IGByb3RhdGVYKCR7cm90YXRlWH1kZWcpIGA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdHJhbnNsYXRlWSA9IC05OTk5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRlWiA9IDA7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSBvcHRPZmZzZXQ7XG4gICAgICB9XG4gICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdGVkSW5kZXggPT09IGk7XG4gICAgICB0cmFuc2Zvcm0gKz0gYHRyYW5zbGF0ZTNkKDBweCwke3RyYW5zbGF0ZVl9cHgsJHt0cmFuc2xhdGVafXB4KSBgO1xuICAgICAgaWYgKHRoaXMuc2NhbGVGYWN0b3IgIT09IDEgJiYgIXNlbGVjdGVkKSB7XG4gICAgICAgIHRyYW5zZm9ybSArPSBzY2FsZVN0cjtcbiAgICAgIH1cbiAgICAgIC8vIFVwZGF0ZSB0cmFuc2l0aW9uIGR1cmF0aW9uXG4gICAgICBpZiAodGhpcy5ub0FuaW1hdGUpIHtcbiAgICAgICAgb3B0LmR1cmF0aW9uID0gMDtcbiAgICAgICAgYnV0dG9uLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZHVyYXRpb24gIT09IG9wdC5kdXJhdGlvbikge1xuICAgICAgICBvcHQuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgYnV0dG9uLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uU3RyO1xuICAgICAgfVxuICAgICAgLy8gVXBkYXRlIHRyYW5zZm9ybVxuICAgICAgaWYgKHRyYW5zZm9ybSAhPT0gb3B0LnRyYW5zZm9ybSkge1xuICAgICAgICBvcHQudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgYnV0dG9uLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIC8vIFVwZGF0ZSBzZWxlY3RlZCBpdGVtXG4gICAgICBpZiAoc2VsZWN0ZWQgIT09IG9wdC5zZWxlY3RlZCkge1xuICAgICAgICBvcHQuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoUElDS0VSX09QVF9TRUxFQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoUElDS0VSX09QVF9TRUxFQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb2wucHJldlNlbGVjdGVkID0gc2VsZWN0ZWRJbmRleDtcbiAgICBpZiAoc2F2ZVkpIHtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxuICAgIGlmICh0aGlzLmxhc3RJbmRleCAhPT0gc2VsZWN0ZWRJbmRleCkge1xuICAgICAgLy8gaGF2ZSBub3Qgc2V0IGEgbGFzdCBpbmRleCB5ZXRcbiAgICAgIGhhcHRpY1NlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICAgIHRoaXMubGFzdEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICB9XG4gIH1cbiAgZGVjZWxlcmF0ZSgpIHtcbiAgICBpZiAodGhpcy52ZWxvY2l0eSAhPT0gMCkge1xuICAgICAgLy8gc3RpbGwgZGVjZWxlcmF0aW5nXG4gICAgICB0aGlzLnZlbG9jaXR5ICo9IERFQ0VMRVJBVElPTl9GUklDVElPTjtcbiAgICAgIC8vIGRvIG5vdCBsZXQgaXQgZ28gc2xvd2VyIHRoYW4gYSB2ZWxvY2l0eSBvZiAxXG4gICAgICB0aGlzLnZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eSA+IDAgPyBNYXRoLm1heCh0aGlzLnZlbG9jaXR5LCAxKSA6IE1hdGgubWluKHRoaXMudmVsb2NpdHksIC0xKTtcbiAgICAgIGxldCB5ID0gdGhpcy55ICsgdGhpcy52ZWxvY2l0eTtcbiAgICAgIGlmICh5ID4gdGhpcy5taW5ZKSB7XG4gICAgICAgIC8vIHdob29wcywgaXQncyB0cnlpbmcgdG8gc2Nyb2xsIHVwIGZhcnRoZXIgdGhhbiB0aGUgb3B0aW9ucyB3ZSBoYXZlIVxuICAgICAgICB5ID0gdGhpcy5taW5ZO1xuICAgICAgICB0aGlzLnZlbG9jaXR5ID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHkgPCB0aGlzLm1heFkpIHtcbiAgICAgICAgLy8gZ2FoaCwgaXQncyB0cnlpbmcgdG8gc2Nyb2xsIGRvd24gZmFydGhlciB0aGFuIHdlIGNhbiFcbiAgICAgICAgeSA9IHRoaXMubWF4WTtcbiAgICAgICAgdGhpcy52ZWxvY2l0eSA9IDA7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZSh5LCAwLCB0cnVlKTtcbiAgICAgIGNvbnN0IG5vdExvY2tlZEluID0gTWF0aC5yb3VuZCh5KSAlIHRoaXMub3B0SGVpZ2h0ICE9PSAwIHx8IE1hdGguYWJzKHRoaXMudmVsb2NpdHkpID4gMTtcbiAgICAgIGlmIChub3RMb2NrZWRJbikge1xuICAgICAgICAvLyBpc24ndCBsb2NrZWQgaW4geWV0LCBrZWVwIGRlY2VsZXJhdGluZyB1bnRpbCBpdCBpc1xuICAgICAgICB0aGlzLnJhZklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuZGVjZWxlcmF0ZSgpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgdGhpcy5lbWl0Q29sQ2hhbmdlKCk7XG4gICAgICAgIGhhcHRpY1NlbGVjdGlvbkVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnkgJSB0aGlzLm9wdEhlaWdodCAhPT0gMCkge1xuICAgICAgLy8gbmVlZHMgdG8gc3RpbGwgZ2V0IGxvY2tlZCBpbnRvIGEgcG9zaXRpb24gc28gb3B0aW9ucyBsaW5lIHVwXG4gICAgICBjb25zdCBjdXJyZW50UG9zID0gTWF0aC5hYnModGhpcy55ICUgdGhpcy5vcHRIZWlnaHQpO1xuICAgICAgLy8gY3JlYXRlIGEgdmVsb2NpdHkgaW4gdGhlIGRpcmVjdGlvbiBpdCBuZWVkcyB0byBzY3JvbGxcbiAgICAgIHRoaXMudmVsb2NpdHkgPSBjdXJyZW50UG9zID4gdGhpcy5vcHRIZWlnaHQgLyAyID8gMSA6IC0xO1xuICAgICAgdGhpcy5kZWNlbGVyYXRlKCk7XG4gICAgfVxuICB9XG4gIGluZGV4Rm9yWSh5KSB7XG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KE1hdGguYWJzKE1hdGgucm91bmQoeSAvIHRoaXMub3B0SGVpZ2h0KSksIDApLCB0aGlzLmNvbC5vcHRpb25zLmxlbmd0aCAtIDEpO1xuICB9XG4gIC8vIFRPRE8gc2hvdWxkIHRoaXMgY2hlY2sgZGlzYWJsZWQ/XG4gIG9uU3RhcnQoZGV0YWlsKSB7XG4gICAgLy8gV2UgaGF2ZSB0byBwcmV2ZW50IGRlZmF1bHQgaW4gb3JkZXIgdG8gYmxvY2sgc2Nyb2xsaW5nIHVuZGVyIHRoZSBwaWNrZXJcbiAgICAvLyBidXQgd2UgRE8gTk9UIGhhdmUgdG8gc3RvcCBwcm9wYWdhdGlvbiwgc2luY2Ugd2Ugc3RpbGwgd2FudFxuICAgIC8vIHNvbWUgXCJjbGlja1wiIGV2ZW50cyB0byBjYXB0dXJlXG4gICAgaWYgKGRldGFpbC5ldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICBkZXRhaWwuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgZGV0YWlsLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGhhcHRpY1NlbGVjdGlvblN0YXJ0KCk7XG4gICAgLy8gcmVzZXQgZXZlcnl0aGluZ1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmFmSWQpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmNvbC5vcHRpb25zO1xuICAgIGxldCBtaW5ZID0gb3B0aW9ucy5sZW5ndGggLSAxO1xuICAgIGxldCBtYXhZID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb3B0aW9uc1tpXS5kaXNhYmxlZCkge1xuICAgICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgaSk7XG4gICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5taW5ZID0gLShtaW5ZICogdGhpcy5vcHRIZWlnaHQpO1xuICAgIHRoaXMubWF4WSA9IC0obWF4WSAqIHRoaXMub3B0SGVpZ2h0KTtcbiAgfVxuICBvbk1vdmUoZGV0YWlsKSB7XG4gICAgaWYgKGRldGFpbC5ldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICBkZXRhaWwuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgZGV0YWlsLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIC8vIHVwZGF0ZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHBvaW50ZXIgc3RhcnQgcG9zaXRpb25cbiAgICBsZXQgeSA9IHRoaXMueSArIGRldGFpbC5kZWx0YVk7XG4gICAgaWYgKHkgPiB0aGlzLm1pblkpIHtcbiAgICAgIC8vIHNjcm9sbGluZyB1cCBoaWdoZXIgdGhhbiBzY3JvbGwgYXJlYVxuICAgICAgeSA9IE1hdGgucG93KHksIDAuOCk7XG4gICAgICB0aGlzLmJvdW5jZUZyb20gPSB5O1xuICAgIH1cbiAgICBlbHNlIGlmICh5IDwgdGhpcy5tYXhZKSB7XG4gICAgICAvLyBzY3JvbGxpbmcgZG93biBiZWxvdyBzY3JvbGwgYXJlYVxuICAgICAgeSArPSBNYXRoLnBvdyh0aGlzLm1heFkgLSB5LCAwLjkpO1xuICAgICAgdGhpcy5ib3VuY2VGcm9tID0geTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmJvdW5jZUZyb20gPSAwO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZSh5LCAwLCBmYWxzZSk7XG4gIH1cbiAgb25FbmQoZGV0YWlsKSB7XG4gICAgaWYgKHRoaXMuYm91bmNlRnJvbSA+IDApIHtcbiAgICAgIC8vIGJvdW5jZSBiYWNrIHVwXG4gICAgICB0aGlzLnVwZGF0ZSh0aGlzLm1pblksIDEwMCwgdHJ1ZSk7XG4gICAgICB0aGlzLmVtaXRDb2xDaGFuZ2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5ib3VuY2VGcm9tIDwgMCkge1xuICAgICAgLy8gYm91bmNlIGJhY2sgZG93blxuICAgICAgdGhpcy51cGRhdGUodGhpcy5tYXhZLCAxMDAsIHRydWUpO1xuICAgICAgdGhpcy5lbWl0Q29sQ2hhbmdlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudmVsb2NpdHkgPSBjbGFtcCgtTUFYX1BJQ0tFUl9TUEVFRCwgZGV0YWlsLnZlbG9jaXR5WSAqIDIzLCBNQVhfUElDS0VSX1NQRUVEKTtcbiAgICBpZiAodGhpcy52ZWxvY2l0eSA9PT0gMCAmJiBkZXRhaWwuZGVsdGFZID09PSAwKSB7XG4gICAgICBjb25zdCBvcHQgPSBkZXRhaWwuZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5waWNrZXItb3B0Jyk7XG4gICAgICBpZiAob3B0ID09PSBudWxsIHx8IG9wdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0Lmhhc0F0dHJpYnV0ZSgnb3B0LWluZGV4JykpIHtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZChwYXJzZUludChvcHQuZ2V0QXR0cmlidXRlKCdvcHQtaW5kZXgnKSwgMTApLCBUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnkgKz0gZGV0YWlsLmRlbHRhWTtcbiAgICAgIGlmIChNYXRoLmFicyhkZXRhaWwudmVsb2NpdHlZKSA8IDAuMDUpIHtcbiAgICAgICAgY29uc3QgaXNTY3JvbGxpbmdVcCA9IGRldGFpbC5kZWx0YVkgPiAwO1xuICAgICAgICBjb25zdCBvcHRIZWlnaHRGcmFjdGlvbiA9IChNYXRoLmFicyh0aGlzLnkpICUgdGhpcy5vcHRIZWlnaHQpIC8gdGhpcy5vcHRIZWlnaHQ7XG4gICAgICAgIGlmIChpc1Njcm9sbGluZ1VwICYmIG9wdEhlaWdodEZyYWN0aW9uID4gMC41KSB7XG4gICAgICAgICAgdGhpcy52ZWxvY2l0eSA9IE1hdGguYWJzKHRoaXMudmVsb2NpdHkpICogLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzU2Nyb2xsaW5nVXAgJiYgb3B0SGVpZ2h0RnJhY3Rpb24gPD0gMC41KSB7XG4gICAgICAgICAgdGhpcy52ZWxvY2l0eSA9IE1hdGguYWJzKHRoaXMudmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmRlY2VsZXJhdGUoKTtcbiAgICB9XG4gIH1cbiAgcmVmcmVzaChmb3JjZVJlZnJlc2gpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IG1pbiA9IHRoaXMuY29sLm9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jb2wub3B0aW9ucztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb3B0aW9uc1tpXS5kaXNhYmxlZCkge1xuICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGkpO1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGkpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHVwZGF0ZSBzZWxlY3RlZCB2YWx1ZSBpZiBjb2x1bW4gaGFzIGFcbiAgICAgKiB2ZWxvY2l0eSBvZiAwLiBJZiBpdCBkb2VzIG5vdCwgdGhlbiB0aGVcbiAgICAgKiBjb2x1bW4gaXMgYW5pbWF0aW5nIG1pZ2h0IGxhbmQgb25cbiAgICAgKiBhIHZhbHVlIGRpZmZlcmVudCB0aGFuIHRoZSB2YWx1ZSBhdFxuICAgICAqIHNlbGVjdGVkSW5kZXhcbiAgICAgKi9cbiAgICBpZiAodGhpcy52ZWxvY2l0eSAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gY2xhbXAobWluLCAoX2EgPSB0aGlzLmNvbC5zZWxlY3RlZEluZGV4KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwLCBtYXgpO1xuICAgIGlmICh0aGlzLmNvbC5wcmV2U2VsZWN0ZWQgIT09IHNlbGVjdGVkSW5kZXggfHwgZm9yY2VSZWZyZXNoKSB7XG4gICAgICBjb25zdCB5ID0gc2VsZWN0ZWRJbmRleCAqIHRoaXMub3B0SGVpZ2h0ICogLTE7XG4gICAgICB0aGlzLnZlbG9jaXR5ID0gMDtcbiAgICAgIHRoaXMudXBkYXRlKHksIFRSQU5TSVRJT05fRFVSQVRJT04sIHRydWUpO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY29sID0gdGhpcy5jb2w7XG4gICAgY29uc3QgQnV0dG9uID0gJ2J1dHRvbic7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICAncGlja2VyLWNvbCc6IHRydWUsXG4gICAgICAgICdwaWNrZXItb3B0cy1sZWZ0JzogdGhpcy5jb2wuYWxpZ24gPT09ICdsZWZ0JyxcbiAgICAgICAgJ3BpY2tlci1vcHRzLXJpZ2h0JzogdGhpcy5jb2wuYWxpZ24gPT09ICdyaWdodCcsXG4gICAgICB9LCBzdHlsZToge1xuICAgICAgICAnbWF4LXdpZHRoJzogdGhpcy5jb2wuY29sdW1uV2lkdGgsXG4gICAgICB9IH0sIGNvbC5wcmVmaXggJiYgKGgoXCJkaXZcIiwgeyBjbGFzczogXCJwaWNrZXItcHJlZml4XCIsIHN0eWxlOiB7IHdpZHRoOiBjb2wucHJlZml4V2lkdGggfSB9LCBjb2wucHJlZml4KSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJwaWNrZXItb3B0c1wiLCBzdHlsZTogeyBtYXhXaWR0aDogY29sLm9wdGlvbnNXaWR0aCB9LCByZWY6IChlbCkgPT4gKHRoaXMub3B0c0VsID0gZWwpIH0sIGNvbC5vcHRpb25zLm1hcCgobywgaW5kZXgpID0+IChoKEJ1dHRvbiwgeyB0eXBlOiBcImJ1dHRvblwiLCBjbGFzczogeyAncGlja2VyLW9wdCc6IHRydWUsICdwaWNrZXItb3B0LWRpc2FibGVkJzogISFvLmRpc2FibGVkIH0sIFwib3B0LWluZGV4XCI6IGluZGV4IH0sIG8udGV4dCkpKSksIGNvbC5zdWZmaXggJiYgKGgoXCJkaXZcIiwgeyBjbGFzczogXCJwaWNrZXItc3VmZml4XCIsIHN0eWxlOiB7IHdpZHRoOiBjb2wuc3VmZml4V2lkdGggfSB9LCBjb2wuc3VmZml4KSkpKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG4gIHN0YXRpYyBnZXQgd2F0Y2hlcnMoKSB7IHJldHVybiB7XG4gICAgXCJjb2xcIjogW1wiY29sQ2hhbmdlZFwiXVxuICB9OyB9XG59O1xuY29uc3QgUElDS0VSX09QVF9TRUxFQ1RFRCA9ICdwaWNrZXItb3B0LXNlbGVjdGVkJztcbmNvbnN0IERFQ0VMRVJBVElPTl9GUklDVElPTiA9IDAuOTc7XG5jb25zdCBNQVhfUElDS0VSX1NQRUVEID0gOTA7XG5jb25zdCBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuUGlja2VyQ29sdW1uQ21wLnN0eWxlID0ge1xuICBpb3M6IHBpY2tlckNvbHVtbklvc0NzcyxcbiAgbWQ6IHBpY2tlckNvbHVtbk1kQ3NzXG59O1xuXG5leHBvcnQgeyBEYXRldGltZSBhcyBpb25fZGF0ZXRpbWUsIFBpY2tlciBhcyBpb25fcGlja2VyLCBQaWNrZXJDb2x1bW5DbXAgYXMgaW9uX3BpY2tlcl9jb2x1bW4gfTtcbiJdLCJuYW1lcyI6WyJyIiwicmVnaXN0ZXJJbnN0YW5jZSIsImUiLCJjcmVhdGVFdmVudCIsImMiLCJ3cml0ZVRhc2siLCJoIiwiSCIsIkhvc3QiLCJpIiwiZ2V0RWxlbWVudCIsImNoZXZyb25CYWNrIiwibyIsImNoZXZyb25Gb3J3YXJkIiwibCIsImNoZXZyb25Eb3duIiwicCIsImNhcmV0VXBTaGFycCIsInEiLCJjYXJldERvd25TaGFycCIsImIiLCJnZXRJb25Nb2RlIiwic3RhcnRGb2N1c1Zpc2libGUiLCJyYWYiLCJyZW5kZXJIaWRkZW5JbnB1dCIsImciLCJnZXRFbGVtZW50Um9vdCIsImNsYW1wIiwicHJpbnRJb25XYXJuaW5nIiwicHJpbnRJb25FcnJvciIsImlzUlRMIiwiY3JlYXRlQ29sb3JDbGFzc2VzIiwiZ2V0Q2xhc3NNYXAiLCJnZW5lcmF0ZURheUFyaWFMYWJlbCIsImEiLCJnZXREYXkiLCJpc0JlZm9yZSIsImlzQWZ0ZXIiLCJpc1NhbWVEYXkiLCJkIiwiZ2V0UHJldmlvdXNNb250aCIsImdldE5leHRNb250aCIsInBhcnNlRGF0ZSIsImYiLCJnZXRUb2RheSIsInYiLCJ2YWxpZGF0ZVBhcnRzIiwiZ2V0UGFydHNGcm9tQ2FsZW5kYXJEYXkiLCJqIiwiZ2V0RW5kT2ZXZWVrIiwiayIsImdldFN0YXJ0T2ZXZWVrIiwiZ2V0UHJldmlvdXNEYXkiLCJtIiwiZ2V0TmV4dERheSIsIm4iLCJnZXRQcmV2aW91c1dlZWsiLCJnZXROZXh0V2VlayIsInBhcnNlTWluUGFydHMiLCJwYXJzZU1heFBhcnRzIiwidyIsIndhcm5JZlZhbHVlT3V0T2ZCb3VuZHMiLCJzIiwiY29udmVydFRvQXJyYXlPZk51bWJlcnMiLCJ0IiwiY29udmVydERhdGFUb0lTTyIsInUiLCJnZXROdW1EYXlzSW5Nb250aCIsIngiLCJnZXRDb21iaW5lZERhdGVDb2x1bW5EYXRhIiwieSIsImdldE1vbnRoQ29sdW1uRGF0YSIsInoiLCJnZXREYXlDb2x1bW5EYXRhIiwiQSIsImdldFllYXJDb2x1bW5EYXRhIiwiQiIsImlzTW9udGhGaXJzdExvY2FsZSIsIkMiLCJnZXRUaW1lQ29sdW1uc0RhdGEiLCJEIiwiaXNMb2NhbGVEYXlQZXJpb2RSVEwiLCJFIiwiZ2V0RGF5c09mV2VlayIsIkYiLCJnZXRNb250aEFuZFllYXIiLCJHIiwiZ2V0RGF5c09mTW9udGgiLCJnZW5lcmF0ZU1vbnRocyIsIkkiLCJpczI0SG91ciIsIkoiLCJnZXRMb2NhbGl6ZWRUaW1lIiwiSyIsImdldE1vbnRoQW5kRGF5IiwiTCIsImZvcm1hdFZhbHVlIiwiTSIsImdldE5leHRZZWFyIiwiTiIsImdldFByZXZpb3VzWWVhciIsIk8iLCJjbGFtcERhdGUiLCJQIiwicGFyc2VBbVBtIiwiUSIsImNhbGN1bGF0ZUhvdXJGcm9tQU1QTSIsIkJBQ0tEUk9QIiwiaXNDYW5jZWwiLCJwcmVwYXJlT3ZlcmxheSIsInByZXNlbnQiLCJkaXNtaXNzIiwiZXZlbnRNZXRob2QiLCJzYWZlQ2FsbCIsImNyZWF0ZUFuaW1hdGlvbiIsImhhcHRpY1NlbGVjdGlvbkNoYW5nZWQiLCJoYXB0aWNTZWxlY3Rpb25FbmQiLCJoYXB0aWNTZWxlY3Rpb25TdGFydCIsImlzWWVhckRpc2FibGVkIiwicmVmWWVhciIsIm1pblBhcnRzIiwibWF4UGFydHMiLCJ5ZWFyIiwiaXNEYXlEaXNhYmxlZCIsInJlZlBhcnRzIiwiZGF5VmFsdWVzIiwiZGF5IiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiLCJnZXRDYWxlbmRhckRheVN0YXRlIiwibG9jYWxlIiwiYWN0aXZlUGFydHMiLCJ0b2RheVBhcnRzIiwiYWN0aXZlUGFydHNBcnJheSIsIkFycmF5IiwiaXNBcnJheSIsImlzQWN0aXZlIiwiZmluZCIsInBhcnRzIiwiaXNUb2RheSIsImRpc2FibGVkIiwiYXJpYVNlbGVjdGVkIiwiYXJpYUxhYmVsIiwidGV4dCIsImlzTW9udGhEaXNhYmxlZCIsImlzUHJldk1vbnRoRGlzYWJsZWQiLCJwcmV2TW9udGgiLCJPYmplY3QiLCJhc3NpZ24iLCJpc05leHRNb250aERpc2FibGVkIiwibmV4dE1vbnRoIiwiZGF0ZXRpbWVJb3NDc3MiLCJkYXRldGltZU1kQ3NzIiwiRGF0ZXRpbWUiLCJjb25zdHJ1Y3RvciIsImhvc3RSZWYiLCJpb25DYW5jZWwiLCJpb25DaGFuZ2UiLCJpb25Gb2N1cyIsImlvbkJsdXIiLCJpb25TdHlsZSIsImlvblJlbmRlciIsImlucHV0SWQiLCJkYXRldGltZUlkcyIsInByZXZQcmVzZW50YXRpb24iLCJhY3RpdmVQYXJ0c0Nsb25lIiwic2hvd01vbnRoQW5kWWVhciIsIndvcmtpbmdQYXJ0cyIsIm1vbnRoIiwiaG91ciIsIm1pbnV0ZSIsImFtcG0iLCJpc1ByZXNlbnRlZCIsImlzVGltZVBvcG92ZXJPcGVuIiwiY29sb3IiLCJuYW1lIiwicmVhZG9ubHkiLCJwcmVzZW50YXRpb24iLCJjYW5jZWxUZXh0IiwiZG9uZVRleHQiLCJjbGVhclRleHQiLCJmaXJzdERheU9mV2VlayIsIm11bHRpcGxlIiwic2hvd0RlZmF1bHRUaXRsZSIsInNob3dEZWZhdWx0QnV0dG9ucyIsInNob3dDbGVhckJ1dHRvbiIsInNob3dEZWZhdWx0VGltZUxhYmVsIiwic2l6ZSIsInByZWZlcldoZWVsIiwiZ2V0RGVmYXVsdFBhcnQiLCJmaXJzdFBhcnQiLCJjbG9zZVBhcmVudE92ZXJsYXkiLCJwb3BvdmVyT3JNb2RhbCIsImVsIiwiY2xvc2VzdCIsInNldFdvcmtpbmdQYXJ0cyIsInNldEFjdGl2ZVBhcnRzIiwicmVtb3ZlRGF0ZSIsInZhbGlkYXRlZFBhcnRzIiwiZmlsdGVyIiwiaGFzU2xvdHRlZEJ1dHRvbnMiLCJxdWVyeVNlbGVjdG9yIiwiY29uZmlybSIsImluaXRpYWxpemVLZXlib2FyZExpc3RlbmVycyIsImNhbGVuZGFyQm9keVJlZiIsInJvb3QiLCJzaGFkb3dSb290IiwiY3VycmVudE1vbnRoIiwiY2hlY2tDYWxlbmRhckJvZHlGb2N1cyIsImV2IiwiX2EiLCJyZWNvcmQiLCJvbGRWYWx1ZSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZm9jdXNXb3JraW5nRGF5IiwibW8iLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZUZpbHRlciIsImF0dHJpYnV0ZU9sZFZhbHVlIiwiZGVzdHJveUtleWJvYXJkTU8iLCJkaXNjb25uZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUVsZW1lbnQiLCJwYXJ0c1RvRm9jdXMiLCJrZXkiLCJwcmV2ZW50RGVmYXVsdCIsInNoaWZ0S2V5IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicGFkZGluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkYXlFbCIsImxlbmd0aCIsImZvY3VzIiwicHJvY2Vzc01pblBhcnRzIiwibWluIiwicHJvY2Vzc01heFBhcnRzIiwibWF4IiwiaW5pdGlhbGl6ZUNhbGVuZGFyTGlzdGVuZXIiLCJtb250aHMiLCJzdGFydE1vbnRoIiwid29ya2luZ01vbnRoIiwiZW5kTW9udGgiLCJtb2RlIiwibmVlZHNpT1NSdWJiZXJCYW5kRml4IiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJzY3JvbGxMZWZ0IiwiY2xpZW50V2lkdGgiLCJnZXRDaGFuZ2VkTW9udGgiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbGVtZW50QXRDZW50ZXIiLCJlbGVtZW50RnJvbVBvaW50Iiwid2lkdGgiLCJoZWlnaHQiLCJtb250aEJveCIsIk1hdGgiLCJhYnMiLCJ1cGRhdGVBY3RpdmVNb250aCIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJhcHBsaWVkaU9TUnViYmVyQmFuZEZpeCIsIm5ld0RhdGUiLCJzZXRQcm9wZXJ0eSIsInNjcm9sbFRpbWVvdXQiLCJzY3JvbGxDYWxsYmFjayIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJkZXN0cm95Q2FsZW5kYXJMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXN0cm95SW50ZXJhY3Rpb25MaXN0ZW5lcnMiLCJwcm9jZXNzVmFsdWUiLCJ2YWx1ZSIsImhhc1ZhbHVlIiwidmFsdWVUb1Byb2Nlc3MiLCJzaW5nbGVWYWx1ZSIsInR6T2Zmc2V0Iiwib25Gb2N1cyIsImVtaXQiLCJvbkJsdXIiLCJsZWZ0Iiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxUbyIsInRvcCIsImJlaGF2aW9yIiwidG9nZ2xlTW9udGhBbmRZZWFyVmlldyIsImRpc2FibGVkQ2hhbmdlZCIsImVtaXRTdHlsZSIsIm1pbkNoYW5nZWQiLCJtYXhDaGFuZ2VkIiwieWVhclZhbHVlc0NoYW5nZWQiLCJwYXJzZWRZZWFyVmFsdWVzIiwieWVhclZhbHVlcyIsIm1vbnRoVmFsdWVzQ2hhbmdlZCIsInBhcnNlZE1vbnRoVmFsdWVzIiwibW9udGhWYWx1ZXMiLCJkYXlWYWx1ZXNDaGFuZ2VkIiwicGFyc2VkRGF5VmFsdWVzIiwiaG91clZhbHVlc0NoYW5nZWQiLCJwYXJzZWRIb3VyVmFsdWVzIiwiaG91clZhbHVlcyIsIm1pbnV0ZVZhbHVlc0NoYW5nZWQiLCJwYXJzZWRNaW51dGVWYWx1ZXMiLCJtaW51dGVWYWx1ZXMiLCJhY3RpdmVQYXJ0c0NoYW5nZWQiLCJ2YWx1ZUNoYW5nZWQiLCJ2YWx1ZURhdGVQYXJ0cyIsImNsb3NlT3ZlcmxheSIsImlzQ2FsZW5kYXJQaWNrZXIiLCJhY3RpdmVQYXJ0c0lzQXJyYXkiLCJkYXRlcyIsIm1hcCIsInN0ciIsIkRhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImRhdGUiLCJyZXNldCIsInN0YXJ0RGF0ZSIsImNhbmNlbCIsImNvbm5lY3RlZENhbGxiYWNrIiwiY2xlYXJGb2N1c1Zpc2libGUiLCJkZXN0cm95IiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJpbml0aWFsaXplTGlzdGVuZXJzIiwiY29tcG9uZW50RGlkTG9hZCIsInZpc2libGVDYWxsYmFjayIsImVudHJpZXMiLCJpc0ludGVyc2VjdGluZyIsImFkZCIsInZpc2libGVJTyIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwidGhyZXNob2xkIiwiaGlkZGVuQ2FsbGJhY2siLCJyZW1vdmUiLCJoaWRkZW5JTyIsInN0b3BQcm9wYWdhdGlvbiIsImNvbXBvbmVudERpZFJlbmRlciIsImhhc0NhbGVuZGFyR3JpZCIsImNvbXBvbmVudFdpbGxMb2FkIiwiaW50ZXJhY3RpdmUiLCJkYXRldGltZSIsInJlbmRlckZvb3RlciIsImNsZWFyQnV0dG9uQ2xpY2siLCJjbGFzcyIsImlkIiwib25DbGljayIsInJlbmRlcldoZWVsUGlja2VyIiwiZm9yY2VQcmVzZW50YXRpb24iLCJyZW5kZXJBcnJheSIsInJlbmRlclRpbWVQaWNrZXJDb2x1bW5zIiwicmVuZGVyRGF0ZVBpY2tlckNvbHVtbnMiLCJyZW5kZXJDb21iaW5lZERhdGVQaWNrZXJDb2x1bW4iLCJyZW5kZXJJbmRpdmlkdWFsRGF0ZVBpY2tlckNvbHVtbnMiLCJpc0RhdGVFbmFibGVkIiwiYWN0aXZlUGFydCIsIm1vbnRoc1RvUmVuZGVyIiwibGFzdE1vbnRoIiwicmVzdWx0IiwiaXRlbXMiLCJpdGVtT2JqZWN0IiwiaW5kZXgiLCJyZWZlcmVuY2VQYXJ0cyIsInRvZGF5U3RyaW5nIiwib25Jb25DaGFuZ2UiLCJkZXRhaWwiLCJmaW5kUGFydCIsInNob3VsZFJlbmRlck1vbnRocyIsInNob3VsZFJlbmRlckRheXMiLCJkYXlzIiwiZGF5T2JqZWN0IiwidmFsdWVOdW0iLCJwYXJzZUludCIsInNob3VsZFJlbmRlclllYXJzIiwieWVhcnMiLCJzaG93TW9udGhGaXJzdCIsInJlbmRlck1vbnRoUGlja2VyQ29sdW1uIiwicmVuZGVyRGF5UGlja2VyQ29sdW1uIiwicmVuZGVyWWVhclBpY2tlckNvbHVtbiIsInZhbHVlSXNEZWZpbmVkIiwiaG91cnNEYXRhIiwibWludXRlc0RhdGEiLCJkYXlQZXJpb2REYXRhIiwiaG91ckN5Y2xlIiwicmVuZGVySG91clBpY2tlckNvbHVtbiIsInJlbmRlck1pbnV0ZVBpY2tlckNvbHVtbiIsInJlbmRlckRheVBlcmlvZFBpY2tlckNvbHVtbiIsIm51bWVyaWNJbnB1dCIsImlzRGF5UGVyaW9kUlRMIiwib3JkZXIiLCJyZW5kZXJXaGVlbFZpZXciLCJjb2x1bW5PcmRlciIsInJlbmRlckNhbGVuZGFySGVhZGVyIiwiZXhwYW5kZWRJY29uIiwiY29sbGFwc2VkSWNvbiIsInByZXZNb250aERpc2FibGVkIiwibmV4dE1vbnRoRGlzYWJsZWQiLCJidXR0b24iLCJsaW5lcyIsImljb24iLCJsYXp5Iiwic2xvdCIsImZsaXBSdGwiLCJyZW5kZXJNb250aCIsInllYXJBbGxvd2VkIiwibW9udGhBbGxvd2VkIiwiaXNDYWxNb250aERpc2FibGVkIiwic3dpcGVEaXNhYmxlZCIsImlzV29ya2luZ01vbnRoIiwiZGF0ZU9iamVjdCIsImRheU9mV2VlayIsImlzQ2FsRGF5RGlzYWJsZWQiLCJ0YWJpbmRleCIsInJlbmRlckNhbGVuZGFyQm9keSIsInJlZiIsInJlbmRlckNhbGVuZGFyIiwicmVuZGVyVGltZUxhYmVsIiwiaGFzU2xvdHRlZFRpbWVMYWJlbCIsInJlbmRlclRpbWVPdmVybGF5IiwidXNlMjRIb3VyIiwicG9wb3ZlclJlZiIsIkN1c3RvbUV2ZW50IiwiaW9uU2hhZG93VGFyZ2V0IiwidGFyZ2V0Iiwib25XaWxsRGlzbWlzcyIsImFsaWdubWVudCIsInRyYW5zbHVjZW50Iiwib3ZlcmxheUluZGV4IiwiYXJyb3ciLCJvbldpbGxQcmVzZW50IiwiY29scyIsImZvckVhY2giLCJjb2wiLCJzY3JvbGxBY3RpdmVJdGVtSW50b1ZpZXciLCJrZXlib2FyZEV2ZW50cyIsInJlbmRlckNhbGVuZGFyVmlld0hlYWRlciIsImhhc1Nsb3R0ZWRUaXRsZSIsInRpdGxlU2VsZWN0ZWREYXRlc0Zvcm1hdHRlciIsImhlYWRlclRleHQiLCJyZW5kZXJUaW1lIiwidGltZU9ubHlQcmVzZW50YXRpb24iLCJyZW5kZXJDYWxlbmRhclZpZXdNb250aFllYXJQaWNrZXIiLCJyZW5kZXJEYXRldGltZSIsImhhc1doZWVsVmFyaWFudCIsInJlbmRlciIsImlzTW9udGhBbmRZZWFyUHJlc2VudGF0aW9uIiwic2hvdWxkU2hvd01vbnRoQW5kWWVhciIsIm1vbnRoWWVhclBpY2tlck9wZW4iLCJoYXNEYXRlUHJlc2VudGF0aW9uIiwiaGFzR3JpZCIsIndhdGNoZXJzIiwiaW9zIiwibWQiLCJpb3NFbnRlckFuaW1hdGlvbiIsImJhc2VFbCIsImJhc2VBbmltYXRpb24iLCJiYWNrZHJvcEFuaW1hdGlvbiIsIndyYXBwZXJBbmltYXRpb24iLCJhZGRFbGVtZW50IiwiZnJvbVRvIiwiYmVmb3JlU3R5bGVzIiwiYWZ0ZXJDbGVhclN0eWxlcyIsImVhc2luZyIsImR1cmF0aW9uIiwiYWRkQW5pbWF0aW9uIiwiaW9zTGVhdmVBbmltYXRpb24iLCJwaWNrZXJJb3NDc3MiLCJwaWNrZXJNZENzcyIsIlBpY2tlciIsImRpZFByZXNlbnQiLCJ3aWxsUHJlc2VudCIsIndpbGxEaXNtaXNzIiwiZGlkRGlzbWlzcyIsInByZXNlbnRlZCIsImtleWJvYXJkQ2xvc2UiLCJidXR0b25zIiwiY29sdW1ucyIsInNob3dCYWNrZHJvcCIsImJhY2tkcm9wRGlzbWlzcyIsImFuaW1hdGVkIiwib25CYWNrZHJvcFRhcCIsImRpc3BhdGNoQ2FuY2VsSGFuZGxlciIsInJvbGUiLCJjYW5jZWxCdXR0b24iLCJjYWxsQnV0dG9uSGFuZGxlciIsImR1cmF0aW9uVGltZW91dCIsImRhdGEiLCJvbkRpZERpc21pc3MiLCJnZXRDb2x1bW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvbHVtbiIsImJ1dHRvbkNsaWNrIiwic2hvdWxkRGlzbWlzcyIsImdldFNlbGVjdGVkIiwicnRuIiwiaGFuZGxlciIsInNlbGVjdGVkIiwic2VsZWN0ZWRDb2x1bW4iLCJzZWxlY3RlZEluZGV4Iiwib3B0aW9ucyIsImNvbHVtbkluZGV4IiwiaHRtbEF0dHJpYnV0ZXMiLCJ6SW5kZXgiLCJjc3NDbGFzcyIsIm9uSW9uQmFja2Ryb3BUYXAiLCJvbklvblBpY2tlcldpbGxEaXNtaXNzIiwidmlzaWJsZSIsInRhcHBhYmxlIiwiYnV0dG9uV3JhcHBlckNsYXNzIiwidHlwZSIsImJ1dHRvbkNsYXNzIiwicGlja2VyQ29sdW1uSW9zQ3NzIiwicGlja2VyQ29sdW1uTWRDc3MiLCJQaWNrZXJDb2x1bW5DbXAiLCJpb25QaWNrZXJDb2xDaGFuZ2UiLCJvcHRIZWlnaHQiLCJyb3RhdGVGYWN0b3IiLCJzY2FsZUZhY3RvciIsInZlbG9jaXR5Iiwibm9BbmltYXRlIiwiY29sQ2hhbmdlZCIsInJlZnJlc2giLCJwaWNrZXJSb3RhdGVGYWN0b3IiLCJwaWNrZXJTY2FsZUZhY3RvciIsImdlc3R1cmUiLCJjcmVhdGVHZXN0dXJlIiwiZ2VzdHVyZU5hbWUiLCJnZXN0dXJlUHJpb3JpdHkiLCJwYXNzaXZlIiwib25TdGFydCIsIm9uTW92ZSIsIm9uRW5kIiwiZW5hYmxlIiwidG1ySWQiLCJjb2xFbCIsIm9wdHNFbCIsImZpcnN0RWxlbWVudENoaWxkIiwiY2xpZW50SGVpZ2h0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyYWZJZCIsImVtaXRDb2xDaGFuZ2UiLCJzZXRTZWxlY3RlZCIsInVwZGF0ZSIsInNhdmVZIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJpbmRleEZvclkiLCJkdXJhdGlvblN0ciIsInNjYWxlU3RyIiwiY2hpbGRyZW4iLCJvcHQiLCJvcHRPZmZzZXQiLCJ0cmFuc2Zvcm0iLCJyb3RhdGVYIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiUElDS0VSX09QVF9TRUxFQ1RFRCIsInByZXZTZWxlY3RlZCIsImxhc3RJbmRleCIsImRlY2VsZXJhdGUiLCJERUNFTEVSQVRJT05fRlJJQ1RJT04iLCJtaW5ZIiwibWF4WSIsIm5vdExvY2tlZEluIiwicm91bmQiLCJjdXJyZW50UG9zIiwiZXZlbnQiLCJjYW5jZWxhYmxlIiwiZGVsdGFZIiwicG93IiwiYm91bmNlRnJvbSIsIk1BWF9QSUNLRVJfU1BFRUQiLCJ2ZWxvY2l0eVkiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwiaXNTY3JvbGxpbmdVcCIsIm9wdEhlaWdodEZyYWN0aW9uIiwiZm9yY2VSZWZyZXNoIiwiQnV0dG9uIiwiYWxpZ24iLCJjb2x1bW5XaWR0aCIsInByZWZpeCIsInByZWZpeFdpZHRoIiwibWF4V2lkdGgiLCJvcHRpb25zV2lkdGgiLCJzdWZmaXgiLCJzdWZmaXhXaWR0aCIsImlvbl9kYXRldGltZSIsImlvbl9waWNrZXIiLCJpb25fcGlja2VyX2NvbHVtbiJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8iLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMF19