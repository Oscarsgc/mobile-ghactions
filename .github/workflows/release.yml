name: Integration Release
on:
  workflow_dispatch:
  # push:
  #   branches: [main]

env:
  JAVA_VERSION: "11"
  WORKING_DIR: "./App"
  android_version_code: 0

jobs:
  # android:
  #   name: Build and Release APK
  #   runs-on: macos-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Download Version artifact
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         github_token: ${{secrets.GITHUB_TOKEN}}
  #         workflow: release.yml
  #         name: android-integration-released-version
  #         path: ./App/
  #         search_artifacts: true
  #         workflow_conclusion: ""
  #         if_no_artifact_found: ignore

  #     - name: Check file existence
  #       id: check_files
  #       uses: andstor/file-existence-action@v2
  #       with:
  #         files: "./App/AndroidVersionCode.txt"

  #     - name: File exists
  #       working-directory: ${{ env.WORKING_DIR }}
  #       if: steps.check_files.outputs.files_exists == 'true'
  #       run: echo "android_version_code=$(cat AndroidVersionCode.txt | cut -d "-" -f2-)" >> $GITHUB_ENV

  # - name: Setup Node
  #   uses: actions/setup-node@v3
  #   with:
  #     node-version: 16.x

  # - name: Setup Java SDK ${{ env.JAVA_VERSION }}
  #   uses: actions/setup-java@v3
  #   with:
  #     distribution: "zulu"
  #     java-version: ${{ env.JAVA_VERSION }}

  # - name: Update Version Code value
  #   id: updated_version
  #   uses: actions/github-script@v6
  #   with:
  #     script: |
  #       return parseInt("${{ env.android_version_code }}") + 1

  # - name: Update gradle version for Android
  #   uses: damienaicheh/update-android-version-gradle-action@v1.0.0
  #   with:
  #     build-gradle-path: "./App/android/app/build.gradle"
  #     version-code: "${{steps.updated_version.outputs.result}}"
  #     version-name: "1.0.${{steps.updated_version.outputs.result}}"
  #     print-file: true

  # - name: Install Ionic
  #   run: npm install -g @ionic/cli

  # - name: Install app dependencies
  #   working-directory: ${{ env.WORKING_DIR }}
  #   run: npm install

  # - name: Build App
  #   working-directory: ${{ env.WORKING_DIR }}
  #   run: npm run build

  # - name: Capacitor copy
  #   working-directory: ${{ env.WORKING_DIR }}
  #   run: npx cap copy && npx cap sync

  # - name: Build Android
  #   working-directory: ${{ env.WORKING_DIR }}
  #   run: ionic capacitor build android --minifycss --optimizejs --minifyjs --no-open --release

  # - name: Build app APK
  #   working-directory: ${{ env.WORKING_DIR }}/android
  #   run: gradle assemble

  # - name: Extract Android signing key from env
  #   working-directory: ${{ env.WORKING_DIR }}
  #   run: |
  #     echo "${{ secrets.RELEASE_KEYSTORE }}" > ./android/release.jks.base64
  #     base64 -d ./android/release.jks.base64 > ./android/release.decrypted.jks

  # - name: Extract Android JSON
  #   working-directory: ${{ env.WORKING_DIR }}
  #   run: |
  #     echo "${{ secrets.ANDROID_JSON_KEY_FILE }}" > ./android/service_account.base64
  #     base64 -d ./android/service_account.base64> ./android/service_account.json

  # - name: Align APK
  #   run: $ANDROID_HOME/build-tools/30.0.3/zipalign -f -v 4 ./App/android/app/build/outputs/apk/release/app-release-unsigned.apk ./App/android/app/build/outputs/apk/release/app-release-aligned.apk

  # - name: Sign build
  #   run: $ANDROID_HOME/build-tools/30.0.3/apksigner sign --ks-pass pass:${{secrets.RELEASE_KEYSTORE_PASSWORD}} --key-pass pass:${{secrets.RELEASE_KEYSTORE_PASSWORD}} --ks ./App/android/release.decrypted.jks --ks-key-alias release --in ./App/android/app/build/outputs/apk/release/app-release-aligned.apk --out ./App/android/app/build/outputs/apk/release/app-release.apk

  # - name: Upload APK to TestApp.io
  #   uses: testappio/github-action@v5
  #   with:
  #     api_token: ${{secrets.TESTAPPIO_API_TOKEN}}
  #     app_id: ${{secrets.TESTAPPIO_APP_ID}}
  #     file: App/android/app/build/outputs/apk/release/app-release-signed.apk
  #     release_notes: "Testing manual release notes..."
  #     git_release_notes: false
  #     include_git_commit_id: false
  #     notify: true

  # - name: Decode Keystore File
  #   uses: timheuer/base64-to-file@v1
  #   id: android_keystore
  #   with:
  #     fileName: android_keystore.keystore
  #     encodedString: ${{ secrets.RELEASE_KEYSTORE }}

  # - name: Decode Google Play Confi File
  #   uses: timheuer/base64-to-file@v1
  #   id: service_account_json_file
  #   with:
  #     fileName: serviceAccount.json
  #     encodedString: ${{ secrets.ANDROID_JSON_KEY_FILE }}

  # - name: Deploy using Fastlane
  #   uses: maierj/fastlane-action@v2.3.0
  #   env:
  #     KEYSTORE_PATH: ${{ steps.android_keystore.outputs.filePath }}
  #     ANDROID_JSON_KEY_FILE: ${{ steps.service_account_json_file.outputs.filePath }}
  #     DEVELOPER_PACKAGE_NAME: com.aitbol.spotlight
  #     KEYSTORE_KEY_ALIAS: release
  #     KEYSTORE_KEY_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
  #     KEYSTORE_STORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
  #   with:
  #     subdirectory: ./App/
  #     lane: android playstore

  # - name: Print deployed Release Version
  #   run: |
  #     echo "Build-${{steps.updated_version.outputs.result}}" > ./App/AndroidVersionCode.txt

  # - name: Archive Android Code Version
  #   uses: actions/upload-artifact@v3
  #   with:
  #     name: android-integration-released-version
  #     path: ./App/AndroidVersionCode.txt

  # ####################################################################
  # - name: Bump version and push tag
  #   id: tag_version
  #   uses: mathieudutour/github-tag-action@v6.0
  #   with:
  #     github_token: ${{ secrets.GITHUB_TOKEN }}

  # - name: Create a GitHub release
  #   uses: ncipollo/release-action@v1
  #   with:
  #     tag: ${{ steps.tag_version.outputs.new_tag }}
  #     name: Release ${{ steps.tag_version.outputs.new_tag }}

  ios:
    name: Build and Release IPA
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Install the Apple certificate and provisioning profile
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #     AUTH_KEY_BASE64: ${{ secrets.AUTH_KEY_BASE64 }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     echo $CERTIFICATE_PATH
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     echo $PP_PATH
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #     echo $KEYCHAIN_PATH
      #     AUTH_KEY_PATH=$RUNNER_TEMP/auth_key.p8
      #     echo $AUTH_KEY_PATH

      #     # import certificates and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
      #     echo -n "$AUTH_KEY_BASE64" | base64 --decode --output $AUTH_KEY_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      #     echo "KEY_PATH=$AUTH_KEY_PATH" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Install app dependencies
        run: npm install

      - name: Build App
        run: npm run build

      # - name: Capacitor copy
      #   run: ionic capacitor copy ios && ionic capacitor update ios

      - name: Build iOS
        run: ionic capacitor build ios --minifycss --optimizejs --minifyjs --no-open --release --prod

      # - name: Build with xCode
      #   run: xcodebuild -workspace ios/App/App.xcworkspace -scheme App clean archive -configuration Release -sdk iphoneos DEVELOPMENT_TEAM=${{secrets.APPLE_DEV_TEAM}} -archivePath ios/App/App.xcarchive -authenticationKeyIssuerID ${{secrets.AUTH_KEY_ISSUER_ID}} -authenticationKeyID ${{secrets.KEY_ID}} -authenticationKeyPath ${{ env.KEY_PATH }} -allowProvisioningUpdates

      # - name: Generate IPA file
      #   run: |
      #     cd ios/App/App.xcarchive/Products/Applications
      #     mkdir Payload
      #     cp -R App.app Payload
      #     zip -qyr App.ipa ./Payload
      #     rm -rf Payload

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2

      - name: Release to store
        uses: maierj/fastlane-action@v2.3.0
        env:
          DEVELOPER_APP_IDENTIFIER: ${{ secrets.DEVELOPER_APP_IDENTIFIER }} #App bundle ID
          DEVELOPER_APP_ID: ${{ secrets.DEVELOPER_APP_ID }} #Get From AppConnect
          PROVISIONING_PROFILE_SPECIFIER: match AppStore ${{ secrets.DEVELOPER_APP_IDENTIFIER }} #App Bundle ID
          TEMP_KEYCHAIN_USER: ${{ secrets.TEMP_KEYCHAIN_USER }} #Anything
          TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }} #Anything
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }} #API Key Issuer ID
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }} #API Key ID
          APPLE_KEY_CONTENT: ${{ secrets.APPLE_KEY_CONTENT }} #P8 Certificate as text
          CERTIFICATE_STORE_URL: ${{ secrets.CERTIFICATE_STORE_URL }} #Repository URL
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }} #GIT USERNAME
          GIT_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} #GIT TOKEN
          GIT_CREDENTIALS: ${{ secrets.GIT_CREDENTIALS }} #GIT TOKEN
          FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }} #apple id
          MATCH_USERNAME: ${{ secrets.FASTLANE_APPLE_ID }} #apple id
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }} #any password
          APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }} #team ID
          DEVELOPER_PORTAL_TEAM_ID: ${{ secrets.DEVELOPER_PORTAL_TEAM_ID }} #team ID
        with:
          subdirectory: ${{ env.WORKING_DIR }}
          lane: release_appstore

    # - name: Upload IPA to TestApp.io
    #   uses: testappio/github-action@v5
    #   with:
    #     api_token: ${{secrets.TESTAPPIO_API_TOKEN}}
    #     app_id: ${{secrets.TESTAPPIO_APP_ID}}
    #     file: App/ios/App/App.xcarchive/Products/Applications/App.ipa
    #     release_notes: "Testing manual release notes..."
    #     git_release_notes: false
    #     include_git_commit_id: false
    #     notify: true
