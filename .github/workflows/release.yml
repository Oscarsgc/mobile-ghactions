name: Test Release
on:
  push:
    branches: [main]

env:
  JAVA_VERSION: "11"
  WORKING_DIR: "./App"
  android_version_code: 0

jobs:
  android:
    name: Build and Release APK
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Version artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: release.yml
          name: android-integration-released-version
          search_artifacts: true
          workflow_conclusion: success
          if_no_artifact_found: ignore

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "AndroidVersionCode.txt"

      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: echo "android_version_code=$(cat ./AndroidVersionCode.txt | cut -d "-" -f2-)" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Setup Java SDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Update Version Code value
        id: updated_version
        uses: actions/github-script@v6
        with:
          script: |
            return parseInt("${{ env.android_version_code }}") + 1

      - name: Get result
        run: echo "${{steps.updated_version.outputs.result}}"

      - name: Update gradle version for Android
        uses: damienaicheh/update-android-version-gradle-action@v1.0.0
        with:
          build-gradle-path: "app/android/app/build.gradle"
          version-code: "${{steps.updated_version.outputs.result}}"
          version-name: "2.0"
          print-file: true

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Install app dependencies
        run: npm install

      - name: Build App
        run: npm run build

      - name: Capacitor copy
        run: npx cap copy && npx cap sync

      - name: Build Android
        run: ionic capacitor build android --minifycss --optimizejs --minifyjs --no-open --release --prod

      - name: Build app APK
        run: cd android && gradle assemble

      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > ./android/release.jks.base64
          base64 -d ./android/release.jks.base64 > ./android/release.decrypted.jks

      - name: Sign dev build
        run: jarsigner -keystore ./android/release.decrypted.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/apk/release/app-release-signed.apk ./android/app/build/outputs/apk/release/app-release-unsigned.apk release

      - name: Upload APK to TestApp.io
        uses: testappio/github-action@v5
        with:
          api_token: ${{secrets.TESTAPPIO_API_TOKEN}}
          app_id: ${{secrets.TESTAPPIO_APP_ID}}
          file: App/android/app/build/outputs/apk/release/app-release-signed.apk
          release_notes: "Testing manual release notes..."
          git_release_notes: false
          include_git_commit_id: false
          notify: true

      - name: Print deployed Release Version
        run: |
          echo "Build-${{steps.updated_version.outputs.result}}" > ./AndroidVersionCode.txt

      - name: Archive Android Code Version
        uses: actions/upload-artifact@v3
        with:
          name: android-integration-released-version
          path: ./App/AndroidVersionCode.txt

  # ios:
  #   name: Build and Release IPA
  #   runs-on: macos-latest
  #   defaults:
  #     run:
  #       working-directory: ${{ env.WORKING_DIR }}

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3

  #   - name: Install the Apple certificate and provisioning profile
  #     env:
  #       BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #       P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #       BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #       KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #       AUTH_KEY_BASE64: ${{ secrets.AUTH_KEY_BASE64 }}
  #     run: |
  #       # create variables
  #       CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #       echo $CERTIFICATE_PATH
  #       PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #       echo $PP_PATH
  #       KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  #       echo $KEYCHAIN_PATH
  #       AUTH_KEY_PATH=$RUNNER_TEMP/auth_key.p8
  #       echo $AUTH_KEY_PATH

  #       # import certificates and provisioning profile from secrets
  #       echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
  #       echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
  #       echo -n "$AUTH_KEY_BASE64" | base64 --decode --output $AUTH_KEY_PATH

  #       # create temporary keychain
  #       security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #       security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #       # import certificate to keychain
  #       security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #       security list-keychain -d user -s $KEYCHAIN_PATH

  #       # apply provisioning profile
  #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #       cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

  #       echo "KEY_PATH=$AUTH_KEY_PATH" >> $GITHUB_ENV

  #   - name: Setup Node
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: 16.x

  #   - name: Install Ionic
  #     run: npm install -g @ionic/cli

  #   - name: Install app dependencies
  #     run: npm install

  #   - name: Build App
  #     run: npm run build

  #   - name: Capacitor copy
  #     run: ionic capacitor copy ios && ionic capacitor update ios

  #   - name: Build iOS
  #     run: ionic capacitor build ios --minifycss --optimizejs --minifyjs --no-open --release --prod

  #   - name: Build with xCode
  #     run: xcodebuild -workspace ios/App/App.xcworkspace -scheme App clean archive -configuration Release -sdk iphoneos DEVELOPMENT_TEAM=${{secrets.APPLE_DEV_TEAM}} -archivePath ios/App/App.xcarchive -authenticationKeyIssuerID ${{secrets.AUTH_KEY_ISSUER_ID}} -authenticationKeyID ${{secrets.KEY_ID}} -authenticationKeyPath ${{ env.KEY_PATH }} -allowProvisioningUpdates

  #   - name: Generate IPA file
  #     run: |
  #       cd ios/App/App.xcarchive/Products/Applications
  #       mkdir Payload
  #       cp -R App.app Payload
  #       zip -qyr App.ipa ./Payload
  #       rm -rf Payload

  #   - name: Upload IPA to TestApp.io
  #     uses: testappio/github-action@v5
  #     with:
  #       api_token: ${{secrets.TESTAPPIO_API_TOKEN}}
  #       app_id: ${{secrets.TESTAPPIO_APP_ID}}
  #       file: App/ios/App/App.xcarchive/Products/Applications/App.ipa
  #       release_notes: "Testing manual release notes..."
  #       git_release_notes: false
  #       include_git_commit_id: false
  #       notify: true
